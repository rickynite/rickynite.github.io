{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application-extension/lib/index.js"],"names":["CommandIDs","activateNextTab","activatePreviousTab","activateNextTabBar","activatePreviousTabBar","close","closeOtherTabs","closeRightTabs","closeAll","setMode","toggleMode","toggleLeftArea","toggleRightArea","togglePresentationMode","tree","switchSidebar","main","id","requires","IRouter","IWindowResolver","ITranslator","optional","ICommandPalette","IConnectionLost","provides","ITreePathUpdater","activate","app","router","resolver","translator","palette","connectionLost","trans","load","JupyterLab","Error","_docTreePath","_defaultBrowserTreePath","workspace","name","console","debug","registerPluginErrors","length","body","map","e","message","join","showErrorMessage","__","commands","contextMenu","shell","category","addCommand","JupyterFrontEndContextMenu","label","isEnabled","execute","addItem","command","selector","rank","Infinity","contextMenuWidget","node","contextMenuHitTest","dataset","currentWidget","matches","toArray","widgets","filter","widget","closeWidgets","forEach","findTab","area","type","iterator","iter","children","value","tab","next","some","widgetsRightOf","tabArea","_a","mainArea","saveLayout","PageConfig","dock","tabAreaFor","index","findIndex","slice","tabSelector","title","closable","otherWidgets","leftCollapsed","expandLeft","collapseLeft","activateById","isToggled","isVisible","isEmpty","rightCollapsed","expandRight","collapseRight","presentationMode","args","mode","addCommands","layoutModified","connect","notifyCommandChanged","modeChanged","_","path","navigate","skipRouting","currentPathChanged","maybeTreePath","newValue","treePath","ConnectionLost","serviceManager","connectionFailure","manager","error","builder","build","then","showDialog","buttons","Dialog","actions","hasClose","button","accept","reload","catch","err","includes","isAvailable","shouldCheck","getStatus","response","status","result","undefined","window","addEventListener","event","isDirty","returnValue","autoStart","layout","IStateDB","ILabShell","state","labShell","info","first","started","registry","restorer","LayoutRestorer","connector","fetch","saved","restoreLayout","save","ILayoutRestorer","JupyterFrontEnd","paths","base","urls","Router","route","set","DisposableSet","delegate","PromiseDelegate","treePattern","RegExp","add","async","isDisposed","query","URLExt","search","browser","dispose","resolve","file","register","pattern","listener","routed","DisposableDelegate","disconnect","promise","notfound","bad","notFound","busy","ILabStatus","busySignal","isBusy","favicon","document","querySelector","newFavicon","rel","parentNode","replaceChild","SIDEBAR_ID","sidebar","ISettingRegistry","settingRegistry","overrides","handleLayoutOverrides","each","Promise","all","restored","settings","get","composite","changed","contextNode","side","leftPanel","getElementById","contains","newOverrides","Object","assign","LabShell","propertyInspector","IPropertyInspectorProvider","labshell","SideBarPropertyInspectorProvider","icon","buildIcon","caption","JupyterLogo","logo","Widget","jupyterIcon","container","elementPosition","margin","height","width"],"mappings":"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","file":"5311.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module application-extension\n */\nimport { IConnectionLost, ILabShell, ILabStatus, ILayoutRestorer, IRouter, ITreePathUpdater, ConnectionLost, JupyterFrontEnd, JupyterFrontEndContextMenu, JupyterLab, LabShell, LayoutRestorer, Router } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, IWindowResolver, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { URLExt, PageConfig } from '@jupyterlab/coreutils';\nimport { IPropertyInspectorProvider, SideBarPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { buildIcon, jupyterIcon } from '@jupyterlab/ui-components';\nimport { each, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { DisposableDelegate, DisposableSet } from '@lumino/disposable';\nimport { Widget } from '@lumino/widgets';\nimport * as React from 'react';\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.activateNextTab = 'application:activate-next-tab';\n    CommandIDs.activatePreviousTab = 'application:activate-previous-tab';\n    CommandIDs.activateNextTabBar = 'application:activate-next-tab-bar';\n    CommandIDs.activatePreviousTabBar = 'application:activate-previous-tab-bar';\n    CommandIDs.close = 'application:close';\n    CommandIDs.closeOtherTabs = 'application:close-other-tabs';\n    CommandIDs.closeRightTabs = 'application:close-right-tabs';\n    CommandIDs.closeAll = 'application:close-all';\n    CommandIDs.setMode = 'application:set-mode';\n    CommandIDs.toggleMode = 'application:toggle-mode';\n    CommandIDs.toggleLeftArea = 'application:toggle-left-area';\n    CommandIDs.toggleRightArea = 'application:toggle-right-area';\n    CommandIDs.togglePresentationMode = 'application:toggle-presentation-mode';\n    CommandIDs.tree = 'router:tree';\n    CommandIDs.switchSidebar = 'sidebar:switch';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The main extension.\n */\nconst main = {\n    id: '@jupyterlab/application-extension:main',\n    requires: [IRouter, IWindowResolver, ITranslator],\n    optional: [ICommandPalette, IConnectionLost],\n    provides: ITreePathUpdater,\n    activate: (app, router, resolver, translator, palette, connectionLost) => {\n        const trans = translator.load('jupyterlab');\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${main.id} must be activated in JupyterLab.`);\n        }\n        // These two internal state variables are used to manage the two source\n        // of the tree part of the URL being updated: 1) path of the active document,\n        // 2) path of the default browser if the active main area widget isn't a document.\n        let _docTreePath = '';\n        let _defaultBrowserTreePath = '';\n        function updateTreePath(treePath) {\n            _defaultBrowserTreePath = treePath;\n            if (!_docTreePath) {\n                const path = PageConfig.getUrl({ treePath });\n                router.navigate(path, { skipRouting: true });\n                // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n                PageConfig.setOption('treePath', treePath);\n            }\n        }\n        // Requiring the window resolver guarantees that the application extension\n        // only loads if there is a viable window name. Otherwise, the application\n        // will short-circuit and ask the user to navigate away.\n        const workspace = resolver.name;\n        console.debug(`Starting application in workspace: \"${workspace}\"`);\n        // If there were errors registering plugins, tell the user.\n        if (app.registerPluginErrors.length !== 0) {\n            const body = (React.createElement(\"pre\", null, app.registerPluginErrors.map(e => e.message).join('\\n')));\n            void showErrorMessage(trans.__('Error Registering Plugins'), {\n                message: body\n            });\n        }\n        addCommands(app, palette, trans);\n        // If the application shell layout is modified,\n        // trigger a refresh of the commands.\n        app.shell.layoutModified.connect(() => {\n            app.commands.notifyCommandChanged();\n        });\n        // Watch the mode and update the page URL to /lab or /doc to reflect the\n        // change.\n        app.shell.modeChanged.connect((_, args) => {\n            const path = PageConfig.getUrl({ mode: args });\n            router.navigate(path, { skipRouting: true });\n            // Persist this mode change to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('mode', args);\n        });\n        // Watch the path of the current widget in the main area and update the page\n        // URL to reflect the change.\n        app.shell.currentPathChanged.connect((_, args) => {\n            const maybeTreePath = args.newValue;\n            const treePath = maybeTreePath || _defaultBrowserTreePath;\n            const path = PageConfig.getUrl({ treePath: treePath });\n            router.navigate(path, { skipRouting: true });\n            // Persist the new tree path to PageConfig as it is used elsewhere at runtime.\n            PageConfig.setOption('treePath', treePath);\n            _docTreePath = maybeTreePath;\n        });\n        // If the connection to the server is lost, handle it with the\n        // connection lost handler.\n        connectionLost = connectionLost || ConnectionLost;\n        app.serviceManager.connectionFailure.connect((manager, error) => connectionLost(manager, error, translator));\n        const builder = app.serviceManager.builder;\n        const build = () => {\n            return builder\n                .build()\n                .then(() => {\n                return showDialog({\n                    title: trans.__('Build Complete'),\n                    body: (React.createElement(\"div\", null,\n                        trans.__('Build successfully completed, reload page?'),\n                        React.createElement(\"br\", null),\n                        trans.__('You will lose any unsaved changes.'))),\n                    buttons: [\n                        Dialog.cancelButton({\n                            label: trans.__('Reload Without Saving'),\n                            actions: ['reload']\n                        }),\n                        Dialog.okButton({ label: trans.__('Save and Reload') })\n                    ],\n                    hasClose: true\n                });\n            })\n                .then(({ button: { accept, actions } }) => {\n                if (accept) {\n                    void app.commands\n                        .execute('docmanager:save')\n                        .then(() => {\n                        router.reload();\n                    })\n                        .catch(err => {\n                        void showErrorMessage(trans.__('Save Failed'), {\n                            message: React.createElement(\"pre\", null, err.message)\n                        });\n                    });\n                }\n                else if (actions.includes('reload')) {\n                    router.reload();\n                }\n            })\n                .catch(err => {\n                void showErrorMessage(trans.__('Build Failed'), {\n                    message: React.createElement(\"pre\", null, err.message)\n                });\n            });\n        };\n        if (builder.isAvailable && builder.shouldCheck) {\n            void builder.getStatus().then(response => {\n                if (response.status === 'building') {\n                    return build();\n                }\n                if (response.status !== 'needed') {\n                    return;\n                }\n                const body = (React.createElement(\"div\", null,\n                    trans.__('JupyterLab build is suggested:'),\n                    React.createElement(\"br\", null),\n                    React.createElement(\"pre\", null, response.message)));\n                void showDialog({\n                    title: trans.__('Build Recommended'),\n                    body,\n                    buttons: [\n                        Dialog.cancelButton(),\n                        Dialog.okButton({ label: trans.__('Build') })\n                    ]\n                }).then(result => (result.button.accept ? build() : undefined));\n            });\n        }\n        const message = trans.__('Are you sure you want to exit JupyterLab?\\n\\nAny unsaved changes will be lost.');\n        // The spec for the `beforeunload` event is implemented differently by\n        // the different browser vendors. Consequently, the `event.returnValue`\n        // attribute needs to set in addition to a return value being returned.\n        // For more information, see:\n        // https://developer.mozilla.org/en/docs/Web/Events/beforeunload\n        window.addEventListener('beforeunload', event => {\n            if (app.status.isDirty) {\n                return (event.returnValue = message);\n            }\n        });\n        return updateTreePath;\n    },\n    autoStart: true\n};\n/**\n * The default layout restorer provider.\n */\nconst layout = {\n    id: '@jupyterlab/application-extension:layout',\n    requires: [IStateDB, ILabShell],\n    activate: (app, state, labShell, info) => {\n        const first = app.started;\n        const registry = app.commands;\n        const restorer = new LayoutRestorer({ connector: state, first, registry });\n        void restorer.fetch().then(saved => {\n            labShell.restoreLayout(PageConfig.getOption('mode'), saved);\n            labShell.layoutModified.connect(() => {\n                void restorer.save(labShell.saveLayout());\n            });\n        });\n        return restorer;\n    },\n    autoStart: true,\n    provides: ILayoutRestorer\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlab/application-extension:router',\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    },\n    autoStart: true,\n    provides: IRouter\n};\n/**\n * The default tree route resolver plugin.\n */\nconst tree = {\n    id: '@jupyterlab/application-extension:tree-resolver',\n    autoStart: true,\n    requires: [IRouter],\n    provides: JupyterFrontEnd.ITreeResolver,\n    activate: (app, router) => {\n        const { commands } = app;\n        const set = new DisposableSet();\n        const delegate = new PromiseDelegate();\n        const treePattern = new RegExp('/(lab|doc)(/workspaces/[a-zA-Z0-9-_]+)?(/tree/.*)?');\n        set.add(commands.addCommand(CommandIDs.tree, {\n            execute: async (args) => {\n                var _a;\n                if (set.isDisposed) {\n                    return;\n                }\n                const query = URLExt.queryStringToObject((_a = args.search) !== null && _a !== void 0 ? _a : '');\n                const browser = query['file-browser-path'] || '';\n                // Remove the file browser path from the query string.\n                delete query['file-browser-path'];\n                // Clean up artifacts immediately upon routing.\n                set.dispose();\n                delegate.resolve({ browser, file: PageConfig.getOption('treePath') });\n            }\n        }));\n        set.add(router.register({ command: CommandIDs.tree, pattern: treePattern }));\n        // If a route is handled by the router without the tree command being\n        // invoked, resolve to `null` and clean up artifacts.\n        const listener = () => {\n            if (set.isDisposed) {\n                return;\n            }\n            set.dispose();\n            delegate.resolve(null);\n        };\n        router.routed.connect(listener);\n        set.add(new DisposableDelegate(() => {\n            router.routed.disconnect(listener);\n        }));\n        return { paths: delegate.promise };\n    }\n};\n/**\n * The default URL not found extension.\n */\nconst notfound = {\n    id: '@jupyterlab/application-extension:notfound',\n    requires: [JupyterFrontEnd.IPaths, IRouter, ITranslator],\n    activate: (_, paths, router, translator) => {\n        const trans = translator.load('jupyterlab');\n        const bad = paths.urls.notFound;\n        if (!bad) {\n            return;\n        }\n        const base = router.base;\n        const message = trans.__('The path: %1 was not found. JupyterLab redirected to: %2', bad, base);\n        // Change the URL back to the base application URL.\n        router.navigate('');\n        void showErrorMessage(trans.__('Path Not Found'), { message });\n    },\n    autoStart: true\n};\n/**\n * Change the favicon changing based on the busy status;\n */\nconst busy = {\n    id: '@jupyterlab/application-extension:faviconbusy',\n    requires: [ILabStatus],\n    activate: async (_, status) => {\n        status.busySignal.connect((_, isBusy) => {\n            const favicon = document.querySelector(`link[rel=\"icon\"]${isBusy ? '.idle.favicon' : '.busy.favicon'}`);\n            if (!favicon) {\n                return;\n            }\n            const newFavicon = document.querySelector(`link${isBusy ? '.busy.favicon' : '.idle.favicon'}`);\n            if (!newFavicon) {\n                return;\n            }\n            // If we have the two icons with the special classes, then toggle them.\n            if (favicon !== newFavicon) {\n                favicon.rel = '';\n                newFavicon.rel = 'icon';\n                // Firefox doesn't seem to recognize just changing rel, so we also\n                // reinsert the link into the DOM.\n                newFavicon.parentNode.replaceChild(newFavicon, newFavicon);\n            }\n        });\n    },\n    autoStart: true\n};\nconst SIDEBAR_ID = '@jupyterlab/application-extension:sidebar';\n/**\n * Keep user settings for where to show the side panels.\n */\nconst sidebar = {\n    id: SIDEBAR_ID,\n    autoStart: true,\n    requires: [ISettingRegistry, ILabShell, ITranslator],\n    activate: (app, settingRegistry, labShell, translator, info) => {\n        const trans = translator.load('jupyterlab');\n        let overrides = {};\n        // const trans = translator.load(\"jupyterlab\");\n        const handleLayoutOverrides = () => {\n            each(labShell.widgets('left'), widget => {\n                if (overrides[widget.id] && overrides[widget.id] === 'right') {\n                    labShell.add(widget, 'right');\n                }\n            });\n            each(labShell.widgets('right'), widget => {\n                if (overrides[widget.id] && overrides[widget.id] === 'left') {\n                    labShell.add(widget, 'left');\n                }\n            });\n        };\n        labShell.layoutModified.connect(handleLayoutOverrides);\n        // Fetch overrides from the settings system.\n        void Promise.all([settingRegistry.load(SIDEBAR_ID), app.restored]).then(([settings]) => {\n            overrides = settings.get('overrides').composite || {};\n            settings.changed.connect(settings => {\n                overrides =\n                    settings.get('overrides').composite || {};\n                handleLayoutOverrides();\n            });\n        });\n        // Add a command to switch a side panels's side\n        app.commands.addCommand(CommandIDs.switchSidebar, {\n            label: trans.__('Switch Sidebar Side'),\n            execute: () => {\n                // First, try to find the correct panel based on the\n                // application context menu click.\n                const contextNode = app.contextMenuHitTest(node => !!node.dataset.id);\n                let id;\n                let side;\n                if (contextNode) {\n                    id = contextNode.dataset['id'];\n                    const leftPanel = document.getElementById('jp-left-stack');\n                    const node = document.getElementById(id);\n                    if (leftPanel && node && leftPanel.contains(node)) {\n                        side = 'right';\n                    }\n                    else {\n                        side = 'left';\n                    }\n                }\n                else {\n                    // Bail if we don't find a sidebar for the widget.\n                    return;\n                }\n                // Move the panel to the other side.\n                const newOverrides = Object.assign({}, overrides);\n                newOverrides[id] = side;\n                return settingRegistry.set(SIDEBAR_ID, 'overrides', newOverrides);\n            }\n        });\n        // Add a context menu item to sidebar tabs.\n        app.contextMenu.addItem({\n            command: CommandIDs.switchSidebar,\n            selector: '.jp-SideBar .lm-TabBar-tab',\n            rank: 500\n        });\n    }\n};\n/**\n * Add the main application commands.\n */\nfunction addCommands(app, palette, trans) {\n    const { commands, contextMenu, shell } = app;\n    const category = trans.__('Main Area');\n    // Add Command to override the JLab context menu.\n    commands.addCommand(JupyterFrontEndContextMenu.contextMenu, {\n        label: trans.__('Shift+Right Click for Browser Menu'),\n        isEnabled: () => false,\n        execute: () => void 0\n    });\n    app.contextMenu.addItem({\n        command: JupyterFrontEndContextMenu.contextMenu,\n        selector: 'body',\n        rank: Infinity // At the bottom always\n    });\n    // Returns the widget associated with the most recent contextmenu event.\n    const contextMenuWidget = () => {\n        const test = (node) => !!node.dataset.id;\n        const node = app.contextMenuHitTest(test);\n        if (!node) {\n            // Fall back to active widget if path cannot be obtained from event.\n            return shell.currentWidget;\n        }\n        const matches = toArray(shell.widgets('main')).filter(widget => widget.id === node.dataset.id);\n        if (matches.length < 1) {\n            return shell.currentWidget;\n        }\n        return matches[0];\n    };\n    // Closes an array of widgets.\n    const closeWidgets = (widgets) => {\n        widgets.forEach(widget => widget.close());\n    };\n    // Find the tab area for a widget within a specific dock area.\n    const findTab = (area, widget) => {\n        switch (area.type) {\n            case 'split-area': {\n                const iterator = iter(area.children);\n                let tab = null;\n                let value;\n                do {\n                    value = iterator.next();\n                    if (value) {\n                        tab = findTab(value, widget);\n                    }\n                } while (!tab && value);\n                return tab;\n            }\n            case 'tab-area': {\n                const { id } = widget;\n                return area.widgets.some(widget => widget.id === id) ? area : null;\n            }\n            default:\n                return null;\n        }\n    };\n    // Find the tab area for a widget within the main dock area.\n    const tabAreaFor = (widget) => {\n        var _a;\n        const { mainArea } = shell.saveLayout();\n        if (!mainArea || PageConfig.getOption('mode') !== 'multiple-document') {\n            return null;\n        }\n        const area = (_a = mainArea.dock) === null || _a === void 0 ? void 0 : _a.main;\n        if (!area) {\n            return null;\n        }\n        return findTab(area, widget);\n    };\n    // Returns an array of all widgets to the right of a widget in a tab area.\n    const widgetsRightOf = (widget) => {\n        const { id } = widget;\n        const tabArea = tabAreaFor(widget);\n        const widgets = tabArea ? tabArea.widgets || [] : [];\n        const index = widgets.findIndex(widget => widget.id === id);\n        if (index < 0) {\n            return [];\n        }\n        return widgets.slice(index + 1);\n    };\n    commands.addCommand(CommandIDs.activateNextTab, {\n        label: trans.__('Activate Next Tab'),\n        execute: () => {\n            shell.activateNextTab();\n        }\n    });\n    commands.addCommand(CommandIDs.activatePreviousTab, {\n        label: trans.__('Activate Previous Tab'),\n        execute: () => {\n            shell.activatePreviousTab();\n        }\n    });\n    commands.addCommand(CommandIDs.activateNextTabBar, {\n        label: trans.__('Activate Next Tab Bar'),\n        execute: () => {\n            shell.activateNextTabBar();\n        }\n    });\n    commands.addCommand(CommandIDs.activatePreviousTabBar, {\n        label: trans.__('Activate Previous Tab Bar'),\n        execute: () => {\n            shell.activatePreviousTabBar();\n        }\n    });\n    // A CSS selector targeting tabs in the main area. This is a very\n    // specific selector since we really only want tabs that are\n    // in the main area, as opposed to those in sidebars, ipywidgets, etc.\n    const tabSelector = '#jp-main-dock-panel .lm-DockPanel-tabBar.jp-Activity .lm-TabBar-tab';\n    commands.addCommand(CommandIDs.close, {\n        label: () => trans.__('Close Tab'),\n        isEnabled: () => {\n            const widget = contextMenuWidget();\n            return !!widget && widget.title.closable;\n        },\n        execute: () => {\n            const widget = contextMenuWidget();\n            if (widget) {\n                widget.close();\n            }\n        }\n    });\n    contextMenu.addItem({\n        command: CommandIDs.close,\n        selector: tabSelector,\n        rank: 4\n    });\n    commands.addCommand(CommandIDs.closeAll, {\n        label: trans.__('Close All Tabs'),\n        execute: () => {\n            shell.closeAll();\n        }\n    });\n    commands.addCommand(CommandIDs.closeOtherTabs, {\n        label: () => trans.__('Close All Other Tabs'),\n        isEnabled: () => {\n            // Ensure there are at least two widgets.\n            const iterator = shell.widgets('main');\n            return !!iterator.next() && !!iterator.next();\n        },\n        execute: () => {\n            const widget = contextMenuWidget();\n            if (!widget) {\n                return;\n            }\n            const { id } = widget;\n            const otherWidgets = toArray(shell.widgets('main')).filter(widget => widget.id !== id);\n            closeWidgets(otherWidgets);\n        }\n    });\n    contextMenu.addItem({\n        command: CommandIDs.closeOtherTabs,\n        selector: tabSelector,\n        rank: 4\n    });\n    commands.addCommand(CommandIDs.closeRightTabs, {\n        label: () => trans.__('Close Tabs to Right'),\n        isEnabled: () => !!contextMenuWidget() && widgetsRightOf(contextMenuWidget()).length > 0,\n        execute: () => {\n            const widget = contextMenuWidget();\n            if (!widget) {\n                return;\n            }\n            closeWidgets(widgetsRightOf(widget));\n        }\n    });\n    contextMenu.addItem({\n        command: CommandIDs.closeRightTabs,\n        selector: tabSelector,\n        rank: 5\n    });\n    app.commands.addCommand(CommandIDs.toggleLeftArea, {\n        label: () => trans.__('Show Left Sidebar'),\n        execute: () => {\n            if (shell.leftCollapsed) {\n                shell.expandLeft();\n            }\n            else {\n                shell.collapseLeft();\n                if (shell.currentWidget) {\n                    shell.activateById(shell.currentWidget.id);\n                }\n            }\n        },\n        isToggled: () => !shell.leftCollapsed,\n        isVisible: () => !shell.isEmpty('left')\n    });\n    app.commands.addCommand(CommandIDs.toggleRightArea, {\n        label: () => trans.__('Show Right Sidebar'),\n        execute: () => {\n            if (shell.rightCollapsed) {\n                shell.expandRight();\n            }\n            else {\n                shell.collapseRight();\n                if (shell.currentWidget) {\n                    shell.activateById(shell.currentWidget.id);\n                }\n            }\n        },\n        isToggled: () => !shell.rightCollapsed,\n        isVisible: () => !shell.isEmpty('right')\n    });\n    app.commands.addCommand(CommandIDs.togglePresentationMode, {\n        label: () => trans.__('Presentation Mode'),\n        execute: () => {\n            shell.presentationMode = !shell.presentationMode;\n        },\n        isToggled: () => shell.presentationMode,\n        isVisible: () => true\n    });\n    app.commands.addCommand(CommandIDs.setMode, {\n        isVisible: args => {\n            const mode = args['mode'];\n            return mode === 'single-document' || mode === 'multiple-document';\n        },\n        execute: args => {\n            const mode = args['mode'];\n            if (mode === 'single-document' || mode === 'multiple-document') {\n                shell.mode = mode;\n                return;\n            }\n            throw new Error(`Unsupported application shell mode: ${mode}`);\n        }\n    });\n    app.commands.addCommand(CommandIDs.toggleMode, {\n        label: trans.__('Simple Interface'),\n        isToggled: () => shell.mode === 'single-document',\n        execute: () => {\n            const args = shell.mode === 'multiple-document'\n                ? { mode: 'single-document' }\n                : { mode: 'multiple-document' };\n            return app.commands.execute(CommandIDs.setMode, args);\n        }\n    });\n    if (palette) {\n        palette.addItem({ command: CommandIDs.activateNextTab, category });\n        palette.addItem({ command: CommandIDs.activatePreviousTab, category });\n        palette.addItem({ command: CommandIDs.activateNextTabBar, category });\n        palette.addItem({ command: CommandIDs.activatePreviousTabBar, category });\n        palette.addItem({ command: CommandIDs.close, category });\n        palette.addItem({ command: CommandIDs.closeAll, category });\n        palette.addItem({ command: CommandIDs.closeOtherTabs, category });\n        palette.addItem({ command: CommandIDs.closeRightTabs, category });\n        palette.addItem({ command: CommandIDs.toggleLeftArea, category });\n        palette.addItem({ command: CommandIDs.toggleRightArea, category });\n        palette.addItem({ command: CommandIDs.togglePresentationMode, category });\n        palette.addItem({ command: CommandIDs.toggleMode, category });\n    }\n}\n/**\n * The default JupyterLab application shell.\n */\nconst shell = {\n    id: '@jupyterlab/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof LabShell)) {\n            throw new Error(`${shell.id} did not find a LabShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: ILabShell\n};\n/**\n * The default JupyterLab application status provider.\n */\nconst status = {\n    id: '@jupyterlab/application-extension:status',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${status.id} must be activated in JupyterLab.`);\n        }\n        return app.status;\n    },\n    autoStart: true,\n    provides: ILabStatus\n};\n/**\n * The default JupyterLab application-specific information provider.\n *\n * #### Notes\n * This plugin should only be used by plugins that specifically need to access\n * JupyterLab application information, e.g., listing extensions that have been\n * loaded or deferred within JupyterLab.\n */\nconst info = {\n    id: '@jupyterlab/application-extension:info',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${info.id} must be activated in JupyterLab.`);\n        }\n        return app.info;\n    },\n    autoStart: true,\n    provides: JupyterLab.IInfo\n};\n/**\n * The default JupyterLab paths dictionary provider.\n */\nconst paths = {\n    id: '@jupyterlab/apputils-extension:paths',\n    activate: (app) => {\n        if (!(app instanceof JupyterLab)) {\n            throw new Error(`${paths.id} must be activated in JupyterLab.`);\n        }\n        return app.paths;\n    },\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths\n};\n/**\n * The default property inspector provider.\n */\nconst propertyInspector = {\n    id: '@jupyterlab/application-extension:property-inspector',\n    autoStart: true,\n    requires: [ILabShell, ITranslator],\n    optional: [ILayoutRestorer],\n    provides: IPropertyInspectorProvider,\n    activate: (app, labshell, translator, restorer) => {\n        const trans = translator.load('jupyterlab');\n        const widget = new SideBarPropertyInspectorProvider(labshell, undefined, translator);\n        widget.title.icon = buildIcon;\n        widget.title.caption = trans.__('Property Inspector');\n        widget.id = 'jp-property-inspector';\n        labshell.add(widget, 'right', { rank: 100 });\n        if (restorer) {\n            restorer.add(widget, 'jp-property-inspector');\n        }\n        return widget;\n    }\n};\nconst JupyterLogo = {\n    id: '@jupyterlab/application-extension:logo',\n    autoStart: true,\n    requires: [ILabShell],\n    activate: (app, shell) => {\n        const logo = new Widget();\n        jupyterIcon.element({\n            container: logo.node,\n            elementPosition: 'center',\n            margin: '2px 2px 2px 8px',\n            height: 'auto',\n            width: '16px'\n        });\n        logo.id = 'jp-MainLogo';\n        shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    main,\n    layout,\n    router,\n    tree,\n    notfound,\n    busy,\n    sidebar,\n    shell,\n    status,\n    info,\n    paths,\n    propertyInspector,\n    JupyterLogo\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}