{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/dummyconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/handler.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/kernelconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/contextconnector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/connector.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/completer/lib/tokens.js"],"names":["DummyConnector","DataConnector","_","Promise","reject","COMPLETER_ENABLED_CLASS","COMPLETER_ACTIVE_CLASS","CompletionHandler","options","this","_editor","_enabled","_pending","_isDisposed","completer","selected","connect","onCompletionSelected","visibilityChanged","onVisibilityChanged","_connector","connector","newValue","editor","isDisposed","model","host","classList","remove","selections","changed","disconnect","onSelectionsChanged","value","onTextChanged","reset","Signal","MessageLoop","Msg","InvokeRequest","msg","type","onInvokeRequest","position","text","lineHeight","charWidth","line","column","val","patch","createPatch","start","end","insert","original","_makeRequest","getCursorPosition","catch","reason","console","warn","subsetMatch","getLine","getSelection","slice","match","add","handleCursorChange","getState","handleTextChange","isHidden","focus","Error","offset","Text","getOffsetAt","pending","state","request","_isICompletionItemsConnector","fetch","then","reply","_validate","_onFetchItemsReply","_onFailure","_onReply","responseType","ICompletionItemsResponseType","cursor","_updateModel","matches","matchSet","Set","forEach","push","types","metadata","_jupyter_types_experimental","typeMap","item","has","setOptions","setCompletionItems","items","Message","KernelConnector","super","_session","session","_a","kernel","contents","code","cursor_pos","response","requestComplete","content","status","cursor_start","cursor_end","ContextConnector","resolve","Private","contextHint","token","getTokenForPosition","completionList","getTokens","filter","t","indexOf","getCompletionTokens","map","Array","from","length","CompletionConnector","_kernel","_context","all","context","mergeReplies","memo","reduce","acc","Object","assign","CompleterModel","_current","_cursor","_completionItems","_options","_original","_query","_subsetMatch","_typeMap","_orderedTypes","_stateChanged","JSONExt","_reset","emit","undefined","current","originalLine","split","currentLine","query","substring","ending","lastIndexOf","_markup","findOrderedCompletionItemTypes","_filter","iter","values","toArray","findOrderedTypes","change","cursorDelta","inputDelta","last","hard","results","index","label","prefix","StringExt","marked","indices","mark","documentation","join","insertText","score","sort","scoreCmp2","x","option","raw","scoreCmp","result","KNOWN_TYPES","KNOWN_MAP","a","b","delta","localeCompare","_b","_c","newTypeSet","includes","newTypes","concat","filtered","keys","key","ITEM_CLASS","ACTIVE_CLASS","USE_CAPTURE","Completer","Widget","node","document","createElement","_activeIndex","_model","_resetFlag","_selected","_visibilityChanged","_renderer","renderer","defaultRenderer","addClass","stateChanged","onModelStateChanged","dispose","event","_evtKeydown","_evtMousedown","_evtScroll","active","querySelector","getAttribute","addEventListener","removeEventListener","isAttached","update","hide","completionItemList","completionItems","_createCompletionItemNode","_createIItemNode","querySelectorAll","docPanel","className","appendChild","_updateDocPanel","_populateSubset","show","_setGeometry","textContent","orderedTypes","ul","createCompletionItemNode","li","createItemNode","direction","boxHeight","getBoundingClientRect","height","itemHeight","pageLength","Math","floor","min","max","ElementExt","contains","target","keyCode","preventDefault","stopPropagation","stopImmediatePropagation","populated","cycle","keyCodeMap","_cycle","nonstandardClick","documentElement","parentElement","requestAnimationFrame","subset","commonSubset","itemValues","getPositionAt","anchor","getCoordinateForPosition","style","window","getComputedStyle","borderLeft","parseInt","borderLeftWidth","paddingLeft","HoverBox","maxHeight","minHeight","horizontal","privilege","setAttribute","activeItem","pre","Renderer","baseNode","_createBaseNode","deprecated","_constructNode","_createMatchNode","icon","matchNode","innerHTML","defaultSanitizer","allowedTags","typesExist","iconNode","element","typeNode","toLowerCase","colorIndex","toString","dummyNode","title","typeExtendedNode","toLocaleLowerCase","dummyTypeExtendedNode","38","40","33","34","len","strlen","i","ch","j","attr","button","altKey","ctrlKey","shiftKey","metaKey","ICompletionManager","Token"],"mappings":"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","file":"1570.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * DummyConnector's fetch method always returns a rejected Promise.\n * This class is only instantiated if both CompletionHandler._connector and\n * CompletionHandler._fetchItems are undefined.\n */\nexport class DummyConnector extends DataConnector {\n    fetch(_) {\n        return Promise.reject('Attempting to fetch with DummyConnector. Please ensure connector responseType is set.');\n    }\n}\n//# sourceMappingURL=dummyconnector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Text } from '@jupyterlab/coreutils';\nimport { Message, MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { DummyConnector } from './dummyconnector';\n/**\n * A class added to editors that can host a completer.\n */\nconst COMPLETER_ENABLED_CLASS = 'jp-mod-completer-enabled';\n/**\n * A class added to editors that have an active completer.\n */\nconst COMPLETER_ACTIVE_CLASS = 'jp-mod-completer-active';\n/**\n * A completion handler for editors.\n */\nexport class CompletionHandler {\n    /**\n     * Construct a new completion handler for a widget.\n     */\n    constructor(options) {\n        this._editor = null;\n        this._enabled = false;\n        this._pending = 0;\n        this._isDisposed = false;\n        this.completer = options.completer;\n        this.completer.selected.connect(this.onCompletionSelected, this);\n        this.completer.visibilityChanged.connect(this.onVisibilityChanged, this);\n        this._connector = options.connector;\n    }\n    /**\n     * The data connector used to populate completion requests.\n     *\n     * #### Notes\n     * The only method of this connector that will ever be called is `fetch`, so\n     * it is acceptable for the other methods to be simple functions that return\n     * rejected promises.\n     */\n    get connector() {\n        if ('responseType' in this._connector) {\n            return new DummyConnector();\n        }\n        return this._connector;\n    }\n    set connector(connector) {\n        this._connector = connector;\n    }\n    /**\n     * The editor used by the completion handler.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(newValue) {\n        if (newValue === this._editor) {\n            return;\n        }\n        let editor = this._editor;\n        // Clean up and disconnect from old editor.\n        if (editor && !editor.isDisposed) {\n            const model = editor.model;\n            editor.host.classList.remove(COMPLETER_ENABLED_CLASS);\n            editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n            model.selections.changed.disconnect(this.onSelectionsChanged, this);\n            model.value.changed.disconnect(this.onTextChanged, this);\n        }\n        // Reset completer state.\n        this.completer.reset();\n        this.completer.editor = newValue;\n        // Update the editor and signal connections.\n        editor = this._editor = newValue;\n        if (editor) {\n            const model = editor.model;\n            this._enabled = false;\n            model.selections.changed.connect(this.onSelectionsChanged, this);\n            model.value.changed.connect(this.onTextChanged, this);\n            // On initial load, manually check the cursor position.\n            this.onSelectionsChanged();\n        }\n    }\n    /**\n     * Get whether the completion handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Invoke the handler and launch a completer.\n     */\n    invoke() {\n        MessageLoop.sendMessage(this, CompletionHandler.Msg.InvokeRequest);\n    }\n    /**\n     * Process a message sent to the completion handler.\n     */\n    processMessage(msg) {\n        switch (msg.type) {\n            case CompletionHandler.Msg.InvokeRequest.type:\n                this.onInvokeRequest(msg);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Get the state of the text editor at the given position.\n     */\n    getState(editor, position) {\n        return {\n            text: editor.model.value.text,\n            lineHeight: editor.lineHeight,\n            charWidth: editor.charWidth,\n            line: position.line,\n            column: position.column\n        };\n    }\n    /**\n     * Handle a completion selected signal from the completion widget.\n     */\n    onCompletionSelected(completer, val) {\n        const model = completer.model;\n        const editor = this._editor;\n        if (!editor || !model) {\n            return;\n        }\n        const patch = model.createPatch(val);\n        if (!patch) {\n            return;\n        }\n        const { start, end, value } = patch;\n        editor.model.value.remove(start, end);\n        editor.model.value.insert(start, value);\n    }\n    /**\n     * Handle `invoke-request` messages.\n     */\n    onInvokeRequest(msg) {\n        // If there is no completer model, bail.\n        if (!this.completer.model) {\n            return;\n        }\n        // If a completer session is already active, bail.\n        if (this.completer.model.original) {\n            return;\n        }\n        const editor = this._editor;\n        if (editor) {\n            this._makeRequest(editor.getCursorPosition()).catch(reason => {\n                console.warn('Invoke request bailed', reason);\n            });\n        }\n    }\n    /**\n     * Handle selection changed signal from an editor.\n     *\n     * #### Notes\n     * If a sub-class reimplements this method, then that class must either call\n     * its super method or it must take responsibility for adding and removing\n     * the completer completable class to the editor host node.\n     *\n     * Despite the fact that the editor widget adds a class whenever there is a\n     * primary selection, this method checks independently for two reasons:\n     *\n     * 1. The editor widget connects to the same signal to add that class, so\n     *    there is no guarantee that the class will be added before this method\n     *    is invoked so simply checking for the CSS class's existence is not an\n     *    option. Secondarily, checking the editor state should be faster than\n     *    querying the DOM in either case.\n     * 2. Because this method adds a class that indicates whether completer\n     *    functionality ought to be enabled, relying on the behavior of the\n     *    `jp-mod-has-primary-selection` to filter out any editors that have\n     *    a selection means the semantic meaning of `jp-mod-completer-enabled`\n     *    is obscured because there may be cases where the enabled class is added\n     *    even though the completer is not available.\n     */\n    onSelectionsChanged() {\n        const model = this.completer.model;\n        const editor = this._editor;\n        if (!editor) {\n            return;\n        }\n        const host = editor.host;\n        // If there is no model, return.\n        if (!model) {\n            this._enabled = false;\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // If we are currently performing a subset match,\n        // return without resetting the completer.\n        if (model.subsetMatch) {\n            return;\n        }\n        const position = editor.getCursorPosition();\n        const line = editor.getLine(position.line);\n        if (!line) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        const { start, end } = editor.getSelection();\n        // If there is a text selection, return.\n        if (start.column !== end.column || start.line !== end.line) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // If the part of the line before the cursor is white space, return.\n        if (line.slice(0, position.column).match(/^\\s*$/)) {\n            this._enabled = false;\n            model.reset(true);\n            host.classList.remove(COMPLETER_ENABLED_CLASS);\n            return;\n        }\n        // Enable completion.\n        if (!this._enabled) {\n            this._enabled = true;\n            host.classList.add(COMPLETER_ENABLED_CLASS);\n        }\n        // Dispatch the cursor change.\n        model.handleCursorChange(this.getState(editor, editor.getCursorPosition()));\n    }\n    /**\n     * Handle a text changed signal from an editor.\n     */\n    onTextChanged() {\n        const model = this.completer.model;\n        if (!model || !this._enabled) {\n            return;\n        }\n        // If there is a text selection, no completion is allowed.\n        const editor = this.editor;\n        if (!editor) {\n            return;\n        }\n        const { start, end } = editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            return;\n        }\n        // Dispatch the text change.\n        model.handleTextChange(this.getState(editor, editor.getCursorPosition()));\n    }\n    /**\n     * Handle a visibility change signal from a completer widget.\n     */\n    onVisibilityChanged(completer) {\n        // Completer is not active.\n        if (completer.isDisposed || completer.isHidden) {\n            if (this._editor) {\n                this._editor.host.classList.remove(COMPLETER_ACTIVE_CLASS);\n                this._editor.focus();\n            }\n            return;\n        }\n        // Completer is active.\n        if (this._editor) {\n            this._editor.host.classList.add(COMPLETER_ACTIVE_CLASS);\n        }\n    }\n    /**\n     * Make a completion request.\n     */\n    _makeRequest(position) {\n        const editor = this.editor;\n        if (!editor) {\n            return Promise.reject(new Error('No active editor'));\n        }\n        const text = editor.model.value.text;\n        const offset = Text.jsIndexToCharIndex(editor.getOffsetAt(position), text);\n        const pending = ++this._pending;\n        const state = this.getState(editor, position);\n        const request = { text, offset };\n        if (this._isICompletionItemsConnector(this._connector)) {\n            return this._connector\n                .fetch(request)\n                .then(reply => {\n                this._validate(pending, request);\n                if (!reply) {\n                    throw new Error(`Invalid request: ${request}`);\n                }\n                this._onFetchItemsReply(state, reply);\n            })\n                .catch(_ => {\n                this._onFailure();\n            });\n        }\n        return this._connector\n            .fetch(request)\n            .then(reply => {\n            this._validate(pending, request);\n            if (!reply) {\n                throw new Error(`Invalid request: ${request}`);\n            }\n            this._onReply(state, reply);\n        })\n            .catch(_ => {\n            this._onFailure();\n        });\n    }\n    _isICompletionItemsConnector(connector) {\n        return (connector\n            .responseType === CompletionHandler.ICompletionItemsResponseType);\n    }\n    _validate(pending, request) {\n        if (this.isDisposed) {\n            throw new Error('Handler is disposed');\n        }\n        // If a newer completion request has created a pending request, bail.\n        if (pending !== this._pending) {\n            throw new Error('A newer completion request is pending');\n        }\n    }\n    /**\n     * Updates model with text state and current cursor position.\n     */\n    _updateModel(state, start, end) {\n        const model = this.completer.model;\n        const text = state.text;\n        if (!model) {\n            return null;\n        }\n        // Update the original request.\n        model.original = state;\n        // Update the cursor.\n        model.cursor = {\n            start: Text.charIndexToJsIndex(start, text),\n            end: Text.charIndexToJsIndex(end, text)\n        };\n        return model;\n    }\n    /**\n     * Receive a completion reply from the connector.\n     *\n     * @param state - The state of the editor when completion request was made.\n     *\n     * @param reply - The API response returned for a completion request.\n     */\n    _onReply(state, reply) {\n        const model = this._updateModel(state, reply.start, reply.end);\n        if (!model) {\n            return;\n        }\n        // Dedupe the matches.\n        const matches = [];\n        const matchSet = new Set(reply.matches || []);\n        if (reply.matches) {\n            matchSet.forEach(match => {\n                matches.push(match);\n            });\n        }\n        // Extract the optional type map. The current implementation uses\n        // _jupyter_types_experimental which provide string type names. We make no\n        // assumptions about the names of the types, so other kernels can provide\n        // their own types.\n        // Even though the `metadata` field is required, it has historically not\n        // been used. Defensively check if it exists.\n        const metadata = reply.metadata || {};\n        const types = metadata._jupyter_types_experimental;\n        const typeMap = {};\n        if (types) {\n            types.forEach((item) => {\n                // For some reason the _jupyter_types_experimental list has two entries\n                // for each match, with one having a type of \"<unknown>\". Discard those\n                // and use undefined to indicate an unknown type.\n                const text = item.text;\n                const type = item.type;\n                if (matchSet.has(text) && type !== '<unknown>') {\n                    typeMap[text] = type;\n                }\n            });\n        }\n        // Update the options, including the type map.\n        model.setOptions(matches, typeMap);\n    }\n    /**\n     * Receive completion items from provider.\n     *\n     * @param state - The state of the editor when completion request was made.\n     *\n     * @param reply - The API response returned for a completion request.\n     */\n    _onFetchItemsReply(state, reply) {\n        const model = this._updateModel(state, reply.start, reply.end);\n        if (!model) {\n            return;\n        }\n        if (model.setCompletionItems) {\n            model.setCompletionItems(reply.items);\n        }\n    }\n    /**\n     * If completion request fails, reset model and fail silently.\n     */\n    _onFailure() {\n        const model = this.completer.model;\n        if (model) {\n            model.reset(true);\n        }\n    }\n}\n/**\n * A namespace for cell completion handler statics.\n */\n(function (CompletionHandler) {\n    CompletionHandler.ICompletionItemsResponseType = 'ICompletionItemsReply';\n    /**\n     * A namespace for completion handler messages.\n     */\n    let Msg;\n    (function (Msg) {\n        /* tslint:disable */\n        /**\n         * A singleton `'invoke-request'` message.\n         */\n        Msg.InvokeRequest = new Message('invoke-request');\n        /* tslint:enable */\n    })(Msg = CompletionHandler.Msg || (CompletionHandler.Msg = {}));\n})(CompletionHandler || (CompletionHandler = {}));\n//# sourceMappingURL=handler.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * A kernel connector for completion handlers.\n */\nexport class KernelConnector extends DataConnector {\n    /**\n     * Create a new kernel connector for completion requests.\n     *\n     * @param options - The instantiation options for the kernel connector.\n     */\n    constructor(options) {\n        super();\n        this._session = options.session;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    async fetch(request) {\n        var _a;\n        const kernel = (_a = this._session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('No kernel for completion request.');\n        }\n        const contents = {\n            code: request.text,\n            cursor_pos: request.offset\n        };\n        const msg = await kernel.requestComplete(contents);\n        const response = msg.content;\n        if (response.status !== 'ok') {\n            throw new Error('Completion fetch failed to return successfully.');\n        }\n        return {\n            start: response.cursor_start,\n            end: response.cursor_end,\n            matches: response.matches,\n            metadata: response.metadata\n        };\n    }\n}\n//# sourceMappingURL=kernelconnector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\n/**\n * A context connector for completion handlers.\n */\nexport class ContextConnector extends DataConnector {\n    /**\n     * Create a new context connector for completion requests.\n     *\n     * @param options - The instatiation options for the context connector.\n     */\n    constructor(options) {\n        super();\n        this._editor = options.editor;\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    fetch(request) {\n        if (!this._editor) {\n            return Promise.reject('No editor');\n        }\n        return new Promise(resolve => {\n            resolve(Private.contextHint(this._editor));\n        });\n    }\n}\n/**\n * A namespace for Private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get a list of completion hints from a tokenization\n     * of the editor.\n     */\n    function contextHint(editor) {\n        // Find the token at the cursor\n        const cursor = editor.getCursorPosition();\n        const token = editor.getTokenForPosition(cursor);\n        // Get the list of matching tokens.\n        const tokenList = getCompletionTokens(token, editor);\n        // Only choose the ones that have a non-empty type\n        // field, which are likely to be of interest.\n        const completionList = tokenList.filter(t => t.type).map(t => t.value);\n        // Remove duplicate completsions from the list\n        const matches = Array.from(new Set(completionList));\n        return {\n            start: token.offset,\n            end: token.offset + token.value.length,\n            matches,\n            metadata: {}\n        };\n    }\n    Private.contextHint = contextHint;\n    /**\n     * Get a list of tokens that match the completion request,\n     * but are not identical to the completion request.\n     */\n    function getCompletionTokens(token, editor) {\n        const candidates = editor.getTokens();\n        // Only get the tokens that have a common start, but\n        // are not identical.\n        return candidates.filter(t => t.value.indexOf(token.value) === 0 && t.value !== token.value);\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=contextconnector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DataConnector } from '@jupyterlab/statedb';\nimport { KernelConnector } from './kernelconnector';\nimport { ContextConnector } from './contextconnector';\n/**\n * A context+kernel connector for completion handlers.\n */\nexport class CompletionConnector extends DataConnector {\n    /**\n     * Create a new connector for completion requests.\n     *\n     * @param options - The instatiation options for the connector.\n     */\n    constructor(options) {\n        super();\n        this._kernel = new KernelConnector(options);\n        this._context = new ContextConnector(options);\n    }\n    /**\n     * Fetch completion requests.\n     *\n     * @param request - The completion request text and details.\n     */\n    fetch(request) {\n        return Promise.all([\n            this._kernel.fetch(request),\n            this._context.fetch(request)\n        ]).then(([kernel, context]) => Private.mergeReplies(kernel, context));\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Merge results from kernel and context completions.\n     *\n     * @param kernel - The kernel reply being merged.\n     *\n     * @param context - The context reply being merged.\n     *\n     * @returns A reply with a superset of kernel and context matches.\n     *\n     * #### Notes\n     * The kernel and context matches are merged with a preference for kernel\n     * results. Both lists are known to contain unique, non-repeating items;\n     * so this function returns a non-repeating superset by filtering out\n     * duplicates from the context list that appear in the kernel list.\n     */\n    function mergeReplies(kernel, context) {\n        // If one is empty, return the other.\n        if (kernel.matches.length === 0) {\n            return context;\n        }\n        else if (context.matches.length === 0) {\n            return kernel;\n        }\n        // Populate the result with a copy of the kernel matches.\n        const matches = kernel.matches.slice();\n        // Cache all the kernel matches in a memo.\n        const memo = matches.reduce((acc, val) => {\n            acc[val] = null;\n            return acc;\n        }, {});\n        // Add each context match that is not in the memo to the result.\n        context.matches.forEach(match => {\n            if (!(match in memo)) {\n                matches.push(match);\n            }\n        });\n        return Object.assign(Object.assign({}, kernel), { matches });\n    }\n    Private.mergeReplies = mergeReplies;\n})(Private || (Private = {}));\n//# sourceMappingURL=connector.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { iter, map, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { StringExt } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * An implementation of a completer model.\n */\nexport class CompleterModel {\n    constructor() {\n        this._current = null;\n        this._cursor = null;\n        this._isDisposed = false;\n        this._completionItems = [];\n        this._options = [];\n        this._original = null;\n        this._query = '';\n        this._subsetMatch = false;\n        this._typeMap = {};\n        this._orderedTypes = [];\n        this._stateChanged = new Signal(this);\n    }\n    /**\n     * A signal emitted when state of the completer menu changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * The original completion request details.\n     */\n    get original() {\n        return this._original;\n    }\n    set original(newValue) {\n        const unchanged = this._original === newValue ||\n            (this._original &&\n                newValue &&\n                JSONExt.deepEqual(newValue, this._original));\n        if (unchanged) {\n            return;\n        }\n        this._reset();\n        // Set both the current and original to the same value when original is set.\n        this._current = this._original = newValue;\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The current text change details.\n     */\n    get current() {\n        return this._current;\n    }\n    set current(newValue) {\n        const unchanged = this._current === newValue ||\n            (this._current && newValue && JSONExt.deepEqual(newValue, this._current));\n        if (unchanged) {\n            return;\n        }\n        const original = this._original;\n        // Original request must always be set before a text change. If it isn't\n        // the model fails silently.\n        if (!original) {\n            return;\n        }\n        const cursor = this._cursor;\n        // Cursor must always be set before a text change. This happens\n        // automatically in the completer handler, but since `current` is a public\n        // attribute, this defensive check is necessary.\n        if (!cursor) {\n            return;\n        }\n        const current = (this._current = newValue);\n        if (!current) {\n            this._stateChanged.emit(undefined);\n            return;\n        }\n        const originalLine = original.text.split('\\n')[original.line];\n        const currentLine = current.text.split('\\n')[current.line];\n        // If the text change means that the original start point has been preceded,\n        // then the completion is no longer valid and should be reset.\n        if (!this._subsetMatch && currentLine.length < originalLine.length) {\n            this.reset(true);\n            return;\n        }\n        const { start, end } = cursor;\n        // Clip the front of the current line.\n        let query = current.text.substring(start);\n        // Clip the back of the current line by calculating the end of the original.\n        const ending = original.text.substring(end);\n        query = query.substring(0, query.lastIndexOf(ending));\n        this._query = query;\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The cursor details that the API has used to return matching options.\n     */\n    get cursor() {\n        return this._cursor;\n    }\n    set cursor(newValue) {\n        // Original request must always be set before a cursor change. If it isn't\n        // the model fails silently.\n        if (!this.original) {\n            return;\n        }\n        this._cursor = newValue;\n    }\n    /**\n     * The query against which items are filtered.\n     */\n    get query() {\n        return this._query;\n    }\n    set query(newValue) {\n        this._query = newValue;\n    }\n    /**\n     * A flag that is true when the model value was modified by a subset match.\n     */\n    get subsetMatch() {\n        return this._subsetMatch;\n    }\n    set subsetMatch(newValue) {\n        this._subsetMatch = newValue;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * The list of visible items in the completer menu.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    completionItems() {\n        let query = this._query;\n        if (query) {\n            return this._markup(query);\n        }\n        return this._completionItems;\n    }\n    /**\n     * Set the list of visible items in the completer menu, and append any\n     * new types to KNOWN_TYPES.\n     */\n    setCompletionItems(newValue) {\n        if (JSONExt.deepEqual(newValue, this._completionItems)) {\n            return;\n        }\n        this._completionItems = newValue;\n        this._orderedTypes = Private.findOrderedCompletionItemTypes(this._completionItems);\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * The list of visible items in the completer menu.\n     *\n     * #### Notes\n     * This is a read-only property.\n     */\n    items() {\n        return this._filter();\n    }\n    /**\n     * The unfiltered list of all available options in a completer menu.\n     */\n    options() {\n        return iter(this._options);\n    }\n    /**\n     * The map from identifiers (a.b) to types (function, module, class, instance,\n     * etc.).\n     *\n     * #### Notes\n     * A type map is currently only provided by the latest IPython kernel using\n     * the completer reply metadata field `_jupyter_types_experimental`. The\n     * values are completely up to the kernel.\n     *\n     */\n    typeMap() {\n        return this._typeMap;\n    }\n    /**\n     * An ordered list of all the known types in the typeMap.\n     *\n     * #### Notes\n     * To visually encode the types of the completer matches, we assemble an\n     * ordered list. This list begins with:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * and then has any remaining types listed alphebetically. This will give\n     * reliable visual encoding for these known types, but allow kernels to\n     * provide new types.\n     */\n    orderedTypes() {\n        return this._orderedTypes;\n    }\n    /**\n     * Set the available options in the completer menu.\n     */\n    setOptions(newValue, typeMap) {\n        const values = toArray(newValue || []);\n        const types = typeMap || {};\n        if (JSONExt.deepEqual(values, this._options) &&\n            JSONExt.deepEqual(types, this._typeMap)) {\n            return;\n        }\n        if (values.length) {\n            this._options = values;\n            this._typeMap = types;\n            this._orderedTypes = Private.findOrderedTypes(types);\n        }\n        else {\n            this._options = [];\n            this._typeMap = {};\n            this._orderedTypes = [];\n        }\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * Handle a cursor change.\n     */\n    handleCursorChange(change) {\n        // If there is no active completion, return.\n        if (!this._original) {\n            return;\n        }\n        const { column, line } = change;\n        const { current, original } = this;\n        if (!original) {\n            return;\n        }\n        // If a cursor change results in a the cursor being on a different line\n        // than the original request, cancel.\n        if (line !== original.line) {\n            this.reset(true);\n            return;\n        }\n        // If a cursor change results in the cursor being set to a position that\n        // precedes the original column, cancel.\n        if (column < original.column) {\n            this.reset(true);\n            return;\n        }\n        const { cursor } = this;\n        if (!cursor || !current) {\n            return;\n        }\n        // If a cursor change results in the cursor being set to a position beyond\n        // the end of the area that would be affected by completion, cancel.\n        const cursorDelta = cursor.end - cursor.start;\n        const originalLine = original.text.split('\\n')[original.line];\n        const currentLine = current.text.split('\\n')[current.line];\n        const inputDelta = currentLine.length - originalLine.length;\n        if (column > original.column + cursorDelta + inputDelta) {\n            this.reset(true);\n            return;\n        }\n    }\n    /**\n     * Handle a text change.\n     */\n    handleTextChange(change) {\n        const original = this._original;\n        // If there is no active completion, return.\n        if (!original) {\n            return;\n        }\n        const { text, column, line } = change;\n        const last = text.split('\\n')[line][column - 1];\n        // If last character entered is not whitespace or if the change column is\n        // greater than or equal to the original column, update completion.\n        if ((last && last.match(/\\S/)) || change.column >= original.column) {\n            this.current = change;\n            return;\n        }\n        // If final character is whitespace, reset completion.\n        this.reset(false);\n    }\n    /**\n     * Create a resolved patch between the original state and a patch string.\n     *\n     * @param patch - The patch string to apply to the original value.\n     *\n     * @returns A patched text change or undefined if original value did not exist.\n     */\n    createPatch(patch) {\n        const original = this._original;\n        const cursor = this._cursor;\n        const current = this._current;\n        if (!original || !cursor || !current) {\n            return undefined;\n        }\n        let { start, end } = cursor;\n        // Also include any filtering/additional-typing that has occurred\n        // since the completion request in the patched length.\n        end = end + (current.text.length - original.text.length);\n        return { start, end, value: patch };\n    }\n    /**\n     * Reset the state of the model and emit a state change signal.\n     *\n     * @param hard - Reset even if a subset match is in progress.\n     */\n    reset(hard = false) {\n        // When the completer detects a common subset prefix for all options,\n        // it updates the model and sets the model source to that value, triggering\n        // a reset. Unless explicitly a hard reset, this should be ignored.\n        if (!hard && this._subsetMatch) {\n            return;\n        }\n        this._reset();\n        this._stateChanged.emit(undefined);\n    }\n    /**\n     * Check if CompletionItem matches against query.\n     * Highlight matching prefix by adding <mark> tags.\n     */\n    _markup(query) {\n        const items = this._completionItems;\n        let results = [];\n        for (let item of items) {\n            // See if label matches query string\n            // With ICompletionItems, the label may include parameters, so we exclude them from the matcher.\n            // e.g. Given label `foo(b, a, r)` and query `bar`,\n            // don't count parameters, `b`, `a`, and `r` as matches.\n            const index = item.label.indexOf('(');\n            const prefix = index > -1 ? item.label.substring(0, index) : item.label;\n            let match = StringExt.matchSumOfSquares(prefix, query);\n            // Filter non-matching items.\n            if (match) {\n                // Highlight label text if there's a match\n                let marked = StringExt.highlight(item.label, match.indices, Private.mark);\n                results.push(Object.assign(Object.assign({}, item), { \n                    // Allow for lazily retrieved documentation (with a getter)\n                    documentation: item.documentation, label: marked.join(''), \n                    // If no insertText is present, preserve original label value\n                    // by setting it as the insertText.\n                    insertText: item.insertText ? item.insertText : item.label, score: match.score }));\n            }\n        }\n        results.sort(Private.scoreCmp2);\n        // Delete the extra score attribute to not leak implementation details\n        // to JavaScript callers.\n        results.forEach(x => {\n            delete x.score;\n        });\n        return results;\n    }\n    /**\n     * Apply the query to the complete options list to return the matching subset.\n     */\n    _filter() {\n        const options = this._options || [];\n        const query = this._query;\n        if (!query) {\n            return map(options, option => ({ raw: option, text: option }));\n        }\n        const results = [];\n        for (const option of options) {\n            const match = StringExt.matchSumOfSquares(option, query);\n            if (match) {\n                const marked = StringExt.highlight(option, match.indices, Private.mark);\n                results.push({\n                    raw: option,\n                    score: match.score,\n                    text: marked.join('')\n                });\n            }\n        }\n        return map(results.sort(Private.scoreCmp), result => ({\n            text: result.text,\n            raw: result.raw\n        }));\n    }\n    /**\n     * Reset the state of the model.\n     */\n    _reset() {\n        this._current = null;\n        this._cursor = null;\n        this._completionItems = [];\n        this._options = [];\n        this._original = null;\n        this._query = '';\n        this._subsetMatch = false;\n        this._typeMap = {};\n        this._orderedTypes = [];\n    }\n}\n/**\n * A namespace for completer model private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The list of known type annotations of completer matches.\n     */\n    const KNOWN_TYPES = ['function', 'instance', 'class', 'module', 'keyword'];\n    /**\n     * The map of known type annotations of completer matches.\n     */\n    const KNOWN_MAP = KNOWN_TYPES.reduce((acc, type) => {\n        acc[type] = null;\n        return acc;\n    }, {});\n    /**\n     * Mark a highlighted chunk of text.\n     */\n    function mark(value) {\n        return `<mark>${value}</mark>`;\n    }\n    Private.mark = mark;\n    /**\n     * A sort comparison function for item match scores.\n     *\n     * #### Notes\n     * This orders the items first based on score (lower is better), then\n     * by locale order of the item text.\n     */\n    function scoreCmp(a, b) {\n        const delta = a.score - b.score;\n        if (delta !== 0) {\n            return delta;\n        }\n        return a.raw.localeCompare(b.raw);\n    }\n    Private.scoreCmp = scoreCmp;\n    /**\n     * A sort comparison function for item match scores.\n     *\n     * #### Notes\n     * This orders the items first based on score (lower is better), then\n     * by locale order of the item text.\n     */\n    function scoreCmp2(a, b) {\n        var _a, _b, _c;\n        const delta = a.score - b.score;\n        if (delta !== 0) {\n            return delta;\n        }\n        return (_c = (_a = a.insertText) === null || _a === void 0 ? void 0 : _a.localeCompare((_b = b.insertText) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : 0;\n    }\n    Private.scoreCmp2 = scoreCmp2;\n    /**\n     * Compute a reliably ordered list of types for ICompletionItems.\n     *\n     * #### Notes\n     * The resulting list always begins with the known types:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * followed by other types in alphabetical order.\n     *\n     */\n    function findOrderedCompletionItemTypes(items) {\n        const newTypeSet = new Set();\n        items.forEach(item => {\n            if (item.type &&\n                !KNOWN_TYPES.includes(item.type) &&\n                !newTypeSet.has(item.type)) {\n                newTypeSet.add(item.type);\n            }\n        });\n        const newTypes = Array.from(newTypeSet);\n        newTypes.sort((a, b) => a.localeCompare(b));\n        return KNOWN_TYPES.concat(newTypes);\n    }\n    Private.findOrderedCompletionItemTypes = findOrderedCompletionItemTypes;\n    /**\n     * Compute a reliably ordered list of types.\n     *\n     * #### Notes\n     * The resulting list always begins with the known types:\n     * ```\n     * ['function', 'instance', 'class', 'module', 'keyword']\n     * ```\n     * followed by other types in alphabetical order.\n     */\n    function findOrderedTypes(typeMap) {\n        const filtered = Object.keys(typeMap)\n            .map(key => typeMap[key])\n            .filter((value) => !!value && !(value in KNOWN_MAP))\n            .sort((a, b) => a.localeCompare(b));\n        return KNOWN_TYPES.concat(filtered);\n    }\n    Private.findOrderedTypes = findOrderedTypes;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { HoverBox, defaultSanitizer } from '@jupyterlab/apputils';\nimport { toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to completer menu items.\n */\nconst ITEM_CLASS = 'jp-Completer-item';\n/**\n * The class name added to an active completer menu item.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The minimum height of a completer widget.\n */\nconst MIN_HEIGHT = 20;\n/**\n * The maximum height of a completer widget.\n */\nconst MAX_HEIGHT = 300;\n/**\n * A flag to indicate that event handlers are caught in the capture phase.\n */\nconst USE_CAPTURE = true;\n/**\n * The number of colors defined for the completer type annotations.\n * These are listed in completer/style/index.css#102-152.\n */\nconst N_COLORS = 10;\n/**\n * A widget that enables text completion.\n *\n * #### Notes\n * The completer is intended to be absolutely positioned on the\n * page and hover over any other content, so it should be attached directly\n * to `document.body`, or a node that is the full size of `document.body`.\n * Attaching it to other nodes may incorrectly locate the completer.\n */\nexport class Completer extends Widget {\n    /**\n     * Construct a text completer menu widget.\n     */\n    constructor(options) {\n        super({ node: document.createElement('div') });\n        this._activeIndex = 0;\n        this._editor = null;\n        this._model = null;\n        this._resetFlag = false;\n        this._selected = new Signal(this);\n        this._visibilityChanged = new Signal(this);\n        this._renderer = options.renderer || Completer.defaultRenderer;\n        this.model = options.model || null;\n        this.editor = options.editor || null;\n        this.addClass('jp-Completer');\n    }\n    /**\n     * The editor used by the completion widget.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(newValue) {\n        this._editor = newValue;\n    }\n    /**\n     * A signal emitted when a selection is made from the completer menu.\n     */\n    get selected() {\n        return this._selected;\n    }\n    /**\n     * A signal emitted when the completer widget's visibility changes.\n     *\n     * #### Notes\n     * This signal is useful when there are multiple floating widgets that may\n     * contend with the same space and ought to be mutually exclusive.\n     */\n    get visibilityChanged() {\n        return this._visibilityChanged;\n    }\n    /**\n     * The model used by the completer widget.\n     */\n    get model() {\n        return this._model;\n    }\n    set model(model) {\n        if ((!model && !this._model) || model === this._model) {\n            return;\n        }\n        if (this._model) {\n            this._model.stateChanged.disconnect(this.onModelStateChanged, this);\n        }\n        this._model = model;\n        if (this._model) {\n            this._model.stateChanged.connect(this.onModelStateChanged, this);\n        }\n    }\n    /**\n     * Dispose of the resources held by the completer widget.\n     */\n    dispose() {\n        this._model = null;\n        super.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Reset the widget.\n     */\n    reset() {\n        this._activeIndex = 0;\n        if (this._model) {\n            this._model.reset(true);\n        }\n    }\n    /**\n     * Emit the selected signal for the current active item and reset.\n     */\n    selectActive() {\n        const active = this.node.querySelector(`.${ACTIVE_CLASS}`);\n        if (!active) {\n            this.reset();\n            return;\n        }\n        this._selected.emit(active.getAttribute('data-value'));\n        this.reset();\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        document.addEventListener('keydown', this, USE_CAPTURE);\n        document.addEventListener('mousedown', this, USE_CAPTURE);\n        document.addEventListener('scroll', this, USE_CAPTURE);\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        document.removeEventListener('keydown', this, USE_CAPTURE);\n        document.removeEventListener('mousedown', this, USE_CAPTURE);\n        document.removeEventListener('scroll', this, USE_CAPTURE);\n    }\n    /**\n     * Handle model state changes.\n     */\n    onModelStateChanged() {\n        if (this.isAttached) {\n            this._activeIndex = 0;\n            this.update();\n        }\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        const model = this._model;\n        if (!model) {\n            return;\n        }\n        if (this._resetFlag) {\n            this._resetFlag = false;\n            if (!this.isHidden) {\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return;\n        }\n        let node = null;\n        let completionItemList = model.completionItems && model.completionItems();\n        if (completionItemList && completionItemList.length) {\n            node = this._createCompletionItemNode(model, completionItemList);\n        }\n        else {\n            node = this._createIItemNode(model);\n        }\n        if (!node) {\n            return;\n        }\n        let active = node.querySelectorAll(`.${ITEM_CLASS}`)[this._activeIndex];\n        active.classList.add(ACTIVE_CLASS);\n        // Add the documentation panel\n        let docPanel = document.createElement('div');\n        docPanel.className = 'jp-Completer-docpanel';\n        node.appendChild(docPanel);\n        this._updateDocPanel();\n        // If this is the first time the current completer session has loaded,\n        // populate any initial subset match.\n        if (!model.query) {\n            const populated = this._populateSubset();\n            if (populated) {\n                this.update();\n                return;\n            }\n        }\n        if (this.isHidden) {\n            this.show();\n            this._setGeometry();\n            this._visibilityChanged.emit(undefined);\n        }\n        else {\n            this._setGeometry();\n        }\n    }\n    _createCompletionItemNode(model, items) {\n        // If there are no items, reset and bail.\n        if (!items.length) {\n            this._resetFlag = true;\n            this.reset();\n            if (!this.isHidden) {\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return null;\n        }\n        // Clear the node.\n        let node = this.node;\n        node.textContent = '';\n        // Compute an ordered list of all the types in the typeMap, this is computed\n        // once by the model each time new data arrives for efficiency.\n        let orderedTypes = model.orderedTypes();\n        // Populate the completer items.\n        let ul = document.createElement('ul');\n        ul.className = 'jp-Completer-list';\n        for (let item of items) {\n            if (!this._renderer.createCompletionItemNode) {\n                return null;\n            }\n            let li = this._renderer.createCompletionItemNode(item, orderedTypes);\n            ul.appendChild(li);\n        }\n        node.appendChild(ul);\n        return node;\n    }\n    _createIItemNode(model) {\n        const items = toArray(model.items());\n        // If there are no items, reset and bail.\n        if (!items || !items.length) {\n            this._resetFlag = true;\n            this.reset();\n            if (!this.isHidden) {\n                this.hide();\n                this._visibilityChanged.emit(undefined);\n            }\n            return null;\n        }\n        // If there is only one option, signal and bail.\n        // We don't test the filtered `items`, as that\n        // is too aggressive of completer behavior, it can\n        // lead to double typing of an option.\n        const options = toArray(model.options());\n        if (options.length === 1) {\n            this._selected.emit(options[0]);\n            this.reset();\n            return null;\n        }\n        // Clear the node.\n        const node = this.node;\n        node.textContent = '';\n        // Compute an ordered list of all the types in the typeMap, this is computed\n        // once by the model each time new data arrives for efficiency.\n        const orderedTypes = model.orderedTypes();\n        // Populate the completer items.\n        let ul = document.createElement('ul');\n        ul.className = 'jp-Completer-list';\n        for (const item of items) {\n            const li = this._renderer.createItemNode(item, model.typeMap(), orderedTypes);\n            ul.appendChild(li);\n        }\n        node.appendChild(ul);\n        return node;\n    }\n    /**\n     * Cycle through the available completer items.\n     *\n     * #### Notes\n     * When the user cycles all the way `down` to the last index, subsequent\n     * `down` cycles will remain on the last index. When the user cycles `up` to\n     * the first item, subsequent `up` cycles will remain on the first cycle.\n     */\n    _cycle(direction) {\n        const items = this.node.querySelectorAll(`.${ITEM_CLASS}`);\n        const index = this._activeIndex;\n        let active = this.node.querySelector(`.${ACTIVE_CLASS}`);\n        active.classList.remove(ACTIVE_CLASS);\n        if (direction === 'up') {\n            this._activeIndex = index === 0 ? index : index - 1;\n        }\n        else if (direction === 'down') {\n            this._activeIndex = index < items.length - 1 ? index + 1 : index;\n        }\n        else {\n            // Measure the number of items on a page.\n            const boxHeight = this.node.getBoundingClientRect().height;\n            const itemHeight = active.getBoundingClientRect().height;\n            const pageLength = Math.floor(boxHeight / itemHeight);\n            // Update the index\n            if (direction === 'pageUp') {\n                this._activeIndex = index - pageLength;\n            }\n            else {\n                this._activeIndex = index + pageLength;\n            }\n            // Clamp to the length of the list.\n            this._activeIndex = Math.min(Math.max(0, this._activeIndex), items.length - 1);\n        }\n        active = items[this._activeIndex];\n        active.classList.add(ACTIVE_CLASS);\n        let completionList = this.node.querySelector('.jp-Completer-list');\n        ElementExt.scrollIntoViewIfNeeded(completionList, active);\n        this._updateDocPanel();\n    }\n    /**\n     * Handle keydown events for the widget.\n     */\n    _evtKeydown(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        if (!this._editor.host.contains(event.target)) {\n            this.reset();\n            return;\n        }\n        switch (event.keyCode) {\n            case 9: {\n                // Tab key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                const model = this._model;\n                if (!model) {\n                    return;\n                }\n                // Autoinsert single completions on manual request (tab)\n                const items = model.completionItems && model.completionItems();\n                if (items && items.length === 1) {\n                    this._selected.emit(items[0].insertText || items[0].label);\n                    this.reset();\n                    return;\n                }\n                const populated = this._populateSubset();\n                // If there is a common subset in the options,\n                // then emit a completion signal with that subset.\n                if (model.query) {\n                    model.subsetMatch = true;\n                    this._selected.emit(model.query);\n                    model.subsetMatch = false;\n                }\n                // If the query changed, update rendering of the options.\n                if (populated) {\n                    this.update();\n                }\n                return;\n            }\n            case 27: // Esc key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                this.reset();\n                return;\n            case 33: // PageUp\n            case 34: // PageDown\n            case 38: // Up arrow key\n            case 40: {\n                // Down arrow key\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                const cycle = Private.keyCodeMap[event.keyCode];\n                this._cycle(cycle);\n                return;\n            }\n            default:\n                return;\n        }\n    }\n    /**\n     * Handle mousedown events for the widget.\n     */\n    _evtMousedown(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        if (Private.nonstandardClick(event)) {\n            this.reset();\n            return;\n        }\n        let target = event.target;\n        while (target !== document.documentElement) {\n            // If the user has made a selection, emit its value and reset the widget.\n            if (target.classList.contains(ITEM_CLASS)) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                this._selected.emit(target.getAttribute('data-value'));\n                this.reset();\n                return;\n            }\n            // If the mouse event happened anywhere else in the widget, bail.\n            if (target === this.node) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n                return;\n            }\n            target = target.parentElement;\n        }\n        this.reset();\n    }\n    /**\n     * Handle scroll events for the widget\n     */\n    _evtScroll(event) {\n        if (this.isHidden || !this._editor) {\n            return;\n        }\n        const { node } = this;\n        // All scrolls except scrolls in the actual hover box node may cause the\n        // referent editor that anchors the node to move, so the only scroll events\n        // that can safely be ignored are ones that happen inside the hovering node.\n        if (node.contains(event.target)) {\n            return;\n        }\n        // Set the geometry of the node asynchronously.\n        requestAnimationFrame(() => {\n            this._setGeometry();\n        });\n    }\n    /**\n     * Populate the completer up to the longest initial subset of items.\n     *\n     * @returns `true` if a subset match was found and populated.\n     */\n    _populateSubset() {\n        const { model } = this;\n        if (!model) {\n            return false;\n        }\n        const items = this.node.querySelectorAll(`.${ITEM_CLASS}`);\n        const subset = Private.commonSubset(Private.itemValues(items));\n        const { query } = model;\n        // If a common subset exists and it is not the current query, highlight it.\n        if (subset && subset !== query && subset.indexOf(query) === 0) {\n            model.query = subset;\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Set the visible dimensions of the widget.\n     */\n    _setGeometry() {\n        const { node } = this;\n        const model = this._model;\n        const editor = this._editor;\n        // This is an overly defensive test: `cursor` will always exist if\n        // `original` exists, except in contrived tests. But since it is possible\n        // to generate a runtime error, the check occurs here.\n        if (!editor || !model || !model.original || !model.cursor) {\n            return;\n        }\n        const start = model.cursor.start;\n        const position = editor.getPositionAt(start);\n        const anchor = editor.getCoordinateForPosition(position);\n        const style = window.getComputedStyle(node);\n        const borderLeft = parseInt(style.borderLeftWidth, 10) || 0;\n        const paddingLeft = parseInt(style.paddingLeft, 10) || 0;\n        // Calculate the geometry of the completer.\n        HoverBox.setGeometry({\n            anchor,\n            host: editor.host,\n            maxHeight: MAX_HEIGHT,\n            minHeight: MIN_HEIGHT,\n            node: node,\n            offset: { horizontal: borderLeft + paddingLeft },\n            privilege: 'below',\n            style: style\n        });\n    }\n    /**\n     * Update the display-state and contents of the documentation panel\n     */\n    _updateDocPanel() {\n        var _a, _b;\n        let docPanel = this.node.querySelector('.jp-Completer-docpanel');\n        if (!docPanel) {\n            return;\n        }\n        if (!((_a = this.model) === null || _a === void 0 ? void 0 : _a.completionItems)) {\n            return;\n        }\n        let items = (_b = this.model) === null || _b === void 0 ? void 0 : _b.completionItems();\n        if (!items) {\n            docPanel.setAttribute('style', 'display:none');\n            return;\n        }\n        let activeItem = items[this._activeIndex];\n        if (!activeItem) {\n            docPanel.setAttribute('style', 'display:none');\n            return;\n        }\n        docPanel.textContent = '';\n        if (activeItem.documentation) {\n            let pre = document.createElement('pre');\n            pre.textContent = activeItem.documentation;\n            docPanel.appendChild(pre);\n            docPanel.setAttribute('style', '');\n        }\n        else {\n            docPanel.setAttribute('style', 'display:none');\n        }\n    }\n}\n(function (Completer) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create an item node from an ICompletionItem for a text completer menu.\n         */\n        createCompletionItemNode(item, orderedTypes) {\n            let baseNode = this._createBaseNode(item.insertText || item.label);\n            if (item.deprecated) {\n                baseNode.classList.add('jp-Completer-deprecated');\n            }\n            return this._constructNode(baseNode, this._createMatchNode(item.label), !!item.type, item.type, orderedTypes, item.icon);\n        }\n        /**\n         * Create an item node for a text completer menu.\n         */\n        createItemNode(item, typeMap, orderedTypes) {\n            return this._constructNode(this._createBaseNode(item.raw), this._createMatchNode(item.text), !JSONExt.deepEqual(typeMap, {}), typeMap[item.raw] || '', orderedTypes);\n        }\n        /**\n         * Create base node with the value to be inserted\n         */\n        _createBaseNode(value) {\n            const li = document.createElement('li');\n            li.className = ITEM_CLASS;\n            // Set the raw, un-marked up value as a data attribute.\n            li.setAttribute('data-value', value);\n            return li;\n        }\n        /**\n         * Create match node to highlight potential prefix match within result.\n         */\n        _createMatchNode(result) {\n            const matchNode = document.createElement('code');\n            matchNode.className = 'jp-Completer-match';\n            // Use innerHTML because search results include <mark> tags.\n            matchNode.innerHTML = defaultSanitizer.sanitize(result, {\n                allowedTags: ['mark']\n            });\n            return matchNode;\n        }\n        /**\n         * Attaches type and match nodes to base node.\n         */\n        _constructNode(li, matchNode, typesExist, type, orderedTypes, icon) {\n            // Add the icon or type monogram\n            if (icon) {\n                const iconNode = icon.element({\n                    className: 'jp-Completer-type jp-Completer-icon'\n                });\n                li.appendChild(iconNode);\n            }\n            else if (typesExist) {\n                const typeNode = document.createElement('span');\n                typeNode.textContent = (type[0] || '').toLowerCase();\n                const colorIndex = (orderedTypes.indexOf(type) % N_COLORS) + 1;\n                typeNode.className = 'jp-Completer-type jp-Completer-monogram';\n                typeNode.setAttribute(`data-color-index`, colorIndex.toString());\n                li.appendChild(typeNode);\n            }\n            else {\n                // Create empty span to ensure consistent list styling.\n                // Otherwise, in a list of two items,\n                // if one item has an icon, but the other has type,\n                // the icon grows out of its bounds.\n                const dummyNode = document.createElement('span');\n                dummyNode.className = 'jp-Completer-monogram';\n                li.appendChild(dummyNode);\n            }\n            li.appendChild(matchNode);\n            // If there is a type, add the type extension and title\n            if (typesExist) {\n                li.title = type;\n                const typeExtendedNode = document.createElement('code');\n                typeExtendedNode.className = 'jp-Completer-typeExtended';\n                typeExtendedNode.textContent = type.toLocaleLowerCase();\n                li.appendChild(typeExtendedNode);\n            }\n            else {\n                // If no type is present on the right,\n                // the highlighting of the completion item\n                // doesn't cover the entire row.\n                const dummyTypeExtendedNode = document.createElement('span');\n                dummyTypeExtendedNode.className = 'jp-Completer-typeExtended';\n                li.appendChild(dummyTypeExtendedNode);\n            }\n            return li;\n        }\n    }\n    Completer.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    Completer.defaultRenderer = new Renderer();\n})(Completer || (Completer = {}));\n/**\n * A namespace for completer widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Mapping from keyCodes to scrollTypes.\n     */\n    Private.keyCodeMap = {\n        38: 'up',\n        40: 'down',\n        33: 'pageUp',\n        34: 'pageDown'\n    };\n    /**\n     * Returns the common subset string that a list of strings shares.\n     */\n    function commonSubset(values) {\n        const len = values.length;\n        let subset = '';\n        if (len < 2) {\n            return subset;\n        }\n        const strlen = values[0].length;\n        for (let i = 0; i < strlen; i++) {\n            const ch = values[0][i];\n            for (let j = 1; j < len; j++) {\n                if (values[j][i] !== ch) {\n                    return subset;\n                }\n            }\n            subset += ch;\n        }\n        return subset;\n    }\n    Private.commonSubset = commonSubset;\n    /**\n     * Returns the list of raw item values currently in the DOM.\n     */\n    function itemValues(items) {\n        const values = [];\n        for (let i = 0, len = items.length; i < len; i++) {\n            const attr = items[i].getAttribute('data-value');\n            if (attr) {\n                values.push(attr);\n            }\n        }\n        return values;\n    }\n    Private.itemValues = itemValues;\n    /**\n     * Returns true for any modified click event (i.e., not a left-click).\n     */\n    function nonstandardClick(event) {\n        return (event.button !== 0 ||\n            event.altKey ||\n            event.ctrlKey ||\n            event.shiftKey ||\n            event.metaKey);\n    }\n    Private.nonstandardClick = nonstandardClick;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The completion manager token.\n */\nexport const ICompletionManager = new Token('@jupyterlab/completer:ICompletionManager');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}