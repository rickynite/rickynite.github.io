{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./build/index.js"],"names":["JupyterLiteServer","Application","options","super","this","name","namespace","version","_serviceManager","id","event","mod","data","default","Object","prototype","hasOwnProperty","call","Array","isArray","forEach","item","registerPlugin","error","console","mods","registerPluginModule","serviceManager","styles","serverExtensions","disabled","JSON","parse","PageConfig","async","createModule","scope","module","window","_JUPYTERLAB","get","e","warn","pluginsToRegister","federatedExtensionPromises","federatedMimeExtensionPromises","federatedStylePromises","extensions","federatedExtensionNames","Set","activePlugins","extension","exports","plugins","plugin","includes","split","add","push","mimeExtension","style","mimeExtensions","has","ext","Promise","allSettled","p","status","value","reason","filter","jupyterLiteServer","registerPluginModules","all","start","lab","JupyterLab","log","restored","main"],"mappings":"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","file":"9018.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Application } from '@lumino/application';\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._serviceManager = null;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n    /**\n     * Register the underlying lite service manager for this app.\n     *\n     * @param serviceManager The Service Manager for the app.\n     */\n    registerServiceManager(serviceManager) {\n        this._serviceManager = serviceManager;\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterLab } from '@jupyterlab/application';\n\nimport { JupyterLiteServer } from '@jupyterlite/server';\n\n// The webpack public path needs to be set before loading the CSS assets.\nimport { PageConfig } from '@jupyterlab/coreutils';\n\nconst styles = import('./style.js');\n\nconst serverExtensions = [\n  import('@jupyterlite/javascript-kernel-extension'),\n  import('@jupyterlite/p5-kernel-extension'),\n  import('@jupyterlite/pyolite-kernel-extension'),\n  import('@jupyterlite/server-extension')\n];\n\n// custom list of disabled plugins\nconst disabled = [\n  ...JSON.parse(PageConfig.getOption('disabledExtensions') || '[]'),\n  '@jupyterlab/apputils-extension:themes',\n  '@jupyterlab/apputils-extension:workspaces',\n  '@jupyterlab/application-extension:tree-resolver',\n  // TODO: improve/replace resolver and main to avoid redirect issues\n  // @see https://github.com/jtpio/jupyterlite/issues/22\n  '@jupyterlab/apputils-extension:resolver',\n  '@jupyterlab/application-extension:main'\n];\n\nasync function createModule(scope, module) {\n  try {\n    const factory = await window._JUPYTERLAB[scope].get(module);\n    return factory();\n  } catch (e) {\n    console.warn(`Failed to create module: package: ${scope}; module: ${module}`);\n    throw e;\n  }\n}\n\n/**\n * The main entry point for the application.\n */\nasync function main() {\n  // Make sure the styles have loaded\n  await styles;\n\n  const pluginsToRegister = [];\n  const federatedExtensionPromises = [];\n  const federatedMimeExtensionPromises = [];\n  const federatedStylePromises = [];\n\n  // This is all the data needed to load and activate plugins. This should be\n  // gathered by the server and put onto the initial page template.\n  const extensions = JSON.parse(\n    PageConfig.getOption('federated_extensions')\n  );\n\n  // The set of federated extension names.\n  const federatedExtensionNames = new Set();\n\n  extensions.forEach(data => {\n    if (data.extension) {\n      federatedExtensionNames.add(data.name);\n      federatedExtensionPromises.push(createModule(data.name, data.extension));\n    }\n    if (data.mimeExtension) {\n      federatedExtensionNames.add(data.name);\n      federatedMimeExtensionPromises.push(createModule(data.name, data.mimeExtension));\n    }\n    if (data.style) {\n      federatedStylePromises.push(createModule(data.name, data.style));\n    }\n  });\n\n  /**\n   * Iterate over active plugins in an extension.\n   */\n  function* activePlugins(extension) {\n    // Handle commonjs or es2015 modules\n    let exports;\n    if (extension.hasOwnProperty('__esModule')) {\n      exports = extension.default;\n    } else {\n      // CommonJS exports.\n      exports = extension;\n    }\n\n    let plugins = Array.isArray(exports) ? exports : [exports];\n    for (let plugin of plugins) {\n      // skip the plugin (or extension) if disabled\n      if (\n        disabled.includes(plugin.id) ||\n        disabled.includes(plugin.id.split(':')[0])\n      ) {\n        continue;\n      }\n      yield plugin;\n    }\n  }\n\n  // Handle the mime extensions.\n  const mimeExtensions = [];\n  if (!federatedExtensionNames.has('@jupyterlite/iframe-extension')) {\n    try {\n      let ext = require('@jupyterlite/iframe-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/json-extension')) {\n    try {\n      let ext = require('@jupyterlab/json-extension');\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated mime extensions.\n  const federatedMimeExtensions = await Promise.allSettled(federatedMimeExtensionPromises);\n  federatedMimeExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        mimeExtensions.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Handled the standard extensions.\n  if (!federatedExtensionNames.has('@jupyterlite/application-extension')) {\n    try {\n      let ext = require('@jupyterlite/application-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlite/theme-extension')) {\n    try {\n      let ext = require('@jupyterlite/theme-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/application-extension')) {\n    try {\n      let ext = require('@jupyterlab/application-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/apputils-extension')) {\n    try {\n      let ext = require('@jupyterlab/apputils-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/celltags-extension')) {\n    try {\n      let ext = require('@jupyterlab/celltags-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/codemirror-extension')) {\n    try {\n      let ext = require('@jupyterlab/codemirror-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/completer-extension')) {\n    try {\n      let ext = require('@jupyterlab/completer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/console-extension')) {\n    try {\n      let ext = require('@jupyterlab/console-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/csvviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/csvviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/docmanager-extension')) {\n    try {\n      let ext = require('@jupyterlab/docmanager-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/filebrowser-extension')) {\n    try {\n      let ext = require('@jupyterlab/filebrowser-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/fileeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/fileeditor-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/help-extension')) {\n    try {\n      let ext = require('@jupyterlab/help-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/imageviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/imageviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/inspector-extension')) {\n    try {\n      let ext = require('@jupyterlab/inspector-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/launcher-extension')) {\n    try {\n      let ext = require('@jupyterlab/launcher-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/mainmenu-extension')) {\n    try {\n      let ext = require('@jupyterlab/mainmenu-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/markdownviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/markdownviewer-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/mathjax2-extension')) {\n    try {\n      let ext = require('@jupyterlab/mathjax2-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/notebook-extension')) {\n    try {\n      let ext = require('@jupyterlab/notebook-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/rendermime-extension')) {\n    try {\n      let ext = require('@jupyterlab/rendermime-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/running-extension')) {\n    try {\n      let ext = require('@jupyterlab/running-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/settingeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/settingeditor-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/shortcuts-extension')) {\n    try {\n      let ext = require('@jupyterlab/shortcuts-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/statusbar-extension')) {\n    try {\n      let ext = require('@jupyterlab/statusbar-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/theme-dark-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-dark-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/theme-light-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-light-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/toc-extension')) {\n    try {\n      let ext = require('@jupyterlab/toc-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/tooltip-extension')) {\n    try {\n      let ext = require('@jupyterlab/tooltip-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!federatedExtensionNames.has('@jupyterlab/ui-components-extension')) {\n    try {\n      let ext = require('@jupyterlab/ui-components-extension');\n      for (let plugin of activePlugins(ext)) {\n        pluginsToRegister.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated extensions.\n  const federatedExtensions = await Promise.allSettled(federatedExtensionPromises);\n  federatedExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        pluginsToRegister.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Load all federated component styles and log errors for any that do not\n  (await Promise.allSettled(federatedStylePromises)).filter(({status}) => status === \"rejected\").forEach(({reason}) => {\n     console.error(reason);\n    });\n\n  // create the in-browser JupyterLite Server\n  const jupyterLiteServer = new JupyterLiteServer({});\n  jupyterLiteServer.registerPluginModules(await Promise.all(serverExtensions));\n  // start the server\n  await jupyterLiteServer.start();\n\n  // retrieve the custom service manager from the server app\n  const { serviceManager } = jupyterLiteServer;\n\n  // create a full-blown JupyterLab frontend\n  const lab = new JupyterLab({\n    mimeExtensions,\n    serviceManager\n  });\n\n  lab.registerPluginModules(pluginsToRegister);\n\n  /* eslint-disable no-console */\n  console.log('Starting app');\n  await lab.start();\n  console.log('JupyterLite started, waiting for restore');\n  await lab.restored;\n  console.log('JupyterLite restored');\n}\n\nmain();\n"],"sourceRoot":""}