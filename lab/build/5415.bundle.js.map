{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/layoutrestorer.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/mimerenderers.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/treepathupdater.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/tokens.js"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","_format","format","document","body","dataset","emit","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","ILayoutRestorer","KEY","LayoutRestorer","_firstDone","_promisesDone","_promises","_restored","PromiseDelegate","_trackers","Set","_widgets","Map","_connector","connector","_first","first","_registry","registry","all","clear","promise","widget","name","nameProperty","set","disposed","connect","_onWidgetDisposed","blank","fresh","mainArea","leftArea","rightArea","layout","fetch","data","main","left","right","_rehydrateMainArea","_rehydrateSideArea","error","tracker","warning","console","warn","reject","namespace","has","args","when","add","widgetAdded","_","widgetName","widgetUpdated","restore","JSONExt","concat","push","dehydrated","_dehydrateMainArea","_dehydrateSideArea","save","area","serializeMain","deserializeMain","collapsed","currentWidget","current","get","widgets","map","filter","_a","internal","Array","isArray","delete","serializeArea","type","currentIndex","orientation","sizes","children","deserializeArea","names","hydrated","child","AttachedProperty","create","owner","dock","IMimeDocumentTracker","factoryNameProperty","SIDEBAR_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","addClass","_tracker","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","undefined","FocusTracker","_mainOptionsCache","_sideOptionsCache","id","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","dockPanel","_dockPanel","DockPanelSvg","MessageLoop","hsplitPanel","SplitPanel","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","panel","sideBar","stackedPanel","spacing","direction","addWidget","setRelativeSizes","hide","currentChanged","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","titleWidget","_titleWidget","appendChild","createElement","rank","mode","insertWidget","sender","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","context","pathChanged","_updateCurrentPath","activeWidget","currentTitle","hasClass","value","toggleClass","applicationCurrentWidget","saveLayout","activateWidget","shellMode","show","toArray","normalizeAreaConfig","restoreLayout","forEach","parent","_addToMainArea","Object","assign","activate","find","_currentTabBar","ci","titles","nextBar","_adjacentBar","prevBar","len","_addToLeftArea","_addToRightArea","_addToHeaderArea","_addToTopArea","_addToMenuArea","_addToBottomArea","Error","collapse","isDisposed","dispose","expand","isEmpty","activateById","rehydrate","collapseLeft","collapseRight","dehydrate","iter","t","h1","textContent","label","caption","ref","icon","LabIcon","bindprops","stylesheet","iconClass","classes","isHidden","bars","tabBars","index","indexOf","bar","className","replace","invoke","itemCmp","second","_panelChildHook","_items","v","ArrayExt","_panel","Panel","item","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","widgetRemoved","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","insertTab","_refreshVisibility","i","setHidden","oldWidget","previousTitle","_findWidgetByTitle","newWidget","_findWidgetIndex","removeTab","ILabStatus","LabStatus","app","_busyCount","_dirtyCount","_busySignal","_dirtySignal","oldDirty","isDirty","DisposableDelegate","Math","max","oldBusy","isBusy","JupyterLab","shell","PageConfig","registerPluginErrors","status","version","info","keys","defaultInfo","reduce","acc","val","JSON","parse","stringify","_info","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","key","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","extensions","plugins","WidgetTracker","mod","default","hasOwnProperty","requires","IRenderMimeRegistry","ITranslator","autoStart","rendermime","addFactory","rendererFactory","documentWidgetFactoryOptions","fileTypes","ft","addFileType","option","toolbarFactory","w","content","factory","MimeDocumentFactory","renderTimeout","dataType","modelName","primaryFileType","getFileType","defaultFor","defaultRendered","addWidgetFactory","widgetCreated","createRendermimePlugin","optional","provides","restorer","createRendermimePlugins","registerPlugin","mods","registerPluginModule","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","_b","parsed","URLExt","window","location","href","search","hash","pathname","request","history","hard","old","url","reload","pushState","skipRouting","route","pattern","rules","routed","rule","queue","sort","a","b","done","next","pop","execute","debug","reason","ITreePathUpdater","IConnectionLost","IRouter"],"mappings":"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","file":"5415.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied funcion. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths');\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt, PromiseDelegate, Token } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\n/**\n * The layout restorer token.\n */\nexport const ILayoutRestorer = new Token('@jupyterlab/application:ILayoutRestorer');\n/**\n * The data connector key for restorer data.\n */\nconst KEY = 'layout-restorer:data';\n/**\n * The default implementation of a layout restorer.\n *\n * #### Notes\n * The lifecycle for state restoration is subtle. The sequence of events is:\n *\n * 1. The layout restorer plugin is instantiated and makes a `fetch` call to\n *    the data connector that stores the layout restoration data. The `fetch`\n *    call returns a promise that resolves in step 6, below.\n *\n * 2. Other plugins that care about state restoration require the layout\n *    restorer as a dependency.\n *\n * 3. As each load-time plugin initializes (which happens before the front-end\n *    application has `started`), it instructs the layout restorer whether\n *    the restorer ought to `restore` its widgets by passing in its widget\n *    tracker.\n *    Alternatively, a plugin that does not require its own widget tracker\n *    (because perhaps it only creates a single widget, like a command palette),\n *    can simply `add` its widget along with a persistent unique name to the\n *    layout restorer so that its layout state can be restored when the lab\n *    application restores.\n *\n * 4. After all the load-time plugins have finished initializing, the front-end\n *    application `started` promise will resolve. This is the `first`\n *    promise that the layout restorer waits for. By this point, all of the\n *    plugins that care about restoration will have instructed the layout\n *    restorer to `restore` their widget trackers.\n *\n * 5. The layout restorer will then instruct each plugin's widget tracker\n *    to restore its state and reinstantiate whichever widgets it wants. The\n *    tracker returns a promise to the layout restorer that resolves when it\n *    has completed restoring the tracked widgets it cares about.\n *\n * 6. As each widget tracker finishes restoring the widget instances it cares\n *    about, it resolves the promise that was returned to the layout restorer\n *    (in step 5). After all of the promises that the restorer is awaiting have\n *    settled, the restorer then resolves the outstanding `fetch` promise\n *    (from step 1) and hands off a layout state object to the application\n *    shell's `restoreLayout` method for restoration.\n *\n * 7. Once the application shell has finished restoring the layout, the\n *    JupyterLab application's `restored` promise is resolved.\n *\n * Of particular note are steps 5 and 6: since data restoration of plugins\n * is accomplished by executing commands, the command that is used to restore\n * the data of each plugin must return a promise that only resolves when the\n * widget has been created and added to the plugin's widget tracker.\n */\nexport class LayoutRestorer {\n    /**\n     * Create a layout restorer.\n     */\n    constructor(options) {\n        this._firstDone = false;\n        this._promisesDone = false;\n        this._promises = [];\n        this._restored = new PromiseDelegate();\n        this._trackers = new Set();\n        this._widgets = new Map();\n        this._connector = options.connector;\n        this._first = options.first;\n        this._registry = options.registry;\n        void this._first\n            .then(() => {\n            this._firstDone = true;\n        })\n            .then(() => Promise.all(this._promises))\n            .then(() => {\n            this._promisesDone = true;\n            // Release the tracker set.\n            this._trackers.clear();\n        })\n            .then(() => {\n            this._restored.resolve(void 0);\n        });\n    }\n    /**\n     * A promise resolved when the layout restorer is ready to receive signals.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Add a widget to be tracked by the layout restorer.\n     */\n    add(widget, name) {\n        Private.nameProperty.set(widget, name);\n        this._widgets.set(name, widget);\n        widget.disposed.connect(this._onWidgetDisposed, this);\n    }\n    /**\n     * Fetch the layout state for the application.\n     *\n     * #### Notes\n     * Fetching the layout relies on all widget restoration to be complete, so\n     * calls to `fetch` are guaranteed to return after restoration is complete.\n     */\n    async fetch() {\n        const blank = {\n            fresh: true,\n            mainArea: null,\n            leftArea: null,\n            rightArea: null\n        };\n        const layout = this._connector.fetch(KEY);\n        try {\n            const [data] = await Promise.all([layout, this.restored]);\n            if (!data) {\n                return blank;\n            }\n            const { main, left, right } = data;\n            // If any data exists, then this is not a fresh session.\n            const fresh = false;\n            // Rehydrate main area.\n            const mainArea = this._rehydrateMainArea(main);\n            // Rehydrate left area.\n            const leftArea = this._rehydrateSideArea(left);\n            // Rehydrate right area.\n            const rightArea = this._rehydrateSideArea(right);\n            return { fresh, mainArea, leftArea, rightArea };\n        }\n        catch (error) {\n            return blank;\n        }\n    }\n    /**\n     * Restore the widgets of a particular widget tracker.\n     *\n     * @param tracker - The widget tracker whose widgets will be restored.\n     *\n     * @param options - The restoration options.\n     */\n    restore(tracker, options) {\n        const warning = 'restore() can only be called before `first` has resolved.';\n        if (this._firstDone) {\n            console.warn(warning);\n            return Promise.reject(warning);\n        }\n        const { namespace } = tracker;\n        if (this._trackers.has(namespace)) {\n            const warning = `A tracker namespaced ${namespace} was already restored.`;\n            console.warn(warning);\n            return Promise.reject(warning);\n        }\n        const { args, command, name, when } = options;\n        // Add the tracker to the private trackers collection.\n        this._trackers.add(namespace);\n        // Whenever a new widget is added to the tracker, record its name.\n        tracker.widgetAdded.connect((_, widget) => {\n            const widgetName = name(widget);\n            if (widgetName) {\n                this.add(widget, `${namespace}:${widgetName}`);\n            }\n        }, this);\n        // Whenever a widget is updated, get its new name.\n        tracker.widgetUpdated.connect((_, widget) => {\n            const widgetName = name(widget);\n            if (widgetName) {\n                const name = `${namespace}:${widgetName}`;\n                Private.nameProperty.set(widget, name);\n                this._widgets.set(name, widget);\n            }\n        });\n        const first = this._first;\n        const promise = tracker\n            .restore({\n            args: args || (() => JSONExt.emptyObject),\n            command,\n            connector: this._connector,\n            name,\n            registry: this._registry,\n            when: when ? [first].concat(when) : first\n        })\n            .catch(error => {\n            console.error(error);\n        });\n        this._promises.push(promise);\n        return promise;\n    }\n    /**\n     * Save the layout state for the application.\n     */\n    save(data) {\n        // If there are promises that are unresolved, bail.\n        if (!this._promisesDone) {\n            const warning = 'save() was called prematurely.';\n            console.warn(warning);\n            return Promise.reject(warning);\n        }\n        const dehydrated = {};\n        dehydrated.main = this._dehydrateMainArea(data.mainArea);\n        dehydrated.left = this._dehydrateSideArea(data.leftArea);\n        dehydrated.right = this._dehydrateSideArea(data.rightArea);\n        return this._connector.save(KEY, dehydrated);\n    }\n    /**\n     * Dehydrate a main area description into a serializable object.\n     */\n    _dehydrateMainArea(area) {\n        if (!area) {\n            return null;\n        }\n        return Private.serializeMain(area);\n    }\n    /**\n     * Reydrate a serialized main area description object.\n     *\n     * #### Notes\n     * This function consumes data that can become corrupted, so it uses type\n     * coercion to guarantee the dehydrated object is safely processed.\n     */\n    _rehydrateMainArea(area) {\n        if (!area) {\n            return null;\n        }\n        return Private.deserializeMain(area, this._widgets);\n    }\n    /**\n     * Dehydrate a side area description into a serializable object.\n     */\n    _dehydrateSideArea(area) {\n        if (!area) {\n            return null;\n        }\n        const dehydrated = { collapsed: area.collapsed };\n        if (area.currentWidget) {\n            const current = Private.nameProperty.get(area.currentWidget);\n            if (current) {\n                dehydrated.current = current;\n            }\n        }\n        if (area.widgets) {\n            dehydrated.widgets = area.widgets\n                .map(widget => Private.nameProperty.get(widget))\n                .filter(name => !!name);\n        }\n        return dehydrated;\n    }\n    /**\n     * Reydrate a serialized side area description object.\n     *\n     * #### Notes\n     * This function consumes data that can become corrupted, so it uses type\n     * coercion to guarantee the dehydrated object is safely processed.\n     */\n    _rehydrateSideArea(area) {\n        var _a;\n        if (!area) {\n            return { collapsed: true, currentWidget: null, widgets: null };\n        }\n        const internal = this._widgets;\n        const collapsed = (_a = area.collapsed) !== null && _a !== void 0 ? _a : false;\n        const currentWidget = area.current && internal.has(`${area.current}`)\n            ? internal.get(`${area.current}`)\n            : null;\n        const widgets = !Array.isArray(area.widgets)\n            ? null\n            : area.widgets\n                .map(name => internal.has(`${name}`) ? internal.get(`${name}`) : null)\n                .filter(widget => !!widget);\n        return {\n            collapsed,\n            currentWidget: currentWidget,\n            widgets: widgets\n        };\n    }\n    /**\n     * Handle a widget disposal.\n     */\n    _onWidgetDisposed(widget) {\n        const name = Private.nameProperty.get(widget);\n        this._widgets.delete(name);\n    }\n}\n/*\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for a widget's ID in the serialized restore data.\n     */\n    Private.nameProperty = new AttachedProperty({\n        name: 'name',\n        create: owner => ''\n    });\n    /**\n     * Serialize individual areas within the main area.\n     */\n    function serializeArea(area) {\n        if (!area || !area.type) {\n            return null;\n        }\n        if (area.type === 'tab-area') {\n            return {\n                type: 'tab-area',\n                currentIndex: area.currentIndex,\n                widgets: area.widgets\n                    .map(widget => Private.nameProperty.get(widget))\n                    .filter(name => !!name)\n            };\n        }\n        return {\n            type: 'split-area',\n            orientation: area.orientation,\n            sizes: area.sizes,\n            children: area.children\n                .map(serializeArea)\n                .filter(area => !!area)\n        };\n    }\n    /**\n     * Return a dehydrated, serializable version of the main dock panel.\n     */\n    function serializeMain(area) {\n        const dehydrated = {\n            dock: (area && area.dock && serializeArea(area.dock.main)) || null\n        };\n        if (area) {\n            if (area.currentWidget) {\n                const current = Private.nameProperty.get(area.currentWidget);\n                if (current) {\n                    dehydrated.current = current;\n                }\n            }\n        }\n        return dehydrated;\n    }\n    Private.serializeMain = serializeMain;\n    /**\n     * Deserialize individual areas within the main area.\n     *\n     * #### Notes\n     * Because this data comes from a potentially unreliable foreign source, it is\n     * typed as a `JSONObject`; but the actual expected type is:\n     * `ITabArea | ISplitArea`.\n     *\n     * For fault tolerance, types are manually checked in deserialization.\n     */\n    function deserializeArea(area, names) {\n        if (!area) {\n            return null;\n        }\n        // Because this data is saved to a foreign data source, its type safety is\n        // not guaranteed when it is retrieved, so exhaustive checks are necessary.\n        const type = area.type || 'unknown';\n        if (type === 'unknown' || (type !== 'tab-area' && type !== 'split-area')) {\n            console.warn(`Attempted to deserialize unknown type: ${type}`);\n            return null;\n        }\n        if (type === 'tab-area') {\n            const { currentIndex, widgets } = area;\n            const hydrated = {\n                type: 'tab-area',\n                currentIndex: currentIndex || 0,\n                widgets: (widgets &&\n                    widgets\n                        .map(widget => names.get(widget))\n                        .filter(widget => !!widget)) ||\n                    []\n            };\n            // Make sure the current index is within bounds.\n            if (hydrated.currentIndex > hydrated.widgets.length - 1) {\n                hydrated.currentIndex = 0;\n            }\n            return hydrated;\n        }\n        const { orientation, sizes, children } = area;\n        const hydrated = {\n            type: 'split-area',\n            orientation: orientation,\n            sizes: sizes || [],\n            children: (children &&\n                children\n                    .map(child => deserializeArea(child, names))\n                    .filter(widget => !!widget)) ||\n                []\n        };\n        return hydrated;\n    }\n    /**\n     * Return the hydrated version of the main dock panel, ready to restore.\n     *\n     * #### Notes\n     * Because this data comes from a potentially unreliable foreign source, it is\n     * typed as a `JSONObject`; but the actual expected type is: `IMainArea`.\n     *\n     * For fault tolerance, types are manually checked in deserialization.\n     */\n    function deserializeMain(area, names) {\n        if (!area) {\n            return null;\n        }\n        const name = area.current || null;\n        const dock = area.dock || null;\n        return {\n            currentWidget: (name && names.has(name) && names.get(name)) || null,\n            dock: dock ? { main: deserializeArea(dock, names) } : null\n        };\n    }\n    Private.deserializeMain = deserializeMain;\n})(Private || (Private = {}));\n//# sourceMappingURL=layoutrestorer.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { WidgetTracker } from '@jupyterlab/apputils';\nimport { MimeDocumentFactory } from '@jupyterlab/docregistry';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Token } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { ILayoutRestorer } from './layoutrestorer';\nimport { ITranslator } from '@jupyterlab/translation';\n/**\n * The mime document tracker token.\n */\nexport const IMimeDocumentTracker = new Token('@jupyterlab/application:IMimeDocumentTracker');\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport function createRendermimePlugins(extensions) {\n    const plugins = [];\n    const namespace = 'application-mimedocuments';\n    const tracker = new WidgetTracker({ namespace });\n    extensions.forEach(mod => {\n        let data = mod.default;\n        // Handle CommonJS exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            plugins.push(createRendermimePlugin(tracker, item));\n        });\n    });\n    // Also add a meta-plugin handling state restoration\n    // and exposing the mime document widget tracker.\n    plugins.push({\n        id: '@jupyterlab/application:mimedocument',\n        optional: [ILayoutRestorer],\n        provides: IMimeDocumentTracker,\n        autoStart: true,\n        activate: (app, restorer) => {\n            if (restorer) {\n                void restorer.restore(tracker, {\n                    command: 'docmanager:open',\n                    args: widget => ({\n                        path: widget.context.path,\n                        factory: Private.factoryNameProperty.get(widget)\n                    }),\n                    name: widget => `${widget.context.path}:${Private.factoryNameProperty.get(widget)}`\n                });\n            }\n            return tracker;\n        }\n    });\n    return plugins;\n}\n/**\n * Create rendermime plugins for rendermime extension modules.\n */\nexport function createRendermimePlugin(tracker, item) {\n    return {\n        id: item.id,\n        requires: [IRenderMimeRegistry, ITranslator],\n        autoStart: true,\n        activate: (app, rendermime, translator) => {\n            // Add the mime renderer.\n            if (item.rank !== undefined) {\n                rendermime.addFactory(item.rendererFactory, item.rank);\n            }\n            else {\n                rendermime.addFactory(item.rendererFactory);\n            }\n            // Handle the widget factory.\n            if (!item.documentWidgetFactoryOptions) {\n                return;\n            }\n            const registry = app.docRegistry;\n            let options = [];\n            if (Array.isArray(item.documentWidgetFactoryOptions)) {\n                options = item.documentWidgetFactoryOptions;\n            }\n            else {\n                options = [\n                    item.documentWidgetFactoryOptions\n                ];\n            }\n            if (item.fileTypes) {\n                item.fileTypes.forEach(ft => {\n                    if (ft.icon) {\n                        // upconvert the contents of the icon field to a proper LabIcon\n                        ft = Object.assign(Object.assign({}, ft), { icon: LabIcon.resolve({ icon: ft.icon }) });\n                    }\n                    app.docRegistry.addFileType(ft);\n                });\n            }\n            options.forEach(option => {\n                const toolbarFactory = option.toolbarFactory\n                    ? (w) => option.toolbarFactory(w.content.renderer)\n                    : undefined;\n                const factory = new MimeDocumentFactory({\n                    renderTimeout: item.renderTimeout,\n                    dataType: item.dataType,\n                    rendermime,\n                    modelName: option.modelName,\n                    name: option.name,\n                    primaryFileType: registry.getFileType(option.primaryFileType),\n                    fileTypes: option.fileTypes,\n                    defaultFor: option.defaultFor,\n                    defaultRendered: option.defaultRendered,\n                    toolbarFactory,\n                    translator,\n                    factory: item.rendererFactory\n                });\n                registry.addWidgetFactory(factory);\n                factory.widgetCreated.connect((sender, widget) => {\n                    Private.factoryNameProperty.set(widget, factory.name);\n                    // Notify the widget tracker if restore data needs to update.\n                    widget.context.pathChanged.connect(() => {\n                        void tracker.save(widget);\n                    });\n                    void tracker.add(widget);\n                });\n            });\n        }\n    };\n}\n/**\n * Private namespace for the module.\n */\nvar Private;\n(function (Private) {\n    /**\n     * An attached property for keeping the factory name\n     * that was used to create a mimedocument.\n     */\n    Private.factoryNameProperty = new AttachedProperty({\n        name: 'factoryName',\n        create: () => undefined\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=mimerenderers.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { classes, DockPanelSvg, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor() {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        const hboxPanel = new BoxPanel();\n        const dockPanel = (this._dockPanel = new DockPanelSvg());\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = new SplitPanel();\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        hboxPanel.spacing = 0;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(hsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel.\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        this._rightHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleWidget = (this._titleWidget = new Widget());\n        titleWidget.id = 'jp-title-panel-title';\n        titleWidget.node.appendChild(document.createElement('h1'));\n        this.add(titleWidget, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleWidget.hide();\n        }\n        else {\n            rootLayout.insertWidget(2, this._menuHandler.panel);\n        }\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n            }\n            if (newValue && newValue instanceof DocumentWidget) {\n                newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/mutiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    /**\n     * Enable/disable presentation mode (`jp-mod-presentationMode` CSS class) with\n     * a boolean.\n     */\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        if (mode === 'single-document') {\n            this._cachedLayout = dock.saveLayout();\n            dock.mode = mode;\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Set the mode data attribute on the application shell node.\n            this.node.dataset.shellMode = mode;\n            // Adjust menu and title\n            // this.add(this._menuHandler.panel, 'top', {rank: 100});\n            this.layout.insertWidget(2, this._menuHandler.panel);\n            this._titleWidget.show();\n            this._updateTitlePanelTitle();\n            this._modeChanged.emit(mode);\n            return;\n        }\n        // Cache a reference to every widget currently in the dock panel.\n        const widgets = toArray(dock.widgets());\n        // Toggle back to multiple document mode.\n        dock.mode = mode;\n        // Restore the original layout.\n        if (this._cachedLayout) {\n            // Remove any disposed widgets in the cached layout and restore.\n            Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n            dock.restoreLayout(this._cachedLayout);\n            this._cachedLayout = null;\n        }\n        // Add any widgets created during single document mode, which have\n        // subsequently been removed from the dock panel after the multiple document\n        // layout has been restored. If the widget has add options cached for\n        // the widget (i.e., if it has been placed with respect to another widget),\n        // then take that into account.\n        widgets.forEach(widget => {\n            if (!widget.parent) {\n                this._addToMainArea(widget, Object.assign(Object.assign({}, this._mainOptionsCache.get(widget)), { activate: false }));\n            }\n        });\n        this._mainOptionsCache.clear();\n        // In case the active widget in the dock panel is *not* the active widget\n        // of the application, defer to the application.\n        if (applicationCurrentWidget) {\n            dock.activateWidget(applicationCurrentWidget);\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        // Adjust menu and title\n        this.add(this._menuHandler.panel, 'top', { rank: 100 });\n        // this._topHandler.addWidget(this._menuHandler.panel, 100)\n        this._titleWidget.hide();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /*\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    add(widget, area = 'main', options) {\n        switch (area || 'main') {\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        this._titleWidget.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `toArray()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        toArray(this._dockPanel.widgets()).forEach(widget => widget.close());\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state for the application shell.\n     */\n    restoreLayout(mode, layout) {\n        const { mainArea, leftArea, rightArea } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock) {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate()\n        };\n        return layout;\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return iter(this._leftHandler.sideBar.titles.map(t => t.owner));\n            case 'right':\n                return iter(this._rightHandler.sideBar.titles.map(t => t.owner));\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const h1 = this._titleWidget.node.children[0];\n        h1.textContent = current ? current.title.label : '';\n        h1.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = toArray(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._items = new Array();\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' || !title.icon) {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = toArray(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return { collapsed, currentWidget, widgets };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._sideBar.setHidden(this._sideBar.titles.length === 0);\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * The application status token.\n */\nexport const ILabStatus = new Token('@jupyterlab/application:ILabStatus');\n/**\n * The application status signals and flags class.\n */\nexport class LabStatus {\n    /**\n     * Construct a new  status object.\n     */\n    constructor(app) {\n        this._busyCount = 0;\n        this._dirtyCount = 0;\n        this._busySignal = new Signal(app);\n        this._dirtySignal = new Signal(app);\n    }\n    /**\n     * Returns a signal for when application changes its busy status.\n     */\n    get busySignal() {\n        return this._busySignal;\n    }\n    /**\n     * Returns a signal for when application changes its dirty status.\n     */\n    get dirtySignal() {\n        return this._dirtySignal;\n    }\n    /**\n     * Whether the application is busy.\n     */\n    get isBusy() {\n        return this._busyCount > 0;\n    }\n    /**\n     * Whether the application is dirty.\n     */\n    get isDirty() {\n        return this._dirtyCount > 0;\n    }\n    /**\n     * Set the application state to dirty.\n     *\n     * @returns A disposable used to clear the dirty state for the caller.\n     */\n    setDirty() {\n        const oldDirty = this.isDirty;\n        this._dirtyCount++;\n        if (this.isDirty !== oldDirty) {\n            this._dirtySignal.emit(this.isDirty);\n        }\n        return new DisposableDelegate(() => {\n            const oldDirty = this.isDirty;\n            this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n            if (this.isDirty !== oldDirty) {\n                this._dirtySignal.emit(this.isDirty);\n            }\n        });\n    }\n    /**\n     * Set the application state to busy.\n     *\n     * @returns A disposable used to clear the busy state for the caller.\n     */\n    setBusy() {\n        const oldBusy = this.isBusy;\n        this._busyCount++;\n        if (this.isBusy !== oldBusy) {\n            this._busySignal.emit(this.isBusy);\n        }\n        return new DisposableDelegate(() => {\n            const oldBusy = this.isBusy;\n            this._busyCount--;\n            if (this.isBusy !== oldBusy) {\n                this._busySignal.emit(this.isBusy);\n            }\n        });\n    }\n}\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super(Object.assign(Object.assign({}, options), { shell: options.shell || new LabShell() }));\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = Object.assign(Object.assign({}, JupyterLab.defaultInfo), info);\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater');\n//# sourceMappingURL=treepathupdater.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/apputils:IConnectionLost');\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}