{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/crumbs.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/listing.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/upload.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/search.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/browser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/opendialog.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser/lib/uploadstatus.js"],"names":["BREADCRUMB_HOME_CLASS","BREADCRUMB_ITEM_CLASS","BREAD_CRUMB_PATHS","CONTENTS_MIME","DROP_TARGET_CLASS","BreadCrumbs","Widget","options","super","this","translator","nullTranslator","_trans","load","_model","model","addClass","_crumbs","Private","createCrumbs","_crumbSeps","createCrumbSeparators","node","appendChild","Crumb","Home","refreshed","connect","update","event","type","_evtClick","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","msg","onAfterAttach","addEventListener","onBeforeDetach","removeEventListener","localPath","manager","services","contents","path","updateCrumbs","button","target","classList","contains","index","ArrayExt","value","cd","catch","error","showErrorMessage","__","preventDefault","stopPropagation","parentElement","mimeData","hasData","ElementExt","clientX","clientY","Current","add","dropTarget","DOMUtils","remove","dropAction","proposedAction","PathExt","promises","oldPaths","getData","oldPath","localOldPath","name","newPath","push","renameFile","Promise","all","err","breadcrumbs","separators","parentNode","firstChild","nextSibling","removeChild","parts","split","length","Ellipsis","grandParent","slice","join","title","Parent","textContent","parent","home","folderIcon","className","tag","PageConfig","stylesheet","ellipsis","ellipsesIcon","document","createElement","current","items","i","MAX_DIRECTORIES","item","HEADER_CLASS","HEADER_ITEM_ICON_CLASS","CONTENT_CLASS","ITEM_TEXT_CLASS","ITEM_ICON_CLASS","ITEM_MODIFIED_CLASS","NAME_ID_CLASS","MODIFIED_ID_CLASS","SELECTED_CLASS","CUT_CLASS","MULTI_SELECTED_CLASS","RUNNING_CLASS","DESCENDING_CLASS","IS_MAC","navigator","platform","match","DirListing","renderer","defaultRenderer","createNode","_items","_sortedItems","_sortState","direction","key","_onItemOpened","Signal","_drag","_dragData","_selectTimer","_isCut","_prevPath","_clipboard","_softSelection","_selection","Object","create","_searchPrefix","_searchPrefixTimer","_inRename","_isDirty","fileChanged","_onFileChanged","_onModelRefreshed","pathChanged","_onPathChanged","_editNode","_manager","_renderer","headerNode","populateHeaderNode","activateRequested","_onActivateRequested","dispose","filter","ArrayIterator","state","sort","_doRename","_copy","resolve","undefined","basePath","each","rename","copy","removeClass","then","_p","message","_n","result","showDialog","body","buttons","Dialog","label","isDisposed","accept","_delete","map","selectedItems","toArray","download","paths","sessions","session","shutdown","id","keepExisting","selected","keys","_selectItem","contentNode","prefix","toLowerCase","substr","hitTestNodes","refresh","Error","MessageLoop","_evtMousedown","_evtMouseup","_evtMousemove","_evtKeydown","_evtDblClick","_evtNativeDrop","_evtScroll","content","sortState","nodes","pop","createItemNode","forEach","ft","registry","getFileTypeForModel","updateItemNode","setAttribute","_a","kernel","specs","spec","kernelspecs","display_name","width","getBoundingClientRect","toggleClass","header","handleHeaderClick","scrollLeft","focus","blur","clearTimeout","_handleFileSelect","ctrlKey","pressX","pressY","metaKey","shiftKey","clearSelectedItems","data","dx","Math","abs","dy","_startDrag","emit","openOrReveal","keyCode","altKey","_handleOpen","selectPrevious","selectNext","window","setTimeout","selectByPrefix","files","dataTransfer","upload","selectedNames","source","find","dragImage","createDragImage","Drag","MimeData","supportedActions","setData","withContent","async","get","otherPaths","reverse","widget","findWidget","open","firstWidgetPlaced","PromiseDelegate","promise","prevWidget","ref","mode","start","action","_handleMultiSelect","nearestIndex","indexOf","deleteFile","row","nameNode","getNameNode","original","doRename","newName","isValidFileName","selectItemByName","existing","isVisible","sender","args","newValue","basename","Renderer","tabIndex","trans","_createHeaderItemNode","narrow","modified","updateCaret","modifiedIcon","nameIcon","icon","text","fileType","DocumentRegistry","iconClass","iconContainer","LabIcon","classes","container","hoverText","size","formatFileSize","dirname","created","Time","Date","last_modified","writable","startsWith","removeAttribute","indices","highlightedName","StringExt","h","VirtualDOM","modText","modTitle","count","cloneNode","iconLabel","edit","replaceChild","lastIndexOf","setSelectionRange","reject","onblur","onkeydown","selectionStart","selectionEnd","a","b","t1","t2","valA","getTime","valB","localeCompare","bytes","decimalPoint","k","dm","sizes","floor","log","parseFloat","pow","toFixed","String","float","caretDownIcon","caretUpIcon","element","Uploader","ToolbarButton","fileUploadIcon","onClick","_input","click","tooltip","translateToolTip","_onInputChanged","pending","Array","prototype","call","file","fileBrowserModel","_onInputClicked","createUploadInput","onclick","onchange","input","multiple","FilterBox","props","setFilter","useState","forceRefresh","useEffect","listing","InputGroup","rightIcon","placeholder","onChange","e","useFuzzyFilter","score","query","Infinity","rgx","rgxMatch","exec","fuzzySearch","x","FilenameSearcher","ReactWidget","FILTERBOX_CLASS","FileBrowser","_useFuzzyFilter","connectionFailure","_onConnectionFailure","toolbar","Toolbar","_directoryPending","newFolder","newFolderIcon","createNewDirectory","uploader","refresher","refreshIcon","addItem","_listing","_filenameSearcher","layout","PanelLayout","addWidget","restore","_navigateToCurrentDirectory","removeWidget","cut","paste","newUntitled","delete","duplicate","shutdownKernels","modelForClick","ServerConnection","response","status","IFileBrowserFactory","Token","LARGE_FILE_SIZE","CHUNK_SIZE","FileBrowserModel","_connectionFailure","_fileChanged","_key","_pathChanged","_paths","Set","_pending","_pendingPath","_refreshed","_sessions","_state","_isDisposed","_restored","_uploads","_uploadChanged","_driveName","driveName","rootPath","mimetype","format","refreshInterval","runningChanged","_onRunningChanged","_unloadEventListener","confirmationMessage","returnValue","_poll","Poll","auto","factory","frequency","interval","backoff","max","standby","tick","resolvePath","oldValue","_handleContents","save","running","console","url","getDownloadUrl","href","populate","ready","fetch","serverVersion","supportsChunked","largeFile","warn","_shouldUploadLarge","_uploadCheckDisposed","shouldOverwrite","chunkedUpload","_upload","round","chunked","uploadInner","blob","chunk","reader","FileReader","readAsDataURL","onload","onerror","uploadIndex","finalModel","progress","end","lastChunk","newUpload","currentModel","splice","clear","models","_populateSessions","change","has","FilterFileBrowserModel","_filter","FileDialog","getOpenFiles","dialogOptions","focusNodeSelector","host","OpenDialog","launch","getExistingDirectory","assign","_browser","createFilteredFileBrowser","selection","FileUploadComponent","GroupItem","spacing","TextItem","ProgressBar","percentage","FileUploadStatus","VDomRenderer","opts","Model","tracker","currentWidget","_onBrowserChange","browser","browserModel","_tracker","currentChanged","complete","disconnect","VDomModel","browse","uploads","idx","val","stateChanged","_browserModel","oldBrowserModel","uploadChanged"],"mappings":"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","file":"2385.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt } from '@lumino/algorithm';\nimport { ElementExt } from '@lumino/domutils';\nimport { Widget } from '@lumino/widgets';\nimport { DOMUtils, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { renameFile } from '@jupyterlab/docmanager';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { ellipsesIcon, folderIcon } from '@jupyterlab/ui-components';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_CLASS = 'jp-BreadCrumbs';\n/**\n * The class name for the breadcrumbs home node\n */\nconst BREADCRUMB_HOME_CLASS = 'jp-BreadCrumbs-home';\n/**\n * The class name added to the breadcrumb node.\n */\nconst BREADCRUMB_ITEM_CLASS = 'jp-BreadCrumbs-item';\n/**\n * Bread crumb paths.\n */\nconst BREAD_CRUMB_PATHS = ['/', '../../', '../', ''];\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * A class which hosts folder breadcrumbs.\n */\nexport class BreadCrumbs extends Widget {\n    /**\n     * Construct a new file browser crumb widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this.addClass(BREADCRUMB_CLASS);\n        this._crumbs = Private.createCrumbs();\n        this._crumbSeps = Private.createCrumbSeparators();\n        this.node.appendChild(this._crumbs[Private.Crumb.Home]);\n        this._model.refreshed.connect(this.update, this);\n    }\n    /**\n     * Handle the DOM events for the bread crumbs.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.update();\n        const node = this.node;\n        node.addEventListener('click', this);\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        node.removeEventListener('click', this);\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        // Update the breadcrumb list.\n        const contents = this._model.manager.services.contents;\n        const localPath = contents.localPath(this._model.path);\n        Private.updateCrumbs(this._crumbs, this._crumbSeps, localPath);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Find a valid click target.\n        let node = event.target;\n        while (node && node !== this.node) {\n            if (node.classList.contains(BREADCRUMB_ITEM_CLASS) ||\n                node.classList.contains(BREADCRUMB_HOME_CLASS)) {\n                const index = ArrayExt.findFirstIndex(this._crumbs, value => value === node);\n                this._model\n                    .cd(BREAD_CRUMB_PATHS[index])\n                    .catch(error => showErrorMessage(this._trans.__('Open Error'), error));\n                // Stop the event propagation.\n                event.preventDefault();\n                event.stopPropagation();\n                return;\n            }\n            node = node.parentElement;\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n            if (index !== -1) {\n                if (index !== Private.Crumb.Current) {\n                    this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => ElementExt.hitTest(node, event.clientX, event.clientY));\n        if (index !== -1) {\n            this._crumbs[index].classList.add(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        event.dropAction = event.proposedAction;\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.findFirstIndex(this._crumbs, node => node === target);\n        if (index === -1) {\n            return;\n        }\n        const model = this._model;\n        const path = PathExt.resolve(model.path, BREAD_CRUMB_PATHS[index]);\n        const manager = model.manager;\n        // Move all of the items.\n        const promises = [];\n        const oldPaths = event.mimeData.getData(CONTENTS_MIME);\n        for (const oldPath of oldPaths) {\n            const localOldPath = manager.services.contents.localPath(oldPath);\n            const name = PathExt.basename(localOldPath);\n            const newPath = PathExt.join(path, name);\n            promises.push(renameFile(manager, oldPath, newPath));\n        }\n        void Promise.all(promises).catch(err => {\n            return showErrorMessage(this._trans.__('Move Error'), err);\n        });\n    }\n}\n/**\n * The namespace for the crumbs private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Breadcrumb item list enum.\n     */\n    let Crumb;\n    (function (Crumb) {\n        Crumb[Crumb[\"Home\"] = 0] = \"Home\";\n        Crumb[Crumb[\"Ellipsis\"] = 1] = \"Ellipsis\";\n        Crumb[Crumb[\"Parent\"] = 2] = \"Parent\";\n        Crumb[Crumb[\"Current\"] = 3] = \"Current\";\n    })(Crumb = Private.Crumb || (Private.Crumb = {}));\n    /**\n     * Populate the breadcrumb node.\n     */\n    function updateCrumbs(breadcrumbs, separators, path) {\n        const node = breadcrumbs[0].parentNode;\n        // Remove all but the home node.\n        const firstChild = node.firstChild;\n        while (firstChild && firstChild.nextSibling) {\n            node.removeChild(firstChild.nextSibling);\n        }\n        node.appendChild(separators[0]);\n        const parts = path.split('/');\n        if (parts.length > 2) {\n            node.appendChild(breadcrumbs[Crumb.Ellipsis]);\n            const grandParent = parts.slice(0, parts.length - 2).join('/');\n            breadcrumbs[Crumb.Ellipsis].title = grandParent;\n            node.appendChild(separators[1]);\n        }\n        if (path) {\n            if (parts.length >= 2) {\n                breadcrumbs[Crumb.Parent].textContent = parts[parts.length - 2];\n                node.appendChild(breadcrumbs[Crumb.Parent]);\n                const parent = parts.slice(0, parts.length - 1).join('/');\n                breadcrumbs[Crumb.Parent].title = parent;\n                node.appendChild(separators[2]);\n            }\n            breadcrumbs[Crumb.Current].textContent = parts[parts.length - 1];\n            node.appendChild(breadcrumbs[Crumb.Current]);\n            breadcrumbs[Crumb.Current].title = path;\n            node.appendChild(separators[3]);\n        }\n    }\n    Private.updateCrumbs = updateCrumbs;\n    /**\n     * Create the breadcrumb nodes.\n     */\n    function createCrumbs() {\n        const home = folderIcon.element({\n            className: BREADCRUMB_HOME_CLASS,\n            tag: 'span',\n            title: PageConfig.getOption('serverRoot') || 'Jupyter Server Root',\n            stylesheet: 'breadCrumb'\n        });\n        const ellipsis = ellipsesIcon.element({\n            className: BREADCRUMB_ITEM_CLASS,\n            tag: 'span',\n            stylesheet: 'breadCrumb'\n        });\n        const parent = document.createElement('span');\n        parent.className = BREADCRUMB_ITEM_CLASS;\n        const current = document.createElement('span');\n        current.className = BREADCRUMB_ITEM_CLASS;\n        return [home, ellipsis, parent, current];\n    }\n    Private.createCrumbs = createCrumbs;\n    /**\n     * Create the breadcrumb separator nodes.\n     */\n    function createCrumbSeparators() {\n        const items = [];\n        // The maximum number of directories that will be shown in the crumbs\n        const MAX_DIRECTORIES = 2;\n        // Make separators for after each directory, one at the beginning, and one\n        // after a possible ellipsis.\n        for (let i = 0; i < MAX_DIRECTORIES + 2; i++) {\n            const item = document.createElement('span');\n            item.textContent = '/';\n            items.push(item);\n        }\n        return items;\n    }\n    Private.createCrumbSeparators = createCrumbSeparators;\n})(Private || (Private = {}));\n//# sourceMappingURL=crumbs.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Dialog, DOMUtils, showDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { isValidFileName, renameFile } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { caretDownIcon, caretUpIcon, classes, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, ArrayIterator, StringExt, each, filter, find, map, toArray } from '@lumino/algorithm';\nimport { MimeData, PromiseDelegate } from '@lumino/coreutils';\nimport { ElementExt } from '@lumino/domutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Signal } from '@lumino/signaling';\nimport { Widget } from '@lumino/widgets';\nimport { VirtualDOM, h } from '@lumino/virtualdom';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to DirListing widget.\n */\nconst DIR_LISTING_CLASS = 'jp-DirListing';\n/**\n * The class name added to a dir listing header node.\n */\nconst HEADER_CLASS = 'jp-DirListing-header';\n/**\n * The class name added to a dir listing list header cell.\n */\nconst HEADER_ITEM_CLASS = 'jp-DirListing-headerItem';\n/**\n * The class name added to a header cell text node.\n */\nconst HEADER_ITEM_TEXT_CLASS = 'jp-DirListing-headerItemText';\n/**\n * The class name added to a header cell icon node.\n */\nconst HEADER_ITEM_ICON_CLASS = 'jp-DirListing-headerItemIcon';\n/**\n * The class name added to the dir listing content node.\n */\nconst CONTENT_CLASS = 'jp-DirListing-content';\n/**\n * The class name added to dir listing content item.\n */\nconst ITEM_CLASS = 'jp-DirListing-item';\n/**\n * The class name added to the listing item text cell.\n */\nconst ITEM_TEXT_CLASS = 'jp-DirListing-itemText';\n/**\n * The class name added to the listing item icon cell.\n */\nconst ITEM_ICON_CLASS = 'jp-DirListing-itemIcon';\n/**\n * The class name added to the listing item modified cell.\n */\nconst ITEM_MODIFIED_CLASS = 'jp-DirListing-itemModified';\n/**\n * The class name added to the dir listing editor node.\n */\nconst EDITOR_CLASS = 'jp-DirListing-editor';\n/**\n * The class name added to the name column header cell.\n */\nconst NAME_ID_CLASS = 'jp-id-name';\n/**\n * The class name added to the modified column header cell.\n */\nconst MODIFIED_ID_CLASS = 'jp-id-modified';\n/**\n * The class name added to the narrow column header cell.\n */\nconst NARROW_ID_CLASS = 'jp-id-narrow';\n/**\n * The mime type for a contents drag object.\n */\nconst CONTENTS_MIME = 'application/x-jupyter-icontents';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/**\n * The class name added to drop targets.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * The class name added to selected rows.\n */\nconst SELECTED_CLASS = 'jp-mod-selected';\n/**\n * The class name added to drag state icons to add space between the icon and the file name\n */\nconst DRAG_ICON_CLASS = 'jp-DragIcon';\n/**\n * The class name added to the widget when there are items on the clipboard.\n */\nconst CLIPBOARD_CLASS = 'jp-mod-clipboard';\n/**\n * The class name added to cut rows.\n */\nconst CUT_CLASS = 'jp-mod-cut';\n/**\n * The class name added when there are more than one selected rows.\n */\nconst MULTI_SELECTED_CLASS = 'jp-mod-multiSelected';\n/**\n * The class name added to indicate running notebook.\n */\nconst RUNNING_CLASS = 'jp-mod-running';\n/**\n * The class name added for a decending sort.\n */\nconst DESCENDING_CLASS = 'jp-mod-descending';\n/**\n * The maximum duration between two key presses when selecting files by prefix.\n */\nconst PREFIX_APPEND_DURATION = 1000;\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * A boolean indicating whether the platform is Mac.\n */\nconst IS_MAC = !!navigator.platform.match(/Mac/i);\n/**\n * The factory MIME type supported by lumino dock panels.\n */\nconst FACTORY_MIME = 'application/vnd.lumino.widget-factory';\n/**\n * A widget which hosts a file list area.\n */\nexport class DirListing extends Widget {\n    /**\n     * Construct a new file browser directory listing widget.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super({\n            node: (options.renderer || DirListing.defaultRenderer).createNode()\n        });\n        this._items = [];\n        this._sortedItems = [];\n        this._sortState = {\n            direction: 'ascending',\n            key: 'name'\n        };\n        this._onItemOpened = new Signal(this);\n        this._drag = null;\n        this._dragData = null;\n        this._selectTimer = -1;\n        this._isCut = false;\n        this._prevPath = '';\n        this._clipboard = [];\n        this._softSelection = '';\n        this._selection = Object.create(null);\n        this._searchPrefix = '';\n        this._searchPrefixTimer = -1;\n        this._inRename = false;\n        this._isDirty = false;\n        this.addClass(DIR_LISTING_CLASS);\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._model = options.model;\n        this._model.fileChanged.connect(this._onFileChanged, this);\n        this._model.refreshed.connect(this._onModelRefreshed, this);\n        this._model.pathChanged.connect(this._onPathChanged, this);\n        this._editNode = document.createElement('input');\n        this._editNode.className = EDITOR_CLASS;\n        this._manager = this._model.manager;\n        this._renderer = options.renderer || DirListing.defaultRenderer;\n        const headerNode = DOMUtils.findElement(this.node, HEADER_CLASS);\n        this._renderer.populateHeaderNode(headerNode, this.translator);\n        this._manager.activateRequested.connect(this._onActivateRequested, this);\n    }\n    /**\n     * Dispose of the resources held by the directory listing.\n     */\n    dispose() {\n        this._items.length = 0;\n        this._sortedItems.length = 0;\n        this._clipboard.length = 0;\n        super.dispose();\n    }\n    /**\n     * Get the model used by the listing.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the dir listing header node.\n     *\n     * #### Notes\n     * This is the node which holds the header cells.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get headerNode() {\n        return DOMUtils.findElement(this.node, HEADER_CLASS);\n    }\n    /**\n     * Get the dir listing content node.\n     *\n     * #### Notes\n     * This is the node which holds the item nodes.\n     *\n     * Modifying this node directly can lead to undefined behavior.\n     */\n    get contentNode() {\n        return DOMUtils.findElement(this.node, CONTENT_CLASS);\n    }\n    /**\n     * The renderer instance used by the directory listing.\n     */\n    get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The current sort state.\n     */\n    get sortState() {\n        return this._sortState;\n    }\n    /**\n     * A signal fired when an item is opened.\n     */\n    get onItemOpened() {\n        return this._onItemOpened;\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        const items = this._sortedItems;\n        return filter(items, item => this._selection[item.name]);\n    }\n    /**\n     * Create an iterator over the listing's sorted items.\n     *\n     * @returns A new iterator over the listing's sorted items.\n     */\n    sortedItems() {\n        return new ArrayIterator(this._sortedItems);\n    }\n    /**\n     * Sort the items using a sort condition.\n     */\n    sort(state) {\n        this._sortedItems = Private.sort(this.model.items(), state);\n        this._sortState = state;\n        this.update();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._doRename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._isCut = true;\n        this._copy();\n        this.update();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        if (!this._clipboard.length) {\n            this._isCut = false;\n            return Promise.resolve(undefined);\n        }\n        const basePath = this._model.path;\n        const promises = [];\n        each(this._clipboard, path => {\n            if (this._isCut) {\n                const parts = path.split('/');\n                const name = parts[parts.length - 1];\n                const newPath = PathExt.join(basePath, name);\n                promises.push(this._model.manager.rename(path, newPath));\n            }\n            else {\n                promises.push(this._model.manager.copy(path, basePath));\n            }\n        });\n        // Remove any cut modifiers.\n        each(this._items, item => {\n            item.classList.remove(CUT_CLASS);\n        });\n        this._clipboard.length = 0;\n        this._isCut = false;\n        this.removeClass(CLIPBOARD_CLASS);\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Paste Error'), error);\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    async delete() {\n        const items = this._sortedItems.filter(item => this._selection[item.name]);\n        if (!items.length) {\n            return;\n        }\n        const message = items.length === 1\n            ? this._trans.__('Are you sure you want to permanently delete: %1?', items[0].name)\n            : this._trans._n('Are you sure you want to permanently delete the %1 selected item?', 'Are you sure you want to permanently delete the %1 selected items?', items.length);\n        const result = await showDialog({\n            title: this._trans.__('Delete'),\n            body: message,\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Delete') })\n            ]\n        });\n        if (!this.isDisposed && result.button.accept) {\n            await this._delete(items.map(item => item.path));\n        }\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        const basePath = this._model.path;\n        const promises = [];\n        each(this.selectedItems(), item => {\n            if (item.type !== 'directory') {\n                const oldPath = PathExt.join(basePath, item.name);\n                promises.push(this._model.manager.copy(oldPath, basePath));\n            }\n        });\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Duplicate file'), error);\n        });\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    async download() {\n        await Promise.all(toArray(this.selectedItems())\n            .filter(item => item.type !== 'directory')\n            .map(item => this._model.download(item.path)));\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        const model = this._model;\n        const items = this._sortedItems;\n        const paths = items.map(item => item.path);\n        const promises = toArray(this._model.sessions())\n            .filter(session => {\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            return this._selection[items[index].name];\n        })\n            .map(session => model.manager.services.sessions.shutdown(session.id));\n        return Promise.all(promises)\n            .then(() => {\n            return undefined;\n        })\n            .catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Shut down kernel'), error);\n        });\n    }\n    /**\n     * Select next item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectNext(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this._selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the next item.\n            const name = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.name === name);\n            index += 1;\n            if (index === this._items.length) {\n                index = 0;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the first item.\n            index = 0;\n        }\n        else {\n            // Select the last selected item.\n            const name = selected[selected.length - 1];\n            index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select previous item.\n     *\n     * @param keepExisting - Whether to keep the current selection and add to it.\n     */\n    selectPrevious(keepExisting = false) {\n        let index = -1;\n        const selected = Object.keys(this._selection);\n        const items = this._sortedItems;\n        if (selected.length === 1 || keepExisting) {\n            // Select the previous item.\n            const name = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.name === name);\n            index -= 1;\n            if (index === -1) {\n                index = this._items.length - 1;\n            }\n        }\n        else if (selected.length === 0) {\n            // Select the last item.\n            index = this._items.length - 1;\n        }\n        else {\n            // Select the first selected item.\n            const name = selected[0];\n            index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        }\n        if (index !== -1) {\n            this._selectItem(index, keepExisting);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Select the first item that starts with prefix being typed.\n     */\n    selectByPrefix() {\n        const prefix = this._searchPrefix.toLowerCase();\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => {\n            return value.name.toLowerCase().substr(0, prefix.length) === prefix;\n        });\n        if (index !== -1) {\n            this._selectItem(index, false);\n            ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n        }\n    }\n    /**\n     * Get whether an item is selected by name.\n     *\n     * @param name - The name of of the item.\n     *\n     * @returns Whether the item is selected.\n     */\n    isSelected(name) {\n        return this._selection[name] === true;\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        if (index !== -1) {\n            return items[index];\n        }\n        return undefined;\n    }\n    /**\n     * Clear the selected items.\n     */\n    clearSelectedItems() {\n        this._selection = Object.create(null);\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     *\n     * @returns A promise that resolves when the name is selected.\n     */\n    async selectItemByName(name) {\n        // Make sure the file is available.\n        await this.model.refresh();\n        if (this.isDisposed) {\n            throw new Error('File browser is disposed.');\n        }\n        const items = this._sortedItems;\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        if (index === -1) {\n            throw new Error('Item does not exist.');\n        }\n        this._selectItem(index, false);\n        MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n        ElementExt.scrollIntoViewIfNeeded(this.contentNode, this._items[index]);\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'mousedown':\n                this._evtMousedown(event);\n                break;\n            case 'mouseup':\n                this._evtMouseup(event);\n                break;\n            case 'mousemove':\n                this._evtMousemove(event);\n                break;\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'dblclick':\n                this._evtDblClick(event);\n                break;\n            case 'dragenter':\n            case 'dragover':\n                this.addClass('jp-mod-native-drop');\n                event.preventDefault();\n                break;\n            case 'dragleave':\n            case 'dragend':\n                this.removeClass('jp-mod-native-drop');\n                break;\n            case 'drop':\n                this.removeClass('jp-mod-native-drop');\n                this._evtNativeDrop(event);\n                break;\n            case 'scroll':\n                this._evtScroll(event);\n                break;\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.addEventListener('mousedown', this);\n        node.addEventListener('keydown', this);\n        node.addEventListener('click', this);\n        node.addEventListener('dblclick', this);\n        content.addEventListener('dragenter', this);\n        content.addEventListener('dragover', this);\n        content.addEventListener('dragleave', this);\n        content.addEventListener('dragend', this);\n        content.addEventListener('drop', this);\n        content.addEventListener('scroll', this);\n        content.addEventListener('lm-dragenter', this);\n        content.addEventListener('lm-dragleave', this);\n        content.addEventListener('lm-dragover', this);\n        content.addEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'` message.\n     */\n    onBeforeDetach(msg) {\n        super.onBeforeDetach(msg);\n        const node = this.node;\n        const content = DOMUtils.findElement(node, CONTENT_CLASS);\n        node.removeEventListener('mousedown', this);\n        node.removeEventListener('keydown', this);\n        node.removeEventListener('click', this);\n        node.removeEventListener('dblclick', this);\n        content.removeEventListener('scroll', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragover', this);\n        content.removeEventListener('dragleave', this);\n        content.removeEventListener('dragend', this);\n        content.removeEventListener('drop', this);\n        content.removeEventListener('lm-dragenter', this);\n        content.removeEventListener('lm-dragleave', this);\n        content.removeEventListener('lm-dragover', this);\n        content.removeEventListener('lm-drop', this);\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._isDirty) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n            this.update();\n        }\n    }\n    /**\n     * A handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        this._isDirty = false;\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const nodes = this._items;\n        const content = DOMUtils.findElement(this.node, CONTENT_CLASS);\n        const renderer = this._renderer;\n        this.removeClass(MULTI_SELECTED_CLASS);\n        this.removeClass(SELECTED_CLASS);\n        // Remove any excess item nodes.\n        while (nodes.length > items.length) {\n            content.removeChild(nodes.pop());\n        }\n        // Add any missing item nodes.\n        while (nodes.length < items.length) {\n            const node = renderer.createItemNode();\n            node.classList.add(ITEM_CLASS);\n            nodes.push(node);\n            content.appendChild(node);\n        }\n        // Remove extra classes from the nodes.\n        nodes.forEach(item => {\n            item.classList.remove(SELECTED_CLASS);\n            item.classList.remove(RUNNING_CLASS);\n            item.classList.remove(CUT_CLASS);\n        });\n        // Add extra classes to item nodes based on widget state.\n        items.forEach((item, i) => {\n            const node = nodes[i];\n            const ft = this._manager.registry.getFileTypeForModel(item);\n            renderer.updateItemNode(node, item, ft, this.translator);\n            if (this._selection[item.name]) {\n                node.classList.add(SELECTED_CLASS);\n                if (this._isCut && this._model.path === this._prevPath) {\n                    node.classList.add(CUT_CLASS);\n                }\n            }\n            // add metadata to the node\n            node.setAttribute('data-isdir', item.type === 'directory' ? 'true' : 'false');\n        });\n        // Handle the selectors on the widget node.\n        const selected = Object.keys(this._selection).length;\n        if (selected) {\n            this.addClass(SELECTED_CLASS);\n            if (selected > 1) {\n                this.addClass(MULTI_SELECTED_CLASS);\n            }\n        }\n        // Handle file session statuses.\n        const paths = items.map(item => item.path);\n        each(this._model.sessions(), session => {\n            var _a;\n            const index = ArrayExt.firstIndexOf(paths, session.path);\n            const node = nodes[index];\n            // Node may have been filtered out.\n            if (node) {\n                let name = (_a = session.kernel) === null || _a === void 0 ? void 0 : _a.name;\n                const specs = this._model.specs;\n                node.classList.add(RUNNING_CLASS);\n                if (specs && name) {\n                    const spec = specs.kernelspecs[name];\n                    name = spec ? spec.display_name : 'unknown'; // FIXME-TRANS: Is this localizable?\n                }\n                node.title = this._trans.__('%1\\nKernel: %2', node.title, name);\n            }\n        });\n        this._prevPath = this._model.path;\n    }\n    onResize(msg) {\n        const { width } = msg.width === -1 ? this.node.getBoundingClientRect() : msg;\n        this.toggleClass('jp-DirListing-narrow', width < 250);\n    }\n    /**\n     * Handle the `'click'` event for the widget.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        const header = this.headerNode;\n        if (header.contains(target)) {\n            const state = this.renderer.handleHeaderClick(header, event);\n            if (state) {\n                this.sort(state);\n            }\n            return;\n        }\n    }\n    /**\n     * Handle the `'scroll'` event for the widget.\n     */\n    _evtScroll(event) {\n        this.headerNode.scrollLeft = this.contentNode.scrollLeft;\n    }\n    /**\n     * Handle the `'mousedown'` event for the widget.\n     */\n    _evtMousedown(event) {\n        // Bail if clicking within the edit node\n        if (event.target === this._editNode) {\n            return;\n        }\n        // Blur the edit node if necessary.\n        if (this._editNode.parentNode) {\n            if (this._editNode !== event.target) {\n                this._editNode.focus();\n                this._editNode.blur();\n                clearTimeout(this._selectTimer);\n            }\n            else {\n                return;\n            }\n        }\n        let index = Private.hitTestNodes(this._items, event);\n        if (index === -1) {\n            return;\n        }\n        this._handleFileSelect(event);\n        if (event.button !== 0) {\n            clearTimeout(this._selectTimer);\n        }\n        // Check for clearing a context menu.\n        const newContext = (IS_MAC && event.ctrlKey) || event.button === 2;\n        if (newContext) {\n            return;\n        }\n        // Left mouse press for drag start.\n        if (event.button === 0) {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: index\n            };\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseup(event) {\n        // Handle any soft selection from the previous mouse down.\n        if (this._softSelection) {\n            const altered = event.metaKey || event.shiftKey || event.ctrlKey;\n            // See if we need to clear the other selection.\n            if (!altered && event.button === 0) {\n                this.clearSelectedItems();\n                this._selection[this._softSelection] = true;\n                this.update();\n            }\n            this._softSelection = '';\n        }\n        // Remove the drag listeners if necessary.\n        if (event.button !== 0 || !this._drag) {\n            document.removeEventListener('mousemove', this, true);\n            document.removeEventListener('mouseup', this, true);\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'mousemove'` event for the widget.\n     */\n    _evtMousemove(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Bail if we are the one dragging.\n        if (this._drag || !this._dragData) {\n            return;\n        }\n        // Check for a drag initialization.\n        const data = this._dragData;\n        const dx = Math.abs(event.clientX - data.pressX);\n        const dy = Math.abs(event.clientY - data.pressY);\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\n            return;\n        }\n        this._startDrag(data.index, event.clientX, event.clientY);\n    }\n    /**\n     * Handle the opening of an item.\n     */\n    _handleOpen(item) {\n        this._onItemOpened.emit(item);\n        if (item.type === 'directory') {\n            const localPath = this._manager.services.contents.localPath(item.path);\n            this._model\n                .cd(`/${localPath}`)\n                .catch(error => showErrorMessage(this._trans._p('showErrorMessage', 'Open directory'), error));\n        }\n        else {\n            const path = item.path;\n            this._manager.openOrReveal(path);\n        }\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    _evtKeydown(event) {\n        switch (event.keyCode) {\n            case 13: {\n                // Enter\n                // Do nothing if any modifier keys are pressed.\n                if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n                const selected = Object.keys(this._selection);\n                const name = selected[0];\n                const items = this._sortedItems;\n                const i = ArrayExt.findFirstIndex(items, value => value.name === name);\n                if (i === -1) {\n                    return;\n                }\n                const item = this._sortedItems[i];\n                this._handleOpen(item);\n                break;\n            }\n            case 38: // Up arrow\n                this.selectPrevious(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            case 40: // Down arrow\n                this.selectNext(event.shiftKey);\n                event.stopPropagation();\n                event.preventDefault();\n                break;\n            default:\n                break;\n        }\n        // Detects printable characters typed by the user.\n        // Not all browsers support .key, but it discharges us from reconstructing\n        // characters from key codes.\n        if (!this._inRename && event.key !== undefined && event.key.length === 1) {\n            this._searchPrefix += event.key;\n            clearTimeout(this._searchPrefixTimer);\n            this._searchPrefixTimer = window.setTimeout(() => {\n                this._searchPrefix = '';\n            }, PREFIX_APPEND_DURATION);\n            this.selectByPrefix();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle the `'dblclick'` event for the widget.\n     */\n    _evtDblClick(event) {\n        // Do nothing if it's not a left mouse press.\n        if (event.button !== 0) {\n            return;\n        }\n        // Do nothing if any modifier keys are pressed.\n        if (event.ctrlKey || event.shiftKey || event.altKey || event.metaKey) {\n            return;\n        }\n        // Stop the event propagation.\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        this._editNode.blur();\n        // Find a valid double click target.\n        const target = event.target;\n        const i = ArrayExt.findFirstIndex(this._items, node => node.contains(target));\n        if (i === -1) {\n            return;\n        }\n        const item = this._sortedItems[i];\n        this._handleOpen(item);\n    }\n    /**\n     * Handle the `drop` event for the widget.\n     */\n    _evtNativeDrop(event) {\n        var _a;\n        const files = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files;\n        if (!files || files.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        for (let i = 0; i < files.length; i++) {\n            void this._model.upload(files[i]);\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (event.mimeData.hasData(CONTENTS_MIME)) {\n            const index = Private.hitTestNodes(this._items, event);\n            if (index === -1) {\n                return;\n            }\n            const item = this._sortedItems[index];\n            if (item.type !== 'directory' || this._selection[item.name]) {\n                return;\n            }\n            const target = event.target;\n            target.classList.add(DROP_TARGET_CLASS);\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n        const dropTarget = DOMUtils.findElement(this.node, DROP_TARGET_CLASS);\n        if (dropTarget) {\n            dropTarget.classList.remove(DROP_TARGET_CLASS);\n        }\n        const index = Private.hitTestNodes(this._items, event);\n        this._items[index].classList.add(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._selectTimer);\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        if (!event.mimeData.hasData(CONTENTS_MIME)) {\n            return;\n        }\n        let target = event.target;\n        while (target && target.parentElement) {\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\n                target.classList.remove(DROP_TARGET_CLASS);\n                break;\n            }\n            target = target.parentElement;\n        }\n        // Get the path based on the target node.\n        const index = ArrayExt.firstIndexOf(this._items, target);\n        const items = this._sortedItems;\n        let basePath = this._model.path;\n        if (items[index].type === 'directory') {\n            basePath = PathExt.join(basePath, items[index].name);\n        }\n        const manager = this._manager;\n        // Handle the items.\n        const promises = [];\n        const paths = event.mimeData.getData(CONTENTS_MIME);\n        if (event.ctrlKey && event.proposedAction === 'move') {\n            event.dropAction = 'copy';\n        }\n        else {\n            event.dropAction = event.proposedAction;\n        }\n        for (const path of paths) {\n            const localPath = manager.services.contents.localPath(path);\n            const name = PathExt.basename(localPath);\n            const newPath = PathExt.join(basePath, name);\n            // Skip files that are not moving.\n            if (newPath === path) {\n                continue;\n            }\n            if (event.dropAction === 'copy') {\n                promises.push(manager.copy(path, basePath));\n            }\n            else {\n                promises.push(renameFile(manager, path, newPath));\n            }\n        }\n        Promise.all(promises).catch(error => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Error while copying/moving files'), error);\n        });\n    }\n    /**\n     * Start a drag event.\n     */\n    _startDrag(index, clientX, clientY) {\n        let selectedNames = Object.keys(this._selection);\n        const source = this._items[index];\n        const items = this._sortedItems;\n        let selectedItems;\n        let item;\n        // If the source node is not selected, use just that node.\n        if (!source.classList.contains(SELECTED_CLASS)) {\n            item = items[index];\n            selectedNames = [item.name];\n            selectedItems = [item];\n        }\n        else {\n            const name = selectedNames[0];\n            item = find(items, value => value.name === name);\n            selectedItems = toArray(this.selectedItems());\n        }\n        if (!item) {\n            return;\n        }\n        // Create the drag image.\n        const ft = this._manager.registry.getFileTypeForModel(item);\n        const dragImage = this.renderer.createDragImage(source, selectedNames.length, this._trans, ft);\n        // Set up the drag event.\n        this._drag = new Drag({\n            dragImage,\n            mimeData: new MimeData(),\n            supportedActions: 'move',\n            proposedAction: 'move'\n        });\n        const basePath = this._model.path;\n        const paths = toArray(map(selectedNames, name => {\n            return PathExt.join(basePath, name);\n        }));\n        this._drag.mimeData.setData(CONTENTS_MIME, paths);\n        // Add thunks for getting mime data content.\n        // We thunk the content so we don't try to make a network call\n        // when it's not needed. E.g. just moving files around\n        // in a filebrowser\n        const services = this.model.manager.services;\n        for (const item of selectedItems) {\n            this._drag.mimeData.setData(CONTENTS_MIME_RICH, {\n                model: item,\n                withContent: async () => {\n                    return await services.contents.get(item.path);\n                }\n            });\n        }\n        if (item && item.type !== 'directory') {\n            const otherPaths = paths.slice(1).reverse();\n            this._drag.mimeData.setData(FACTORY_MIME, () => {\n                if (!item) {\n                    return;\n                }\n                const path = item.path;\n                let widget = this._manager.findWidget(path);\n                if (!widget) {\n                    widget = this._manager.open(item.path);\n                }\n                if (otherPaths.length) {\n                    const firstWidgetPlaced = new PromiseDelegate();\n                    void firstWidgetPlaced.promise.then(() => {\n                        let prevWidget = widget;\n                        otherPaths.forEach(path => {\n                            const options = {\n                                ref: prevWidget === null || prevWidget === void 0 ? void 0 : prevWidget.id,\n                                mode: 'tab-after'\n                            };\n                            prevWidget = this._manager.openOrReveal(path, void 0, void 0, options);\n                            this._manager.openOrReveal(item.path);\n                        });\n                    });\n                    firstWidgetPlaced.resolve(void 0);\n                }\n                return widget;\n            });\n        }\n        // Start the drag and remove the mousemove and mouseup listeners.\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        clearTimeout(this._selectTimer);\n        void this._drag.start(clientX, clientY).then(action => {\n            this._drag = null;\n            clearTimeout(this._selectTimer);\n        });\n    }\n    /**\n     * Handle selection on a file node.\n     */\n    _handleFileSelect(event) {\n        // Fetch common variables.\n        const items = this._sortedItems;\n        const index = Private.hitTestNodes(this._items, event);\n        clearTimeout(this._selectTimer);\n        if (index === -1) {\n            return;\n        }\n        // Clear any existing soft selection.\n        this._softSelection = '';\n        const name = items[index].name;\n        const selected = Object.keys(this._selection);\n        // Handle toggling.\n        if ((IS_MAC && event.metaKey) || (!IS_MAC && event.ctrlKey)) {\n            if (this._selection[name]) {\n                delete this._selection[name];\n            }\n            else {\n                this._selection[name] = true;\n            }\n            // Handle multiple select.\n        }\n        else if (event.shiftKey) {\n            this._handleMultiSelect(selected, index);\n            // Handle a 'soft' selection\n        }\n        else if (name in this._selection && selected.length > 1) {\n            this._softSelection = name;\n            // Default to selecting the only the item.\n        }\n        else {\n            // Select only the given item.\n            this.clearSelectedItems();\n            this._selection[name] = true;\n        }\n        this.update();\n    }\n    /**\n     * Handle a multiple select on a file item node.\n     */\n    _handleMultiSelect(selected, index) {\n        // Find the \"nearest selected\".\n        const items = this._sortedItems;\n        let nearestIndex = -1;\n        for (let i = 0; i < this._items.length; i++) {\n            if (i === index) {\n                continue;\n            }\n            const name = items[i].name;\n            if (selected.indexOf(name) !== -1) {\n                if (nearestIndex === -1) {\n                    nearestIndex = i;\n                }\n                else {\n                    if (Math.abs(index - i) < Math.abs(nearestIndex - i)) {\n                        nearestIndex = i;\n                    }\n                }\n            }\n        }\n        // Default to the first element (and fill down).\n        if (nearestIndex === -1) {\n            nearestIndex = 0;\n        }\n        // Select the rows between the current and the nearest selected.\n        for (let i = 0; i < this._items.length; i++) {\n            if ((nearestIndex >= i && index <= i) ||\n                (nearestIndex <= i && index >= i)) {\n                this._selection[items[i].name] = true;\n            }\n        }\n    }\n    /**\n     * Copy the selected items, and optionally cut as well.\n     */\n    _copy() {\n        this._clipboard.length = 0;\n        each(this.selectedItems(), item => {\n            this._clipboard.push(item.path);\n        });\n    }\n    /**\n     * Delete the files with the given paths.\n     */\n    async _delete(paths) {\n        await Promise.all(paths.map(path => this._model.manager.deleteFile(path).catch(err => {\n            void showErrorMessage(this._trans._p('showErrorMessage', 'Delete Failed'), err);\n        })));\n    }\n    /**\n     * Allow the user to rename item on a given row.\n     */\n    _doRename() {\n        this._inRename = true;\n        const items = this._sortedItems;\n        const name = Object.keys(this._selection)[0];\n        const index = ArrayExt.findFirstIndex(items, value => value.name === name);\n        const row = this._items[index];\n        const item = items[index];\n        const nameNode = this.renderer.getNameNode(row);\n        const original = item.name;\n        this._editNode.value = original;\n        this._selectItem(index, false);\n        return Private.doRename(nameNode, this._editNode).then(newName => {\n            this.node.focus();\n            if (!newName || newName === original) {\n                this._inRename = false;\n                return original;\n            }\n            if (!isValidFileName(newName)) {\n                void showErrorMessage(this._trans.__('showErrorMessage', 'Rename Error'), Error(this._trans._p('showErrorMessage', '\"%1\" is not a valid name for a file. Names must have nonzero length, and cannot include \"/\", \"\\\\\", or \":\"', newName)));\n                this._inRename = false;\n                return original;\n            }\n            if (this.isDisposed) {\n                this._inRename = false;\n                throw new Error('File browser is disposed.');\n            }\n            const manager = this._manager;\n            const oldPath = PathExt.join(this._model.path, original);\n            const newPath = PathExt.join(this._model.path, newName);\n            const promise = renameFile(manager, oldPath, newPath);\n            return promise\n                .catch(error => {\n                if (error !== 'File not renamed') {\n                    void showErrorMessage(this._trans._p('showErrorMessage', 'Rename Error'), error);\n                }\n                this._inRename = false;\n                return original;\n            })\n                .then(() => {\n                if (this.isDisposed) {\n                    this._inRename = false;\n                    throw new Error('File browser is disposed.');\n                }\n                if (this._inRename) {\n                    // No need to catch because `newName` will always exit.\n                    void this.selectItemByName(newName);\n                }\n                this._inRename = false;\n                return newName;\n            });\n        });\n    }\n    /**\n     * Select a given item.\n     */\n    _selectItem(index, keepExisting) {\n        // Selected the given row(s)\n        const items = this._sortedItems;\n        if (!keepExisting) {\n            this.clearSelectedItems();\n        }\n        const name = items[index].name;\n        this._selection[name] = true;\n        this.update();\n    }\n    /**\n     * Handle the `refreshed` signal from the model.\n     */\n    _onModelRefreshed() {\n        // Update the selection.\n        const existing = Object.keys(this._selection);\n        this.clearSelectedItems();\n        each(this._model.items(), item => {\n            const name = item.name;\n            if (existing.indexOf(name) !== -1) {\n                this._selection[name] = true;\n            }\n        });\n        if (this.isVisible) {\n            // Update the sorted items.\n            this.sort(this.sortState);\n        }\n        else {\n            this._isDirty = true;\n        }\n    }\n    /**\n     * Handle a `pathChanged` signal from the model.\n     */\n    _onPathChanged() {\n        // Reset the selection.\n        this.clearSelectedItems();\n        // Update the sorted items.\n        this.sort(this.sortState);\n    }\n    /**\n     * Handle a `fileChanged` signal from the model.\n     */\n    _onFileChanged(sender, args) {\n        const newValue = args.newValue;\n        if (!newValue) {\n            return;\n        }\n        const name = newValue.name;\n        if (args.type !== 'new' || !name) {\n            return;\n        }\n        void this.selectItemByName(name)\n            .then(() => {\n            if (!this.isDisposed && newValue.type === 'directory') {\n                return this._doRename();\n            }\n        })\n            .catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n    /**\n     * Handle an `activateRequested` signal from the manager.\n     */\n    _onActivateRequested(sender, args) {\n        const dirname = PathExt.dirname(args);\n        if (dirname !== this._model.path) {\n            return;\n        }\n        const basename = PathExt.basename(args);\n        this.selectItemByName(basename).catch(() => {\n            /* Ignore if file does not exist. */\n        });\n    }\n}\n/**\n * The namespace for the `DirListing` class statics.\n */\n(function (DirListing) {\n    /**\n     * The default implementation of an `IRenderer`.\n     */\n    class Renderer {\n        /**\n         * Create the DOM node for a dir listing.\n         */\n        createNode() {\n            const node = document.createElement('div');\n            const header = document.createElement('div');\n            const content = document.createElement('ul');\n            content.className = CONTENT_CLASS;\n            header.className = HEADER_CLASS;\n            node.appendChild(header);\n            node.appendChild(content);\n            node.tabIndex = 1;\n            return node;\n        }\n        /**\n         * Populate and empty header node for a dir listing.\n         *\n         * @param node - The header node to populate.\n         */\n        populateHeaderNode(node, translator) {\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const name = this._createHeaderItemNode(trans.__('Name'));\n            const narrow = document.createElement('div');\n            const modified = this._createHeaderItemNode(trans.__('Last Modified'));\n            name.classList.add(NAME_ID_CLASS);\n            name.classList.add(SELECTED_CLASS);\n            modified.classList.add(MODIFIED_ID_CLASS);\n            narrow.classList.add(NARROW_ID_CLASS);\n            narrow.textContent = '...';\n            node.appendChild(name);\n            node.appendChild(narrow);\n            node.appendChild(modified);\n            // set the initial caret icon\n            Private.updateCaret(DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS), 'right', 'up');\n        }\n        /**\n         * Handle a header click.\n         *\n         * @param node - A node populated by [[populateHeaderNode]].\n         *\n         * @param event - A click event on the node.\n         *\n         * @returns The sort state of the header after the click event.\n         */\n        handleHeaderClick(node, event) {\n            const name = DOMUtils.findElement(node, NAME_ID_CLASS);\n            const modified = DOMUtils.findElement(node, MODIFIED_ID_CLASS);\n            const state = { direction: 'ascending', key: 'name' };\n            const target = event.target;\n            if (name.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                if (name.classList.contains(SELECTED_CLASS)) {\n                    if (!name.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        name.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'down');\n                    }\n                    else {\n                        name.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(nameIcon, 'right', 'up');\n                    }\n                }\n                else {\n                    name.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(nameIcon, 'right', 'up');\n                }\n                name.classList.add(SELECTED_CLASS);\n                modified.classList.remove(SELECTED_CLASS);\n                modified.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(modifiedIcon, 'left');\n                return state;\n            }\n            if (modified.contains(target)) {\n                const modifiedIcon = DOMUtils.findElement(modified, HEADER_ITEM_ICON_CLASS);\n                const nameIcon = DOMUtils.findElement(name, HEADER_ITEM_ICON_CLASS);\n                state.key = 'last_modified';\n                if (modified.classList.contains(SELECTED_CLASS)) {\n                    if (!modified.classList.contains(DESCENDING_CLASS)) {\n                        state.direction = 'descending';\n                        modified.classList.add(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'down');\n                    }\n                    else {\n                        modified.classList.remove(DESCENDING_CLASS);\n                        Private.updateCaret(modifiedIcon, 'left', 'up');\n                    }\n                }\n                else {\n                    modified.classList.remove(DESCENDING_CLASS);\n                    Private.updateCaret(modifiedIcon, 'left', 'up');\n                }\n                modified.classList.add(SELECTED_CLASS);\n                name.classList.remove(SELECTED_CLASS);\n                name.classList.remove(DESCENDING_CLASS);\n                Private.updateCaret(nameIcon, 'right');\n                return state;\n            }\n            return state;\n        }\n        /**\n         * Create a new item node for a dir listing.\n         *\n         * @returns A new DOM node to use as a content item.\n         */\n        createItemNode() {\n            const node = document.createElement('li');\n            const icon = document.createElement('span');\n            const text = document.createElement('span');\n            const modified = document.createElement('span');\n            icon.className = ITEM_ICON_CLASS;\n            text.className = ITEM_TEXT_CLASS;\n            modified.className = ITEM_MODIFIED_CLASS;\n            node.appendChild(icon);\n            node.appendChild(text);\n            node.appendChild(modified);\n            return node;\n        }\n        /**\n         * Update an item node to reflect the current state of a model.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param model - The model object to use for the item state.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         */\n        updateItemNode(node, model, fileType, translator) {\n            translator = translator || nullTranslator;\n            fileType =\n                fileType || DocumentRegistry.getDefaultTextFileType(translator);\n            const { icon, iconClass, name } = fileType;\n            translator = translator || nullTranslator;\n            const trans = translator.load('jupyterlab');\n            const iconContainer = DOMUtils.findElement(node, ITEM_ICON_CLASS);\n            const text = DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n            const modified = DOMUtils.findElement(node, ITEM_MODIFIED_CLASS);\n            // render the file item's icon\n            LabIcon.resolveElement({\n                icon,\n                iconClass: classes(iconClass, 'jp-Icon'),\n                container: iconContainer,\n                className: ITEM_ICON_CLASS,\n                stylesheet: 'listing'\n            });\n            let hoverText = trans.__('Name: %1', model.name);\n            // add file size to pop up if its available\n            if (model.size !== null && model.size !== undefined) {\n                hoverText += trans.__('\\nSize: %1', Private.formatFileSize(model.size, 1, 1024));\n            }\n            if (model.path) {\n                const dirname = PathExt.dirname(model.path);\n                if (dirname) {\n                    hoverText += trans.__('\\nPath: %1', dirname.substr(0, 50));\n                    if (dirname.length > 50) {\n                        hoverText += '...';\n                    }\n                }\n            }\n            if (model.created) {\n                hoverText += trans.__('\\nCreated: %1', Time.format(new Date(model.created), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            if (model.last_modified) {\n                hoverText += trans.__('\\nModified: %1', Time.format(new Date(model.last_modified), 'YYYY-MM-DD HH:mm:ss'));\n            }\n            hoverText += trans.__('\\nWritable: %1', model.writable);\n            node.title = hoverText;\n            node.setAttribute('data-file-type', name);\n            if (model.name.startsWith('.')) {\n                node.setAttribute('data-is-dot', 'true');\n            }\n            else {\n                node.removeAttribute('data-is-dot');\n            }\n            // If an item is being edited currently, its text node is unavailable.\n            if (text) {\n                const indices = !model.indices ? [] : model.indices;\n                let highlightedName = StringExt.highlight(model.name, indices, h.mark);\n                VirtualDOM.render(h.span(highlightedName), text);\n            }\n            let modText = '';\n            let modTitle = '';\n            if (model.last_modified) {\n                modText = Time.formatHuman(new Date(model.last_modified));\n                modTitle = Time.format(new Date(model.last_modified), 'lll');\n            }\n            modified.textContent = modText;\n            modified.title = modTitle;\n        }\n        /**\n         * Get the node containing the file name.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @returns The node containing the file name.\n         */\n        getNameNode(node) {\n            return DOMUtils.findElement(node, ITEM_TEXT_CLASS);\n        }\n        /**\n         * Create a drag image for an item.\n         *\n         * @param node - A node created by [[createItemNode]].\n         *\n         * @param count - The number of items being dragged.\n         *\n         * @param fileType - The file type of the item, if applicable.\n         *\n         * @returns An element to use as the drag image.\n         */\n        createDragImage(node, count, trans, fileType) {\n            const dragImage = node.cloneNode(true);\n            const modified = DOMUtils.findElement(dragImage, ITEM_MODIFIED_CLASS);\n            const icon = DOMUtils.findElement(dragImage, ITEM_ICON_CLASS);\n            dragImage.removeChild(modified);\n            if (!fileType) {\n                icon.textContent = '';\n                icon.className = '';\n            }\n            else {\n                icon.textContent = fileType.iconLabel || '';\n                icon.className = fileType.iconClass || '';\n            }\n            icon.classList.add(DRAG_ICON_CLASS);\n            if (count > 1) {\n                const nameNode = DOMUtils.findElement(dragImage, ITEM_TEXT_CLASS);\n                nameNode.textContent = trans._n('%1 Item', '%1 Items', count);\n            }\n            return dragImage;\n        }\n        /**\n         * Create a node for a header item.\n         */\n        _createHeaderItemNode(label) {\n            const node = document.createElement('div');\n            const text = document.createElement('span');\n            const icon = document.createElement('span');\n            node.className = HEADER_ITEM_CLASS;\n            text.className = HEADER_ITEM_TEXT_CLASS;\n            icon.className = HEADER_ITEM_ICON_CLASS;\n            text.textContent = label;\n            node.appendChild(text);\n            node.appendChild(icon);\n            return node;\n        }\n    }\n    DirListing.Renderer = Renderer;\n    /**\n     * The default `IRenderer` instance.\n     */\n    DirListing.defaultRenderer = new Renderer();\n})(DirListing || (DirListing = {}));\n/**\n * The namespace for the listing private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Handle editing text on a node.\n     *\n     * @returns Boolean indicating whether the name changed.\n     */\n    function doRename(text, edit) {\n        const parent = text.parentElement;\n        parent.replaceChild(edit, text);\n        edit.focus();\n        const index = edit.value.lastIndexOf('.');\n        if (index === -1) {\n            edit.setSelectionRange(0, edit.value.length);\n        }\n        else {\n            edit.setSelectionRange(0, index);\n        }\n        return new Promise((resolve, reject) => {\n            edit.onblur = () => {\n                parent.replaceChild(text, edit);\n                resolve(edit.value);\n            };\n            edit.onkeydown = (event) => {\n                switch (event.keyCode) {\n                    case 13: // Enter\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 27: // Escape\n                        event.stopPropagation();\n                        event.preventDefault();\n                        edit.blur();\n                        break;\n                    case 38: // Up arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = 0;\n                        }\n                        break;\n                    case 40: // Down arrow\n                        event.stopPropagation();\n                        event.preventDefault();\n                        if (edit.selectionStart !== edit.selectionEnd) {\n                            edit.selectionStart = edit.selectionEnd = edit.value.length;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            };\n        });\n    }\n    Private.doRename = doRename;\n    /**\n     * Sort a list of items by sort state as a new array.\n     */\n    function sort(items, state) {\n        const copy = toArray(items);\n        const reverse = state.direction === 'descending' ? 1 : -1;\n        if (state.key === 'last_modified') {\n            // Sort by last modified (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                const valA = new Date(a.last_modified).getTime();\n                const valB = new Date(b.last_modified).getTime();\n                return t1 - t2 || (valA - valB) * reverse;\n            });\n        }\n        else {\n            // Sort by name (grouping directories first)\n            copy.sort((a, b) => {\n                const t1 = a.type === 'directory' ? 0 : 1;\n                const t2 = b.type === 'directory' ? 0 : 1;\n                return t1 - t2 || b.name.localeCompare(a.name) * reverse;\n            });\n        }\n        return copy;\n    }\n    Private.sort = sort;\n    /**\n     * Get the index of the node at a client position, or `-1`.\n     */\n    function hitTestNodes(nodes, event) {\n        return ArrayExt.findFirstIndex(nodes, node => ElementExt.hitTest(node, event.clientX, event.clientY) ||\n            event.target === node);\n    }\n    Private.hitTestNodes = hitTestNodes;\n    /**\n     * Format bytes to human readable string.\n     */\n    function formatFileSize(bytes, decimalPoint, k) {\n        // https://www.codexworld.com/how-to/convert-file-size-bytes-kb-mb-gb-javascript/\n        if (bytes === 0) {\n            return '0 Bytes';\n        }\n        const dm = decimalPoint || 2;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        if (i >= 0 && i < sizes.length) {\n            return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n        }\n        else {\n            return String(bytes);\n        }\n    }\n    Private.formatFileSize = formatFileSize;\n    /**\n     * Update an inline svg caret icon in a node.\n     */\n    function updateCaret(container, float, state) {\n        if (state) {\n            (state === 'down' ? caretDownIcon : caretUpIcon).element({\n                container,\n                tag: 'span',\n                stylesheet: 'listingHeaderItem',\n                float\n            });\n        }\n        else {\n            LabIcon.remove(container);\n            container.className = HEADER_ITEM_ICON_CLASS;\n        }\n    }\n    Private.updateCaret = updateCaret;\n})(Private || (Private = {}));\n//# sourceMappingURL=listing.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ToolbarButton, showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { fileUploadIcon } from '@jupyterlab/ui-components';\n/**\n * A widget which provides an upload button.\n */\nexport class Uploader extends ToolbarButton {\n    /**\n     * Construct a new file browser buttons widget.\n     */\n    constructor(options) {\n        super({\n            icon: fileUploadIcon,\n            onClick: () => {\n                this._input.click();\n            },\n            tooltip: Private.translateToolTip(options.translator)\n        });\n        /**\n         * The 'change' handler for the input field.\n         */\n        this._onInputChanged = () => {\n            const files = Array.prototype.slice.call(this._input.files);\n            const pending = files.map(file => this.fileBrowserModel.upload(file));\n            void Promise.all(pending).catch(error => {\n                void showErrorMessage(this._trans._p('showErrorMessage', 'Upload Error'), error);\n            });\n        };\n        /**\n         * The 'click' handler for the input field.\n         */\n        this._onInputClicked = () => {\n            // In order to allow repeated uploads of the same file (with delete in between),\n            // we need to clear the input value to trigger a change event.\n            this._input.value = '';\n        };\n        this._input = Private.createUploadInput();\n        this.fileBrowserModel = options.model;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._input.onclick = this._onInputClicked;\n        this._input.onchange = this._onInputChanged;\n        this.addClass('jp-id-upload');\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the upload input node for a file buttons widget.\n     */\n    function createUploadInput() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.multiple = true;\n        return input;\n    }\n    Private.createUploadInput = createUploadInput;\n    /**\n     * Translate upload tooltip.\n     */\n    function translateToolTip(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return trans.__('Upload Files');\n    }\n    Private.translateToolTip = translateToolTip;\n})(Private || (Private = {}));\n//# sourceMappingURL=upload.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport React, { useState, useEffect } from 'react';\nimport { StringExt } from '@lumino/algorithm';\nimport { InputGroup } from '@jupyterlab/ui-components';\nimport { ReactWidget } from '@jupyterlab/apputils';\n/**\n * Perform a fuzzy search on a single item.\n */\nfunction fuzzySearch(source, query) {\n    // Set up the match score and indices array.\n    let score = Infinity;\n    let indices = null;\n    // The regex for search word boundaries\n    const rgx = /\\b\\w/g;\n    let continueSearch = true;\n    // Search the source by word boundary.\n    while (continueSearch) {\n        // Find the next word boundary in the source.\n        let rgxMatch = rgx.exec(source);\n        // Break if there is no more source context.\n        if (!rgxMatch) {\n            break;\n        }\n        // Run the string match on the relevant substring.\n        let match = StringExt.matchSumOfDeltas(source, query, rgxMatch.index);\n        // Break if there is no match.\n        if (!match) {\n            break;\n        }\n        // Update the match if the score is better.\n        if (match && match.score <= score) {\n            score = match.score;\n            indices = match.indices;\n        }\n    }\n    // Bail if there was no match.\n    if (!indices || score === Infinity) {\n        return null;\n    }\n    // Handle a split match.\n    return {\n        score,\n        indices\n    };\n}\nconst FilterBox = (props) => {\n    const [filter, setFilter] = useState('');\n    if (props.forceRefresh) {\n        useEffect(() => {\n            props.listing.model.setFilter((item) => {\n                return true;\n            });\n        }, []);\n    }\n    /**\n     * Handler for search input changes.\n     */\n    const handleChange = (e) => {\n        const target = e.target;\n        setFilter(target.value);\n        props.listing.model.setFilter((item) => {\n            if (props.useFuzzyFilter) {\n                // Run the fuzzy search for the item and query.\n                const name = item.name.toLowerCase();\n                const query = target.value.toLowerCase();\n                let score = fuzzySearch(name, query);\n                // Ignore the item if it is not a match.\n                if (!score) {\n                    item.indices = [];\n                    return false;\n                }\n                item.indices = score.indices;\n                return true;\n            }\n            const i = item.name.indexOf(target.value);\n            if (i === -1) {\n                item.indices = [];\n                return false;\n            }\n            item.indices = [...Array(target.value.length).keys()].map(x => x + i);\n            return true;\n        });\n    };\n    return (React.createElement(InputGroup, { type: \"text\", rightIcon: \"ui-components:search\", placeholder: props.placeholder, onChange: handleChange, value: filter }));\n};\n/**\n * A widget which hosts a input textbox to filter on file names.\n */\nexport const FilenameSearcher = (props) => {\n    return ReactWidget.create(React.createElement(FilterBox, { listing: props.listing, useFuzzyFilter: props.useFuzzyFilter, placeholder: props.placeholder, forceRefresh: props.forceRefresh }));\n};\n//# sourceMappingURL=search.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage, Toolbar, ToolbarButton } from '@jupyterlab/apputils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { newFolderIcon, refreshIcon } from '@jupyterlab/ui-components';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { BreadCrumbs } from './crumbs';\nimport { DirListing } from './listing';\nimport { Uploader } from './upload';\nimport { FilenameSearcher } from './search';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to file browsers.\n */\nconst FILE_BROWSER_CLASS = 'jp-FileBrowser';\n/**\n * The class name added to the filebrowser crumbs node.\n */\nconst CRUMBS_CLASS = 'jp-FileBrowser-crumbs';\n/**\n * The class name added to the filebrowser filterbox node.\n */\nconst FILTERBOX_CLASS = 'jp-FileBrowser-filterBox';\n/**\n * The class name added to the filebrowser toolbar node.\n */\nconst TOOLBAR_CLASS = 'jp-FileBrowser-toolbar';\n/**\n * The class name added to the filebrowser listing node.\n */\nconst LISTING_CLASS = 'jp-FileBrowser-listing';\n/**\n * A widget which hosts a file browser.\n *\n * The widget uses the Jupyter Contents API to retrieve contents,\n * and presents itself as a flat list of files and directories with\n * breadcrumbs.\n */\nexport class FileBrowser extends Widget {\n    /**\n     * Construct a new file browser.\n     *\n     * @param model - The file browser view model.\n     */\n    constructor(options) {\n        super();\n        this._useFuzzyFilter = true;\n        this.addClass(FILE_BROWSER_CLASS);\n        this.id = options.id;\n        const model = (this.model = options.model);\n        const renderer = options.renderer;\n        const translator = this.translator;\n        model.connectionFailure.connect(this._onConnectionFailure, this);\n        this.translator = options.translator || nullTranslator;\n        this._manager = model.manager;\n        this._trans = this.translator.load('jupyterlab');\n        this._crumbs = new BreadCrumbs({ model, translator });\n        this.toolbar = new Toolbar();\n        this._directoryPending = false;\n        const newFolder = new ToolbarButton({\n            icon: newFolderIcon,\n            onClick: () => {\n                this.createNewDirectory();\n            },\n            tooltip: this._trans.__('New Folder')\n        });\n        const uploader = new Uploader({ model, translator: this.translator });\n        const refresher = new ToolbarButton({\n            icon: refreshIcon,\n            onClick: () => {\n                void model.refresh();\n            },\n            tooltip: this._trans.__('Refresh File List')\n        });\n        this.toolbar.addItem('newFolder', newFolder);\n        this.toolbar.addItem('upload', uploader);\n        this.toolbar.addItem('refresher', refresher);\n        this._listing = new DirListing({\n            model,\n            renderer,\n            translator: this.translator\n        });\n        this._filenameSearcher = FilenameSearcher({\n            listing: this._listing,\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name')\n        });\n        this._crumbs.addClass(CRUMBS_CLASS);\n        this.toolbar.addClass(TOOLBAR_CLASS);\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this._listing.addClass(LISTING_CLASS);\n        this.layout = new PanelLayout();\n        this.layout.addWidget(this.toolbar);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this._crumbs);\n        this.layout.addWidget(this._listing);\n        if (options.restore !== false) {\n            void model.restore(this.id);\n        }\n    }\n    /**\n     * Whether to show active file in file browser\n     */\n    get navigateToCurrentDirectory() {\n        return this._navigateToCurrentDirectory;\n    }\n    set navigateToCurrentDirectory(value) {\n        this._navigateToCurrentDirectory = value;\n    }\n    /**\n     * Whether to use fuzzy filtering on file names.\n     */\n    set useFuzzyFilter(value) {\n        this._useFuzzyFilter = value;\n        this._filenameSearcher = FilenameSearcher({\n            listing: this._listing,\n            useFuzzyFilter: this._useFuzzyFilter,\n            placeholder: this._trans.__('Filter files by name'),\n            forceRefresh: true\n        });\n        this._filenameSearcher.addClass(FILTERBOX_CLASS);\n        this.layout.removeWidget(this._filenameSearcher);\n        this.layout.removeWidget(this._crumbs);\n        this.layout.removeWidget(this._listing);\n        this.layout.addWidget(this._filenameSearcher);\n        this.layout.addWidget(this._crumbs);\n        this.layout.addWidget(this._listing);\n    }\n    /**\n     * Create an iterator over the listing's selected items.\n     *\n     * @returns A new iterator over the listing's selected items.\n     */\n    selectedItems() {\n        return this._listing.selectedItems();\n    }\n    /**\n     * Select an item by name.\n     *\n     * @param name - The name of the item to select.\n     */\n    async selectItemByName(name) {\n        await this._listing.selectItemByName(name);\n    }\n    clearSelectedItems() {\n        this._listing.clearSelectedItems();\n    }\n    /**\n     * Rename the first currently selected item.\n     *\n     * @returns A promise that resolves with the new name of the item.\n     */\n    rename() {\n        return this._listing.rename();\n    }\n    /**\n     * Cut the selected items.\n     */\n    cut() {\n        this._listing.cut();\n    }\n    /**\n     * Copy the selected items.\n     */\n    copy() {\n        this._listing.copy();\n    }\n    /**\n     * Paste the items from the clipboard.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    paste() {\n        return this._listing.paste();\n    }\n    /**\n     * Create a new directory\n     */\n    createNewDirectory() {\n        if (this._directoryPending === true) {\n            return;\n        }\n        this._directoryPending = true;\n        // TODO: We should provide a hook into when the\n        // directory is done being created. This probably\n        // means storing a pendingDirectory promise and\n        // returning that if there is already a directory\n        // request.\n        void this._manager\n            .newUntitled({\n            path: this.model.path,\n            type: 'directory'\n        })\n            .then(async (model) => {\n            await this._listing.selectItemByName(model.name);\n            this._directoryPending = false;\n        })\n            .catch(err => {\n            this._directoryPending = false;\n        });\n    }\n    /**\n     * Delete the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    delete() {\n        return this._listing.delete();\n    }\n    /**\n     * Duplicate the currently selected item(s).\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    duplicate() {\n        return this._listing.duplicate();\n    }\n    /**\n     * Download the currently selected item(s).\n     */\n    download() {\n        return this._listing.download();\n    }\n    /**\n     * Shut down kernels on the applicable currently selected items.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdownKernels() {\n        return this._listing.shutdownKernels();\n    }\n    /**\n     * Select next item.\n     */\n    selectNext() {\n        this._listing.selectNext();\n    }\n    /**\n     * Select previous item.\n     */\n    selectPrevious() {\n        this._listing.selectPrevious();\n    }\n    /**\n     * Find a model given a click.\n     *\n     * @param event - The mouse event.\n     *\n     * @returns The model for the selected file.\n     */\n    modelForClick(event) {\n        return this._listing.modelForClick(event);\n    }\n    /**\n     * Handle a connection lost signal from the model.\n     */\n    _onConnectionFailure(sender, args) {\n        if (args instanceof ServerConnection.ResponseError &&\n            args.response.status === 404) {\n            const title = this._trans.__('Directory not found');\n            args.message = this._trans.__('Directory not found: \"%1\"', this.model.path);\n            void showErrorMessage(title, args);\n        }\n    }\n}\n//# sourceMappingURL=browser.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The path tracker token.\n */\nexport const IFileBrowserFactory = new Token('@jupyterlab/filebrowser:IFileBrowserFactory');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\nimport { PathExt, PageConfig } from '@jupyterlab/coreutils';\nimport { shouldOverwrite } from '@jupyterlab/docmanager';\nimport { ArrayIterator, each, find, ArrayExt, filter } from '@lumino/algorithm';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The default duration of the auto-refresh in ms\n */\nconst DEFAULT_REFRESH_INTERVAL = 10000;\n/**\n * The maximum upload size (in bytes) for notebook version < 5.1.0\n */\nexport const LARGE_FILE_SIZE = 15 * 1024 * 1024;\n/**\n * The size (in bytes) of the biggest chunk we should upload at once.\n */\nexport const CHUNK_SIZE = 1024 * 1024;\n/**\n * An implementation of a file browser model.\n *\n * #### Notes\n * All paths parameters without a leading `'/'` are interpreted as relative to\n * the current directory.  Supports `'../'` syntax.\n */\nexport class FileBrowserModel {\n    /**\n     * Construct a new file browser model.\n     */\n    constructor(options) {\n        var _a;\n        this._connectionFailure = new Signal(this);\n        this._fileChanged = new Signal(this);\n        this._items = [];\n        this._key = '';\n        this._pathChanged = new Signal(this);\n        this._paths = new Set();\n        this._pending = null;\n        this._pendingPath = null;\n        this._refreshed = new Signal(this);\n        this._sessions = [];\n        this._state = null;\n        this._isDisposed = false;\n        this._restored = new PromiseDelegate();\n        this._uploads = [];\n        this._uploadChanged = new Signal(this);\n        this.manager = options.manager;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._driveName = options.driveName || '';\n        const rootPath = this._driveName ? this._driveName + ':' : '';\n        this._model = {\n            path: rootPath,\n            name: PathExt.basename(rootPath),\n            type: 'directory',\n            content: undefined,\n            writable: false,\n            created: 'unknown',\n            last_modified: 'unknown',\n            mimetype: 'text/plain',\n            format: 'text'\n        };\n        this._state = options.state || null;\n        const refreshInterval = options.refreshInterval || DEFAULT_REFRESH_INTERVAL;\n        const { services } = options.manager;\n        services.contents.fileChanged.connect(this._onFileChanged, this);\n        services.sessions.runningChanged.connect(this._onRunningChanged, this);\n        this._unloadEventListener = (e) => {\n            if (this._uploads.length > 0) {\n                const confirmationMessage = this._trans.__('Files still uploading');\n                e.returnValue = confirmationMessage;\n                return confirmationMessage;\n            }\n        };\n        window.addEventListener('beforeunload', this._unloadEventListener);\n        this._poll = new Poll({\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            name: '@jupyterlab/filebrowser:Model',\n            factory: () => this.cd('.'),\n            frequency: {\n                interval: refreshInterval,\n                backoff: true,\n                max: 300 * 1000\n            },\n            standby: 'when-hidden'\n        });\n    }\n    /**\n     * A signal emitted when the file browser model loses connection.\n     */\n    get connectionFailure() {\n        return this._connectionFailure;\n    }\n    /**\n     * The drive name that gets prepended to the path.\n     */\n    get driveName() {\n        return this._driveName;\n    }\n    /**\n     * A promise that resolves when the model is first restored.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Get the file path changed signal.\n     */\n    get fileChanged() {\n        return this._fileChanged;\n    }\n    /**\n     * Get the current path.\n     */\n    get path() {\n        return this._model ? this._model.path : '';\n    }\n    /**\n     * A signal emitted when the path changes.\n     */\n    get pathChanged() {\n        return this._pathChanged;\n    }\n    /**\n     * A signal emitted when the directory listing is refreshed.\n     */\n    get refreshed() {\n        return this._refreshed;\n    }\n    /**\n     * Get the kernel spec models.\n     */\n    get specs() {\n        return this.manager.services.kernelspecs.specs;\n    }\n    /**\n     * Get whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when an upload progresses.\n     */\n    get uploadChanged() {\n        return this._uploadChanged;\n    }\n    /**\n     * Create an iterator over the status of all in progress uploads.\n     */\n    uploads() {\n        return new ArrayIterator(this._uploads);\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        window.removeEventListener('beforeunload', this._unloadEventListener);\n        this._isDisposed = true;\n        this._poll.dispose();\n        this._sessions.length = 0;\n        this._items.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Create an iterator over the model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return new ArrayIterator(this._items);\n    }\n    /**\n     * Create an iterator over the active sessions in the directory.\n     *\n     * @returns A new iterator over the model's active sessions.\n     */\n    sessions() {\n        return new ArrayIterator(this._sessions);\n    }\n    /**\n     * Force a refresh of the directory contents.\n     */\n    async refresh() {\n        await this._poll.refresh();\n        await this._poll.tick;\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Change directory.\n     *\n     * @param path - The path to the file or directory.\n     *\n     * @returns A promise with the contents of the directory.\n     */\n    async cd(newValue = '.') {\n        if (newValue !== '.') {\n            newValue = this.manager.services.contents.resolvePath(this._model.path, newValue);\n        }\n        else {\n            newValue = this._pendingPath || this._model.path;\n        }\n        if (this._pending) {\n            // Collapse requests to the same directory.\n            if (newValue === this._pendingPath) {\n                return this._pending;\n            }\n            // Otherwise wait for the pending request to complete before continuing.\n            await this._pending;\n        }\n        const oldValue = this.path;\n        const options = { content: true };\n        this._pendingPath = newValue;\n        if (oldValue !== newValue) {\n            this._sessions.length = 0;\n        }\n        const services = this.manager.services;\n        this._pending = services.contents\n            .get(newValue, options)\n            .then(contents => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._handleContents(contents);\n            this._pendingPath = null;\n            this._pending = null;\n            if (oldValue !== newValue) {\n                // If there is a state database and a unique key, save the new path.\n                // We don't need to wait on the save to continue.\n                if (this._state && this._key) {\n                    void this._state.save(this._key, { path: newValue });\n                }\n                this._pathChanged.emit({\n                    name: 'path',\n                    oldValue,\n                    newValue\n                });\n            }\n            this._onRunningChanged(services.sessions, services.sessions.running());\n            this._refreshed.emit(void 0);\n        })\n            .catch(error => {\n            this._pendingPath = null;\n            this._pending = null;\n            if (error.response && error.response.status === 404) {\n                error.message = this._trans.__('Directory not found: \"%1\"', this._model.path);\n                console.error(error);\n                this._connectionFailure.emit(error);\n                return this.cd('/');\n            }\n            else {\n                this._connectionFailure.emit(error);\n            }\n        });\n        return this._pending;\n    }\n    /**\n     * Download a file.\n     *\n     * @param path - The path of the file to be downloaded.\n     *\n     * @returns A promise which resolves when the file has begun\n     *   downloading.\n     */\n    async download(path) {\n        const url = await this.manager.services.contents.getDownloadUrl(path);\n        const element = document.createElement('a');\n        element.href = url;\n        element.download = '';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n        return void 0;\n    }\n    /**\n     * Restore the state of the file browser.\n     *\n     * @param id - The unique ID that is used to construct a state database key.\n     *\n     * @param populate - If `false`, the restoration ID will be set but the file\n     * browser state will not be fetched from the state database.\n     *\n     * @returns A promise when restoration is complete.\n     *\n     * #### Notes\n     * This function will only restore the model *once*. If it is called multiple\n     * times, all subsequent invocations are no-ops.\n     */\n    async restore(id, populate = true) {\n        const { manager } = this;\n        const key = `file-browser-${id}:cwd`;\n        const state = this._state;\n        const restored = !!this._key;\n        if (restored) {\n            return;\n        }\n        // Set the file browser key for state database fetch/save.\n        this._key = key;\n        if (!populate || !state) {\n            this._restored.resolve(undefined);\n            return;\n        }\n        await manager.services.ready;\n        try {\n            const value = await state.fetch(key);\n            if (!value) {\n                this._restored.resolve(undefined);\n                return;\n            }\n            const path = value['path'];\n            const localPath = manager.services.contents.localPath(path);\n            await manager.services.contents.get(path);\n            await this.cd(localPath);\n        }\n        catch (error) {\n            await state.remove(key);\n        }\n        this._restored.resolve(undefined);\n    }\n    /**\n     * Upload a `File` object.\n     *\n     * @param file - The `File` object to upload.\n     *\n     * @returns A promise containing the new file contents model.\n     *\n     * #### Notes\n     * On Notebook version < 5.1.0, this will fail to upload files that are too\n     * big to be sent in one request to the server. On newer versions, or on\n     * Jupyter Server, it will ask for confirmation then upload the file in 1 MB\n     * chunks.\n     */\n    async upload(file) {\n        // We do not support Jupyter Notebook version less than 4, and Jupyter\n        // Server advertises itself as version 1 and supports chunked\n        // uploading. We assume any version less than 4.0.0 to be Jupyter Server\n        // instead of Jupyter Notebook.\n        const serverVersion = PageConfig.getNotebookVersion();\n        const supportsChunked = serverVersion < [4, 0, 0] /* Jupyter Server */ ||\n            serverVersion >= [5, 1, 0]; /* Jupyter Notebook >= 5.1.0 */\n        const largeFile = file.size > LARGE_FILE_SIZE;\n        if (largeFile && !supportsChunked) {\n            const msg = this._trans.__('Cannot upload file (>%1 MB). %2', LARGE_FILE_SIZE / (1024 * 1024), file.name);\n            console.warn(msg);\n            throw msg;\n        }\n        const err = 'File not uploaded';\n        if (largeFile && !(await this._shouldUploadLarge(file))) {\n            throw 'Cancelled large file upload';\n        }\n        await this._uploadCheckDisposed();\n        await this.refresh();\n        await this._uploadCheckDisposed();\n        if (find(this._items, i => i.name === file.name) &&\n            !(await shouldOverwrite(file.name))) {\n            throw err;\n        }\n        await this._uploadCheckDisposed();\n        const chunkedUpload = supportsChunked && file.size > CHUNK_SIZE;\n        return await this._upload(file, chunkedUpload);\n    }\n    async _shouldUploadLarge(file) {\n        const { button } = await showDialog({\n            title: this._trans.__('Large file size warning'),\n            body: this._trans.__('The file size is %1 MB. Do you still want to upload it?', Math.round(file.size / (1024 * 1024))),\n            buttons: [\n                Dialog.cancelButton({ label: this._trans.__('Cancel') }),\n                Dialog.warnButton({ label: this._trans.__('Upload') })\n            ]\n        });\n        return button.accept;\n    }\n    /**\n     * Perform the actual upload.\n     */\n    async _upload(file, chunked) {\n        // Gather the file model parameters.\n        let path = this._model.path;\n        path = path ? path + '/' + file.name : file.name;\n        const name = file.name;\n        const type = 'file';\n        const format = 'base64';\n        const uploadInner = async (blob, chunk) => {\n            await this._uploadCheckDisposed();\n            const reader = new FileReader();\n            reader.readAsDataURL(blob);\n            await new Promise((resolve, reject) => {\n                reader.onload = resolve;\n                reader.onerror = event => reject(`Failed to upload \"${file.name}\":` + event);\n            });\n            await this._uploadCheckDisposed();\n            // remove header https://stackoverflow.com/a/24289420/907060\n            const content = reader.result.split(',')[1];\n            const model = {\n                type,\n                format,\n                name,\n                chunk,\n                content\n            };\n            return await this.manager.services.contents.save(path, model);\n        };\n        if (!chunked) {\n            try {\n                return await uploadInner(file);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                throw err;\n            }\n        }\n        let finalModel;\n        let upload = { path, progress: 0 };\n        this._uploadChanged.emit({\n            name: 'start',\n            newValue: upload,\n            oldValue: null\n        });\n        for (let start = 0; !finalModel; start += CHUNK_SIZE) {\n            const end = start + CHUNK_SIZE;\n            const lastChunk = end >= file.size;\n            const chunk = lastChunk ? -1 : end / CHUNK_SIZE;\n            const newUpload = { path, progress: start / file.size };\n            this._uploads.splice(this._uploads.indexOf(upload));\n            this._uploads.push(newUpload);\n            this._uploadChanged.emit({\n                name: 'update',\n                newValue: newUpload,\n                oldValue: upload\n            });\n            upload = newUpload;\n            let currentModel;\n            try {\n                currentModel = await uploadInner(file.slice(start, end), chunk);\n            }\n            catch (err) {\n                ArrayExt.removeFirstWhere(this._uploads, uploadIndex => {\n                    return file.name === uploadIndex.path;\n                });\n                this._uploadChanged.emit({\n                    name: 'failure',\n                    newValue: upload,\n                    oldValue: null\n                });\n                throw err;\n            }\n            if (lastChunk) {\n                finalModel = currentModel;\n            }\n        }\n        this._uploads.splice(this._uploads.indexOf(upload));\n        this._uploadChanged.emit({\n            name: 'finish',\n            newValue: null,\n            oldValue: upload\n        });\n        return finalModel;\n    }\n    _uploadCheckDisposed() {\n        if (this.isDisposed) {\n            return Promise.reject('Filemanager disposed. File upload canceled');\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Handle an updated contents model.\n     */\n    _handleContents(contents) {\n        // Update our internal data.\n        this._model = {\n            name: contents.name,\n            path: contents.path,\n            type: contents.type,\n            content: undefined,\n            writable: contents.writable,\n            created: contents.created,\n            last_modified: contents.last_modified,\n            mimetype: contents.mimetype,\n            format: contents.format\n        };\n        this._items = contents.content;\n        this._paths.clear();\n        contents.content.forEach((model) => {\n            this._paths.add(model.path);\n        });\n    }\n    /**\n     * Handle a change to the running sessions.\n     */\n    _onRunningChanged(sender, models) {\n        this._populateSessions(models);\n        this._refreshed.emit(void 0);\n    }\n    /**\n     * Handle a change on the contents manager.\n     */\n    _onFileChanged(sender, change) {\n        const path = this._model.path;\n        const { sessions } = this.manager.services;\n        const { oldValue, newValue } = change;\n        const value = oldValue && oldValue.path && PathExt.dirname(oldValue.path) === path\n            ? oldValue\n            : newValue && newValue.path && PathExt.dirname(newValue.path) === path\n                ? newValue\n                : undefined;\n        // If either the old value or the new value is in the current path, update.\n        if (value) {\n            void this._poll.refresh();\n            this._populateSessions(sessions.running());\n            this._fileChanged.emit(change);\n            return;\n        }\n    }\n    /**\n     * Populate the model's sessions collection.\n     */\n    _populateSessions(models) {\n        this._sessions.length = 0;\n        each(models, model => {\n            if (this._paths.has(model.path)) {\n                this._sessions.push(model);\n            }\n        });\n    }\n}\n/**\n * File browser model with optional filter on element.\n */\nexport class FilterFileBrowserModel extends FileBrowserModel {\n    constructor(options) {\n        super(options);\n        this.translator = options.translator || nullTranslator;\n        this._filter = options.filter ? options.filter : model => true;\n    }\n    /**\n     * Create an iterator over the filtered model's items.\n     *\n     * @returns A new iterator over the model's items.\n     */\n    items() {\n        return filter(super.items(), (value, index) => {\n            if (value.type === 'directory') {\n                return true;\n            }\n            else {\n                return this._filter(value);\n            }\n        });\n    }\n    setFilter(filter) {\n        this._filter = filter;\n        void this.refresh();\n    }\n}\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { toArray } from '@lumino/algorithm';\nimport { PanelLayout, Widget } from '@lumino/widgets';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { Dialog } from '@jupyterlab/apputils';\nimport { FileBrowser } from './browser';\nimport { FilterFileBrowserModel } from './model';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to open file dialog\n */\nconst OPEN_DIALOG_CLASS = 'jp-Open-Dialog';\n/**\n * Namespace for file dialog\n */\nexport var FileDialog;\n(function (FileDialog) {\n    /**\n     * Create and show a open files dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getOpenFiles(options) {\n        const translator = options.translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const dialogOptions = {\n            title: options.title,\n            buttons: [\n                Dialog.cancelButton({ label: trans.__('Cancel') }),\n                Dialog.okButton({\n                    label: trans.__('Select')\n                })\n            ],\n            focusNodeSelector: options.focusNodeSelector,\n            host: options.host,\n            renderer: options.renderer,\n            body: new OpenDialog(options.manager, options.filter, translator)\n        };\n        const dialog = new Dialog(dialogOptions);\n        return dialog.launch();\n    }\n    FileDialog.getOpenFiles = getOpenFiles;\n    /**\n     * Create and show a open directory dialog.\n     *\n     * Note: if nothing is selected when `getValue` will return the browser\n     * model current path.\n     *\n     * @param options - The dialog setup options.\n     *\n     * @returns A promise that resolves with whether the dialog was accepted.\n     */\n    function getExistingDirectory(options) {\n        return getOpenFiles(Object.assign(Object.assign({}, options), { filter: model => false }));\n    }\n    FileDialog.getExistingDirectory = getExistingDirectory;\n})(FileDialog || (FileDialog = {}));\n/**\n * Open dialog widget\n */\nclass OpenDialog extends Widget {\n    constructor(manager, filter, translator) {\n        super();\n        translator = translator || nullTranslator;\n        this.addClass(OPEN_DIALOG_CLASS);\n        this._browser = Private.createFilteredFileBrowser('filtered-file-browser-dialog', manager, filter, {}, translator);\n        // Build the sub widgets\n        const layout = new PanelLayout();\n        layout.addWidget(this._browser);\n        // Set Widget content\n        this.layout = layout;\n    }\n    /**\n     * Get the selected items.\n     */\n    getValue() {\n        const selection = toArray(this._browser.selectedItems());\n        if (selection.length === 0) {\n            // Return current path\n            return [\n                {\n                    path: this._browser.model.path,\n                    name: PathExt.basename(this._browser.model.path),\n                    type: 'directory',\n                    content: undefined,\n                    writable: false,\n                    created: 'unknown',\n                    last_modified: 'unknown',\n                    mimetype: 'text/plain',\n                    format: 'text'\n                }\n            ];\n        }\n        else {\n            return selection;\n        }\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * Create a new file browser instance.\n     *\n     * @param id - The widget/DOM id of the file browser.\n     *\n     * @param manager - A document manager instance.\n     *\n     * @param filter - function to filter file browser item.\n     *\n     * @param options - The optional file browser configuration object.\n     *\n     * #### Notes\n     * The ID parameter is used to set the widget ID. It is also used as part of\n     * the unique key necessary to store the file browser's restoration data in\n     * the state database if that functionality is enabled.\n     *\n     * If, after the file browser has been generated by the factory, the ID of the\n     * resulting widget is changed by client code, the restoration functionality\n     * will not be disrupted as long as there are no ID collisions, i.e., as long\n     * as the initial ID passed into the factory is used for only one file browser\n     * instance.\n     */\n    Private.createFilteredFileBrowser = (id, manager, filter, options = {}, translator) => {\n        translator = translator || nullTranslator;\n        const model = new FilterFileBrowserModel({\n            manager,\n            filter,\n            translator,\n            driveName: options.driveName,\n            refreshInterval: options.refreshInterval\n        });\n        const widget = new FileBrowser({\n            id,\n            model,\n            translator\n        });\n        return widget;\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=opendialog.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n//\nimport { VDomRenderer, VDomModel } from '@jupyterlab/apputils';\nimport { GroupItem, ProgressBar, TextItem } from '@jupyterlab/statusbar';\nimport { ArrayExt } from '@lumino/algorithm';\nimport React from 'react';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * Half-spacing between items in the overall status item.\n */\nconst HALF_SPACING = 4;\n/**\n * A pure function component for a FileUpload status item.\n *\n * @param props: the props for the component.\n *\n * @returns a tsx component for the file upload status.\n */\nfunction FileUploadComponent(props) {\n    const translator = props.translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    return (React.createElement(GroupItem, { spacing: HALF_SPACING },\n        React.createElement(TextItem, { source: trans.__('Uploading…') }),\n        React.createElement(ProgressBar, { percentage: props.upload })));\n}\n/**\n * The time for which to show the \"Complete!\" message after uploading.\n */\nconst UPLOAD_COMPLETE_MESSAGE_MILLIS = 2000;\n/**\n * Status bar item to display file upload progress.\n */\nexport class FileUploadStatus extends VDomRenderer {\n    /**\n     * Construct a new FileUpload status item.\n     */\n    constructor(opts) {\n        super(new FileUploadStatus.Model(opts.tracker.currentWidget && opts.tracker.currentWidget.model));\n        this._onBrowserChange = (tracker, browser) => {\n            if (browser === null) {\n                this.model.browserModel = null;\n            }\n            else {\n                this.model.browserModel = browser.model;\n            }\n        };\n        this.translator = opts.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this._tracker = opts.tracker;\n        this._tracker.currentChanged.connect(this._onBrowserChange);\n    }\n    /**\n     * Render the FileUpload status.\n     */\n    render() {\n        const uploadPaths = this.model.items;\n        if (uploadPaths.length > 0) {\n            const item = this.model.items[0];\n            if (item.complete) {\n                return React.createElement(TextItem, { source: this._trans.__('Complete!') });\n            }\n            else {\n                return (React.createElement(FileUploadComponent, { upload: this.model.items[0].progress, translator: this.translator }));\n            }\n        }\n        else {\n            return React.createElement(FileUploadComponent, { upload: 100, translator: this.translator });\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._tracker.currentChanged.disconnect(this._onBrowserChange);\n    }\n}\n/**\n * A namespace for FileUpload class statics.\n */\n(function (FileUploadStatus) {\n    /**\n     * The VDomModel for the FileUpload renderer.\n     */\n    class Model extends VDomModel {\n        /**\n         * Construct a new model.\n         */\n        constructor(browserModel) {\n            super();\n            /**\n             * Handle an uploadChanged event in the filebrowser model.\n             */\n            this._uploadChanged = (browse, uploads) => {\n                if (uploads.name === 'start') {\n                    this._items.push({\n                        path: uploads.newValue.path,\n                        progress: uploads.newValue.progress * 100,\n                        complete: false\n                    });\n                }\n                else if (uploads.name === 'update') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].progress = uploads.newValue.progress * 100;\n                    }\n                }\n                else if (uploads.name === 'finish') {\n                    const idx = ArrayExt.findFirstIndex(this._items, val => val.path === uploads.oldValue.path);\n                    if (idx !== -1) {\n                        this._items[idx].complete = true;\n                        setTimeout(() => {\n                            ArrayExt.removeAt(this._items, idx);\n                            this.stateChanged.emit(void 0);\n                        }, UPLOAD_COMPLETE_MESSAGE_MILLIS);\n                    }\n                }\n                else if (uploads.name === 'failure') {\n                    ArrayExt.removeFirstWhere(this._items, val => val.path === uploads.newValue.path);\n                }\n                this.stateChanged.emit(void 0);\n            };\n            this._items = [];\n            this._browserModel = null;\n            this.browserModel = browserModel;\n        }\n        /**\n         * The currently uploading items.\n         */\n        get items() {\n            return this._items;\n        }\n        /**\n         * The current file browser model.\n         */\n        get browserModel() {\n            return this._browserModel;\n        }\n        set browserModel(browserModel) {\n            const oldBrowserModel = this._browserModel;\n            if (oldBrowserModel) {\n                oldBrowserModel.uploadChanged.disconnect(this._uploadChanged);\n            }\n            this._browserModel = browserModel;\n            this._items = [];\n            if (this._browserModel !== null) {\n                this._browserModel.uploadChanged.connect(this._uploadChanged);\n            }\n            this.stateChanged.emit(void 0);\n        }\n    }\n    FileUploadStatus.Model = Model;\n})(FileUploadStatus || (FileUploadStatus = {}));\n//# sourceMappingURL=uploadstatus.js.map"],"sourceRoot":""}