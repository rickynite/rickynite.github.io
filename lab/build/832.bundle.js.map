{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/codemirror/keymap/vim.js"],"names":["CodeMirror","defaultKeymap","keys","type","toKeys","context","action","motion","motionArgs","linewise","toJumplist","forward","wordEnd","bigWord","inclusive","explicitRepeat","toFirstChar","repeatOffset","isEdit","actionArgs","after","matchIndent","sameLine","operator","operatorArgs","indentRight","toLower","operatorMotionArgs","visualLine","shouldMoveCursor","insertAt","interlaceInsertRepeat","blockwise","keepSpaces","replace","fullLine","exitVisualBlock","position","increase","backtrack","textObjectInner","searchArgs","querySrc","wholeWordOnly","defaultKeymapLength","length","defaultExCommandMap","name","shortName","possiblyAsync","excludeFromCommandHistory","Pos","Vim","detachVimMap","cm","next","this","keyMap","vim","rmClass","getWrapperElement","getOption","document","body","style","caretColor","clearFatCursorMark","off","updateFatCursorMark","state","fatCursorMarks","disableFatCursorMark","getInputField","attach","attachVimMap","setOption","onCursorActivity","getOnPasteFn","leaveVimMode","prev","addClass","on","enableFatCursorMark","signal","mode","maybeInitVimState","enterVimMode","ranges","listSelections","result","i","range","empty","lineLength","getLine","anchor","line","ch","push","markText","className","marks","clear","cmKey","key","vimKey","charAt","pieces","split","lastPiece","hasCharacter","piece","modifiers","specialKeys","isUpperCase","toLowerCase","join","cmKeyToVimKey","cmd","findKey","defineOption","val","Init","test","Enter","Backspace","Delete","Insert","onPasteFn","insertMode","setCursor","offsetCursor","getCursor","actions","enterInsertMode","numberRegex","wordCharTest","isWordChar","bigWordCharTest","makeKeyRange","start","size","String","fromCharCode","upperCaseAlphabet","lowerCaseAlphabet","numbers","validMarks","concat","validRegisters","isLine","firstLine","lastLine","isLowerCase","k","isWhiteSpaceString","isEndOfSentenceSymbol","indexOf","inArray","arr","options","defaultValue","aliases","callback","undefined","Error","value","cfg","option","scope","local","vimGlobalState","lastInsertModeKeyTimer","createCircularJumpList","pointer","head","tail","buffer","Array","move","offset","mark","find","newCur","inc","oldCur","cursorEqual","cachedCursor","add","curMark","useNextSlot","cursor","trashMark","setBookmark","markPos","oldPointer","createInsertModeChanges","c","changes","expectCursorActivityForChange","MacroModeState","latestRegister","isPlaying","isRecording","replaySearchQueries","onRecordingDone","lastInsertModeChanges","inputState","InputState","lastEditInputState","lastEditActionCommand","lastHPos","lastHSPos","lastMotion","fakeCursor","insertModeRepeat","visualMode","visualBlock","lastSelection","lastPastedText","sel","resetVimGlobalState","optionName","searchQuery","searchIsReversed","lastSubstituteReplacePart","jumpList","macroModeState","lastCharacterSearch","increment","selectedCharacter","registerController","RegisterController","searchHistoryController","HistoryController","exCommandHistoryController","prototype","exitMacroRecordMode","enterMacroRecordMode","registerName","register","getRegister","openDialog","bottom","vimApi","buildKeyMap","getRegisterController","resetVimGlobalState_","getVimGlobalState_","maybeInitVimState_","suppressErrorLogging","InsertModeKey","map","lhs","rhs","ctx","exCommandDispatcher","unmap","noremap","toCtxArray","ctxsToMap","actualLength","mapping","substr","newMapping","_mapCommand","mappedCtxs","filter","el","mapclear","origLength","userKeymap","slice","contexts","j","defineEx","prefix","func","exCommands","commandMap_","handleKey","origin","command","handleMacroRecording","clearInputState","pushText","logKey","handleEsc","exitVisualMode","exitInsertMode","keyBuffer","keysAreChars","match","commandDispatcher","matchCommand","thisMatch","window","clearTimeout","setTimeout","selections","here","replaceRange","pop","handleKeyInsertMode","keysMatcher","exec","pushRepeatDigit","handleKeyNonInsertMode","operation","curOp","isVimOp","substring","index","doKeyToKey","processCommand","e","console","handleEx","input","defineMotion","fn","motions","defineAction","defineOperator","operators","mapCommand","args","extra","defineRegister","registers","prefixRepeat","motionRepeat","reason","Register","text","insertModeChanges","searchQueries","unnamedRegister","historyBuffer","iterator","initialPrefix","n","getRepeat","repeat","parseInt","setText","pushInsertModeChanges","pushSearchQuery","query","toString","isValidRegister","shiftNumericRegisters_","nextMatch","up","dir","element","pushInput","splice","reset","bestMatch","matches","partial","full","commandMatch","commandMatches","character","lastChar","repeatOverride","processMotion","processOperator","processOperatorMotion","processAction","processSearch","processEx","copyArgs","evalInput","updateCmSelection","repeatIsExplicit","recordLastEdit","getSearchCursor","getSearchState","setReversed","promptPrefix","originalQuery","getQuery","originalScrollPos","getScrollInfo","handleQuery","shift","showPrompt","onClose","scrollTo","left","top","logSearchQuery","desc","searchPromptDesc","onKeyUp","close","parsedQuery","keyName","target","selectionEnd","selectionStart","Math","min","updateSearchQuery","scrollIntoView","findNext","clearSearchHighlight","onKeyDown","e_stop","focus","word","expandWordUnderCursor","isKeyword","end","ignoreCase","smartCase","showConfirm","onPromptClose","onPromptKeyDown","exArgs","selectValueOnOpen","newHead","newAnchor","origHead","copyCursor","clipCursorToContent","origAnchor","oldHead","oldAnchor","noRepeat","motionResult","recordJumpPosition","Infinity","updateMark","cursorIsBefore","lastSel","lineOffset","abs","chOffset","curStart","curEnd","cmSel","cursorMin","cursorMax","makeCmSelection","tmp","_cm","expandSelectionToLine","selection","getRange","lines","clipToLine","setSelections","primary","operatorMoveTo","actionCommand","moveToTopLine","_head","getUserVisibleLines","findFirstNonWhiteSpaceCharacter","moveToMiddleLine","floor","moveToBottomLine","expandToLine","isReversed","highlightSearchMatches","goToMark","pos","getMarkPos","moveToOtherHighlightedEnd","jumpToMark","best","equal","between","cursorIsBetween","moveByCharacters","cur","moveByLines","endCh","moveByDisplayLines","moveByScroll","moveToColumn","moveToEol","first","last","posV","findPosV","moveToStartOfLine","charCoords","res","hitSide","goalCoords","coordsChar","resCoords","moveByPage","moveByParagraph","findParagraph","moveBySentence","nextChar","idx","ln","stop","curr","last_valid","skip_empty_lines","reverse","curr_index","findSentence","scrollbox","clientHeight","defaultTextHeight","orig","dest","moveByWords","words","emptyLineIsWord","findWord","eodCh","from","to","shortCircuit","firstWord","lastWord","moveToWord","moveTillCharacter","moveToCharacter","recordLastCharacterSearch","moveToSymbol","symb","endLine","lineCount","curCh","lineText","nextCh","lastCh","reverseSymb","depth","curMoveThrough","symbolToMode","init","findSymbolModes","isComplete","lineLen","findSymbol","keepHPos","retval","clipPos","moveToFirstNonWhiteSpaceCharacter","moveToMatchedSymbol","symbol","getTokenTypeAt","re","findMatchingBracket","bracketRegex","moveToLineOrEdgeOfDocument","lineNum","textObjectManipulation","bracketRegexp","openSym","scanForBracket","selectCompanionObject","'","len","chars","firstIndex","findBeginningAndEnd","findMatchingTag","findEnclosingTag","tags","open","expandTagUnderCursor","expandSelection","repeatLastCharacterSearch","lastSearch","moveH","fillArray","times","change","finalHead","Number","MAX_VALUE","setSelection","getSelection","replaceSelection","replacement","replaceSelections","lastState","prevLineEnd","wasLastLine","commands","newlineAndIndent","indent","startLine","indentLine","indentAuto","_args","execCommand","changeCase","getSelections","swapped","toSwap","toUpperCase","yank","endPos","jumpListWalk","scroll","lineHeight","delta","newPos","cursorCoords","ceil","newBottom","scrollToCursor","height","y","replayMacro","executeMacroRegister","toggleOverwrite","overwrite","max","getLastEditPos","onChange","onKeyEventTargetKeyDown","selectForInsert","toggleVisualMode","subMode","reselectLastSelection","_actionArgs","updateLastSelection","anchorMark","headMark","joinLines","finalCh","curFinalPos","newLineAndEnterInsertMode","newlineAndIndentContinueComment","paste","tabSize","whitespaceLength","str","tabs","spaces","currentLine","chompedText","wasChomped","firstIndent","wspace","newIndent","quotient","curPosFinal","lastSelectionCurEnd","selectedArea","getCurrentSelectedAreaRange","getLastSelectedAreaRange","block","width","getSelectedAreaRange","selectedText","emptyStrings","selectBlock","posFromIndex","indexFromPos","extendLineToColumn","undo","repeatFn","redo","setRegister","setMark","replaceTo","replaceWith","replaceWithStr","incrementNumberToken","numberStr","lineStr","baseStr","digits","base","zeroPadding","repeatLastEdit","includeLineBreak","maxCh","ret","prop","hasOwnProperty","offsetLine","offsetCh","pressed","mapped","prefixLen","pressedPrefix","mappedPrefix","cur1","cur2","arguments","apply","call","cur3","cur1before2","cur2before3","trim","s","column","isClipped","primIndex","atAnchor","atHead","getIndex","wasClipped","baseCh","headCh","newDir","lineHead","updateFakeCursor","exclusive","headOffset","anchorOffset","right","moveHead","clearFakeCursor","firstNonWS","search","_forward","noSymbol","getHead","wordStart","bracket","section","comment","found","method","preprocess","token","charTests","foundWord","charIdxInLine","markName","includeChar","lastIndexOf","isEmpty","isBoundary","any","startState","SearchState","searchState_","splitBySeparator","argString","separator","slashes","findUnescapedSeparators","tokens","escapeNextChar","setQuery","getOverlay","searchOverlay","setOverlay","overlay","reversed","getScrollbarAnnotate","annotate","setScrollbarAnnotate","charUnescapes","unescapes","parseQuery","RegExp","regexPart","forceIgnoreCase","out","specialComesNext","translateRegex","openNotification","duration","alert","raw","shortText","template","prompt","dialog","rawQuery","r1","r2","props","regexEqual","highlightTimeout","searchState","removeOverlay","source","matchSol","stream","sol","backUp","eol","skipToEnd","addOverlay","showMatchesOnScrollbar","isInRange","scrollInfo","bottomY","done","doc","history","ExCommandDispatcher","buildCommandMap_","opt_params","that","_processCommand","commandHistoryRegister","previousCommand","inputStream","StringStream","commandName","params","parseInput_","matchCommand_","parseCommandArgs_","toInput","eatWhile","eat","lineEnd","parseLineSpec_","numberMatch","parseLineSpecOffset_","offsetMatch","delim","argDelimiter","user","unshift","colorscheme","mapArgs","imap","nmap","vmap","set","setArgs","setCfg","expr","forceGet","optionIsBoolean","oldValue","message","setOptionReturn","setlocal","setglobal","regArgs","regInfo","sort","unique","number","pattern","err","eatSpace","opts","decimal","hex","octal","parseArgs","lineStart","radix","numPart","textPart","matchPart","a","b","compareFn","textOld","anum","bnum","global","splitBySlash","matchedLines","content","nextCommand","substitute","trailing","flagsPart","count","replacePart","confirm","output","peek","matched","matcher","unescapeRegexReplace","translateRegexReplace","startPos","searchCursor","exMode","lastPos","replaceAll","newText","_value","savedCallback","doReplace","write","save","nohlsearch","delmarks","sym","startMark","finishMark","charCodeAt","finish","insertModeChangeRegister","lastChange","logInsertModeChange","imc","repeatInsertModeChanges","changeObj","ignoreCount","selectionCount","maybeReset","somethingSelected","handleExternalSelection","widget","createElement","textContent","fakeCursorBookmark","lookupKey","repeatForInsert","isAction","cachedInputState","repeatCommand","repeatInsert","changeObject","keyHandler","binding","detach","fallthrough","mod"],"mappings":"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","file":"832.bundle.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../lib/codemirror\"), require(\"../addon/search/searchcursor\"), require(\"../addon/dialog/dialog\"), require(\"../addon/edit/matchbrackets.js\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../lib/codemirror\", \"../addon/search/searchcursor\", \"../addon/dialog/dialog\", \"../addon/edit/matchbrackets\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  'use strict';\n\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h', context: 'normal'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x', context: 'normal'},\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B', context: 'normal' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b', context: 'normal' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<character>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<character>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<character>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<character>', type: 'action', action: 'setMark' },\n    { keys: '\"<character>', type: 'action', action: 'setRegister' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<character>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<character>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'unmap' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  var Pos = CodeMirror.Pos;\n\n  var Vim = function() {\n    function enterVimMode(cm) {\n      cm.setOption('disableInput', true);\n      cm.setOption('showCursorWhenSelecting', false);\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      cm.on('cursorActivity', onCursorActivity);\n      maybeInitVimState(cm);\n      CodeMirror.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    }\n\n    function leaveVimMode(cm) {\n      cm.setOption('disableInput', false);\n      cm.off('cursorActivity', onCursorActivity);\n      CodeMirror.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n      cm.state.vim = null;\n    }\n\n    function detachVimMap(cm, next) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.rmClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          disableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"\";\n        }\n      }\n\n      if (!next || next.attach != attachVimMap)\n        leaveVimMode(cm);\n    }\n    function attachVimMap(cm, prev) {\n      if (this == CodeMirror.keyMap.vim) {\n        CodeMirror.addClass(cm.getWrapperElement(), \"cm-fat-cursor\");\n        if (cm.getOption(\"inputStyle\") == \"contenteditable\" && document.body.style.caretColor != null) {\n          enableFatCursorMark(cm);\n          cm.getInputField().style.caretColor = \"transparent\";\n        }\n      }\n\n      if (!prev || prev.attach != attachVimMap)\n        enterVimMode(cm);\n    }\n\n    function updateFatCursorMark(cm) {\n      if (!cm.state.fatCursorMarks) return;\n      clearFatCursorMark(cm);\n      var ranges = cm.listSelections(), result = []\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        if (range.empty()) {\n          var lineLength = cm.getLine(range.anchor.line).length;\n          if (range.anchor.ch < lineLength) {\n            result.push(cm.markText(range.anchor, Pos(range.anchor.line, range.anchor.ch + 1),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          } else {\n            result.push(cm.markText(Pos(range.anchor.line, lineLength - 1),\n                                    Pos(range.anchor.line, lineLength),\n                                    {className: \"cm-fat-cursor-mark\"}));\n          }\n        }\n      }\n      cm.state.fatCursorMarks = result;\n    }\n\n    function clearFatCursorMark(cm) {\n      var marks = cm.state.fatCursorMarks;\n      if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n    }\n\n    function enableFatCursorMark(cm) {\n      cm.state.fatCursorMarks = [];\n      updateFatCursorMark(cm)\n      cm.on(\"cursorActivity\", updateFatCursorMark)\n    }\n\n    function disableFatCursorMark(cm) {\n      clearFatCursorMark(cm);\n      cm.off(\"cursorActivity\", updateFatCursorMark);\n      // explicitly set fatCursorMarks to null because event listener above\n      // can be invoke after removing it, if off is called from operation\n      cm.state.fatCursorMarks = null;\n    }\n\n    // Deprecated, simply setting the keymap works again.\n    CodeMirror.defineOption('vimMode', false, function(cm, val, prev) {\n      if (val && cm.getOption(\"keyMap\") != \"vim\")\n        cm.setOption(\"keyMap\", \"vim\");\n      else if (!val && prev != CodeMirror.Init && /^vim/.test(cm.getOption(\"keyMap\")))\n        cm.setOption(\"keyMap\", \"default\");\n    });\n\n    function cmKey(key, cm) {\n      if (!cm) { return undefined; }\n      if (this[key]) { return this[key]; }\n      var vimKey = cmKeyToVimKey(key);\n      if (!vimKey) {\n        return false;\n      }\n      var cmd = CodeMirror.Vim.findKey(cm, vimKey);\n      if (typeof cmd == 'function') {\n        CodeMirror.signal(cm, 'vim-keypress', vimKey);\n      }\n      return cmd;\n    }\n\n    var modifiers = {'Shift': 'S', 'Ctrl': 'C', 'Alt': 'A', 'Cmd': 'D', 'Mod': 'A'};\n    var specialKeys = {Enter:'CR',Backspace:'BS',Delete:'Del',Insert:'Ins'};\n    function cmKeyToVimKey(key) {\n      if (key.charAt(0) == '\\'') {\n        // Keypress character binding of format \"'a'\"\n        return key.charAt(1);\n      }\n      var pieces = key.split(/-(?!$)/);\n      var lastPiece = pieces[pieces.length - 1];\n      if (pieces.length == 1 && pieces[0].length == 1) {\n        // No-modifier bindings use literal character bindings above. Skip.\n        return false;\n      } else if (pieces.length == 2 && pieces[0] == 'Shift' && lastPiece.length == 1) {\n        // Ignore Shift+char bindings as they should be handled by literal character.\n        return false;\n      }\n      var hasCharacter = false;\n      for (var i = 0; i < pieces.length; i++) {\n        var piece = pieces[i];\n        if (piece in modifiers) { pieces[i] = modifiers[piece]; }\n        else { hasCharacter = true; }\n        if (piece in specialKeys) { pieces[i] = specialKeys[piece]; }\n      }\n      if (!hasCharacter) {\n        // Vim does not support modifier only keys.\n        return false;\n      }\n      // TODO: Current bindings expect the character to be lower case, but\n      // it looks like vim key notation uses upper case.\n      if (isUpperCase(lastPiece)) {\n        pieces[pieces.length - 1] = lastPiece.toLowerCase();\n      }\n      return '<' + pieces.join('-') + '>';\n    }\n\n    function getOnPasteFn(cm) {\n      var vim = cm.state.vim;\n      if (!vim.onPasteFn) {\n        vim.onPasteFn = function() {\n          if (!vim.insertMode) {\n            cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        };\n      }\n      return vim.onPasteFn;\n    }\n\n    var numberRegex = /[\\d]/;\n    var wordCharTest = [CodeMirror.isWordChar, function(ch) {\n      return ch && !CodeMirror.isWordChar(ch) && !/\\s/.test(ch);\n    }], bigWordCharTest = [function(ch) {\n      return /\\S/.test(ch);\n    }];\n    function makeKeyRange(start, size) {\n      var keys = [];\n      for (var i = start; i < start + size; i++) {\n        keys.push(String.fromCharCode(i));\n      }\n      return keys;\n    }\n    var upperCaseAlphabet = makeKeyRange(65, 26);\n    var lowerCaseAlphabet = makeKeyRange(97, 26);\n    var numbers = makeKeyRange(48, 10);\n    var validMarks = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['<', '>']);\n    var validRegisters = [].concat(upperCaseAlphabet, lowerCaseAlphabet, numbers, ['-', '\"', '.', ':', '/']);\n\n    function isLine(cm, line) {\n      return line >= cm.firstLine() && line <= cm.lastLine();\n    }\n    function isLowerCase(k) {\n      return (/^[a-z]$/).test(k);\n    }\n    function isMatchableSymbol(k) {\n      return '()[]{}'.indexOf(k) != -1;\n    }\n    function isNumber(k) {\n      return numberRegex.test(k);\n    }\n    function isUpperCase(k) {\n      return (/^[A-Z]$/).test(k);\n    }\n    function isWhiteSpaceString(k) {\n      return (/^\\s*$/).test(k);\n    }\n    function isEndOfSentenceSymbol(k) {\n      return '.?!'.indexOf(k) != -1;\n    }\n    function inArray(val, arr) {\n      for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == val) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    var options = {};\n    function defineOption(name, defaultValue, type, aliases, callback) {\n      if (defaultValue === undefined && !callback) {\n        throw Error('defaultValue is required unless callback is provided');\n      }\n      if (!type) { type = 'string'; }\n      options[name] = {\n        type: type,\n        defaultValue: defaultValue,\n        callback: callback\n      };\n      if (aliases) {\n        for (var i = 0; i < aliases.length; i++) {\n          options[aliases[i]] = options[name];\n        }\n      }\n      if (defaultValue) {\n        setOption(name, defaultValue);\n      }\n    }\n\n    function setOption(name, value, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.type == 'boolean') {\n        if (value && value !== true) {\n          return new Error('Invalid argument: ' + name + '=' + value);\n        } else if (value !== false) {\n          // Boolean options are set to true if value is not defined.\n          value = true;\n        }\n      }\n      if (option.callback) {\n        if (scope !== 'local') {\n          option.callback(value, undefined);\n        }\n        if (scope !== 'global' && cm) {\n          option.callback(value, cm);\n        }\n      } else {\n        if (scope !== 'local') {\n          option.value = option.type == 'boolean' ? !!value : value;\n        }\n        if (scope !== 'global' && cm) {\n          cm.state.vim.options[name] = {value: value};\n        }\n      }\n    }\n\n    function getOption(name, cm, cfg) {\n      var option = options[name];\n      cfg = cfg || {};\n      var scope = cfg.scope;\n      if (!option) {\n        return new Error('Unknown option: ' + name);\n      }\n      if (option.callback) {\n        var local = cm && option.callback(undefined, cm);\n        if (scope !== 'global' && local !== undefined) {\n          return local;\n        }\n        if (scope !== 'local') {\n          return option.callback();\n        }\n        return;\n      } else {\n        var local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n        return (local || (scope !== 'local') && option || {}).value;\n      }\n    }\n\n    defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n      // Option is local. Do nothing for global.\n      if (cm === undefined) {\n        return;\n      }\n      // The 'filetype' option proxies to the CodeMirror 'mode' option.\n      if (name === undefined) {\n        var mode = cm.getOption('mode');\n        return mode == 'null' ? '' : mode;\n      } else {\n        var mode = name == '' ? 'null' : name;\n        cm.setOption('mode', mode);\n      }\n    });\n\n    var createCircularJumpList = function() {\n      var size = 100;\n      var pointer = -1;\n      var head = 0;\n      var tail = 0;\n      var buffer = new Array(size);\n      function add(cm, oldCur, newCur) {\n        var current = pointer % size;\n        var curMark = buffer[current];\n        function useNextSlot(cursor) {\n          var next = ++pointer % size;\n          var trashMark = buffer[next];\n          if (trashMark) {\n            trashMark.clear();\n          }\n          buffer[next] = cm.setBookmark(cursor);\n        }\n        if (curMark) {\n          var markPos = curMark.find();\n          // avoid recording redundant cursor position\n          if (markPos && !cursorEqual(markPos, oldCur)) {\n            useNextSlot(oldCur);\n          }\n        } else {\n          useNextSlot(oldCur);\n        }\n        useNextSlot(newCur);\n        head = pointer;\n        tail = pointer - size + 1;\n        if (tail < 0) {\n          tail = 0;\n        }\n      }\n      function move(cm, offset) {\n        pointer += offset;\n        if (pointer > head) {\n          pointer = head;\n        } else if (pointer < tail) {\n          pointer = tail;\n        }\n        var mark = buffer[(size + pointer) % size];\n        // skip marks that are temporarily removed from text buffer\n        if (mark && !mark.find()) {\n          var inc = offset > 0 ? 1 : -1;\n          var newCur;\n          var oldCur = cm.getCursor();\n          do {\n            pointer += inc;\n            mark = buffer[(size + pointer) % size];\n            // skip marks that are the same as current position\n            if (mark &&\n                (newCur = mark.find()) &&\n                !cursorEqual(oldCur, newCur)) {\n              break;\n            }\n          } while (pointer < head && pointer > tail);\n        }\n        return mark;\n      }\n      function find(cm, offset) {\n        var oldPointer = pointer;\n        var mark = move(cm, offset);\n        pointer = oldPointer;\n        return mark && mark.find();\n      }\n      return {\n        cachedCursor: undefined, //used for # and * jumps\n        add: add,\n        find: find,\n        move: move\n      };\n    };\n\n    // Returns an object to track the changes associated insert mode.  It\n    // clones the object that is passed in, or creates an empty object one if\n    // none is provided.\n    var createInsertModeChanges = function(c) {\n      if (c) {\n        // Copy construction\n        return {\n          changes: c.changes,\n          expectCursorActivityForChange: c.expectCursorActivityForChange\n        };\n      }\n      return {\n        // Change list\n        changes: [],\n        // Set to true on change, false on cursorActivity.\n        expectCursorActivityForChange: false\n      };\n    };\n\n    function MacroModeState() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    MacroModeState.prototype = {\n      exitMacroRecordMode: function() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.onRecordingDone) {\n          macroModeState.onRecordingDone(); // close dialog\n        }\n        macroModeState.onRecordingDone = undefined;\n        macroModeState.isRecording = false;\n      },\n      enterMacroRecordMode: function(cm, registerName) {\n        var register =\n            vimGlobalState.registerController.getRegister(registerName);\n        if (register) {\n          register.clear();\n          this.latestRegister = registerName;\n          if (cm.openDialog) {\n            this.onRecordingDone = cm.openDialog(\n                '(recording)['+registerName+']', null, {bottom:true});\n          }\n          this.isRecording = true;\n        }\n      }\n    };\n\n    function maybeInitVimState(cm) {\n      if (!cm.state.vim) {\n        // Store instance state in the CodeMirror object.\n        cm.state.vim = {\n          inputState: new InputState(),\n          // Vim's input state that triggered the last edit, used to repeat\n          // motions and operators with '.'.\n          lastEditInputState: undefined,\n          // Vim's action command before the last edit, used to repeat actions\n          // with '.' and insert mode repeat.\n          lastEditActionCommand: undefined,\n          // When using jk for navigation, if you move from a longer line to a\n          // shorter line, the cursor may clip to the end of the shorter line.\n          // If j is pressed again and cursor goes to the next line, the\n          // cursor should go back to its horizontal position on the longer\n          // line if it can. This is to keep track of the horizontal position.\n          lastHPos: -1,\n          // Doing the same with screen-position for gj/gk\n          lastHSPos: -1,\n          // The last motion command run. Cleared if a non-motion command gets\n          // executed in between.\n          lastMotion: null,\n          marks: {},\n          // Mark for rendering fake cursor for visual mode.\n          fakeCursor: null,\n          insertMode: false,\n          // Repeat count for changes made in insert mode, triggered by key\n          // sequences like 3,i. Only exists when insertMode is true.\n          insertModeRepeat: undefined,\n          visualMode: false,\n          // If we are in visual line mode. No effect if visualMode is false.\n          visualLine: false,\n          visualBlock: false,\n          lastSelection: null,\n          lastPastedText: null,\n          sel: {},\n          // Buffer-local/window-local values of vim options.\n          options: {}\n        };\n      }\n      return cm.state.vim;\n    }\n    var vimGlobalState;\n    function resetVimGlobalState() {\n      vimGlobalState = {\n        // The current search query.\n        searchQuery: null,\n        // Whether we are searching backwards.\n        searchIsReversed: false,\n        // Replace part of the last substituted pattern\n        lastSubstituteReplacePart: undefined,\n        jumpList: createCircularJumpList(),\n        macroModeState: new MacroModeState,\n        // Recording latest f, t, F or T motion command.\n        lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n        registerController: new RegisterController({}),\n        // search history buffer\n        searchHistoryController: new HistoryController(),\n        // ex Command history buffer\n        exCommandHistoryController : new HistoryController()\n      };\n      for (var optionName in options) {\n        var option = options[optionName];\n        option.value = option.defaultValue;\n      }\n    }\n\n    var lastInsertModeKeyTimer;\n    var vimApi= {\n      buildKeyMap: function() {\n        // TODO: Convert keymap into dictionary format for fast lookup.\n      },\n      // Testing hook, though it might be useful to expose the register\n      // controller anyways.\n      getRegisterController: function() {\n        return vimGlobalState.registerController;\n      },\n      // Testing hook.\n      resetVimGlobalState_: resetVimGlobalState,\n\n      // Testing hook.\n      getVimGlobalState_: function() {\n        return vimGlobalState;\n      },\n\n      // Testing hook.\n      maybeInitVimState_: maybeInitVimState,\n\n      suppressErrorLogging: false,\n\n      InsertModeKey: InsertModeKey,\n      map: function(lhs, rhs, ctx) {\n        // Add user defined key bindings.\n        exCommandDispatcher.map(lhs, rhs, ctx);\n      },\n      unmap: function(lhs, ctx) {\n        exCommandDispatcher.unmap(lhs, ctx);\n      },\n      // Non-recursive map function.\n      // NOTE: This will not create mappings to key maps that aren't present\n      // in the default key map. See TODO at bottom of function.\n      noremap: function(lhs, rhs, ctx) {\n        function toCtxArray(ctx) {\n          return ctx ? [ctx] : ['normal', 'insert', 'visual'];\n        }\n        var ctxsToMap = toCtxArray(ctx);\n        // Look through all actual defaults to find a map candidate.\n        var actualLength = defaultKeymap.length, origLength = defaultKeymapLength;\n        for (var i = actualLength - origLength;\n             i < actualLength && ctxsToMap.length;\n             i++) {\n          var mapping = defaultKeymap[i];\n          // Omit mappings that operate in the wrong context(s) and those of invalid type.\n          if (mapping.keys == rhs &&\n              (!ctx || !mapping.context || mapping.context === ctx) &&\n              mapping.type.substr(0, 2) !== 'ex' &&\n              mapping.type.substr(0, 3) !== 'key') {\n            // Make a shallow copy of the original keymap entry.\n            var newMapping = {};\n            for (var key in mapping) {\n              newMapping[key] = mapping[key];\n            }\n            // Modify it point to the new mapping with the proper context.\n            newMapping.keys = lhs;\n            if (ctx && !newMapping.context) {\n              newMapping.context = ctx;\n            }\n            // Add it to the keymap with a higher priority than the original.\n            this._mapCommand(newMapping);\n            // Record the mapped contexts as complete.\n            var mappedCtxs = toCtxArray(mapping.context);\n            ctxsToMap = ctxsToMap.filter(function(el) { return mappedCtxs.indexOf(el) === -1; });\n          }\n        }\n        // TODO: Create non-recursive keyToKey mappings for the unmapped contexts once those exist.\n      },\n      // Remove all user-defined mappings for the provided context.\n      mapclear: function(ctx) {\n        // Partition the existing keymap into user-defined and true defaults.\n        var actualLength = defaultKeymap.length,\n            origLength = defaultKeymapLength;\n        var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n        defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n        if (ctx) {\n          // If a specific context is being cleared, we need to keep mappings\n          // from all other contexts.\n          for (var i = userKeymap.length - 1; i >= 0; i--) {\n            var mapping = userKeymap[i];\n            if (ctx !== mapping.context) {\n              if (mapping.context) {\n                this._mapCommand(mapping);\n              } else {\n                // `mapping` applies to all contexts so create keymap copies\n                // for each context except the one being cleared.\n                var contexts = ['normal', 'insert', 'visual'];\n                for (var j in contexts) {\n                  if (contexts[j] !== ctx) {\n                    var newMapping = {};\n                    for (var key in mapping) {\n                      newMapping[key] = mapping[key];\n                    }\n                    newMapping.context = contexts[j];\n                    this._mapCommand(newMapping);\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n      // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n      setOption: setOption,\n      getOption: getOption,\n      defineOption: defineOption,\n      defineEx: function(name, prefix, func){\n        if (!prefix) {\n          prefix = name;\n        } else if (name.indexOf(prefix) !== 0) {\n          throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n        }\n        exCommands[name]=func;\n        exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n      },\n      handleKey: function (cm, key, origin) {\n        var command = this.findKey(cm, key, origin);\n        if (typeof command === 'function') {\n          return command();\n        }\n      },\n      /**\n       * This is the outermost function called by CodeMirror, after keys have\n       * been mapped to their Vim equivalents.\n       *\n       * Finds a command based on the key (and cached keys if there is a\n       * multi-key sequence). Returns `undefined` if no key is matched, a noop\n       * function if a partial match is found (multi-key), and a function to\n       * execute the bound command if a a key is matched. The function always\n       * returns true.\n       */\n      findKey: function(cm, key, origin) {\n        var vim = maybeInitVimState(cm);\n        function handleMacroRecording() {\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            if (key == 'q') {\n              macroModeState.exitMacroRecordMode();\n              clearInputState(cm);\n              return true;\n            }\n            if (origin != 'mapping') {\n              logKey(macroModeState, key);\n            }\n          }\n        }\n        function handleEsc() {\n          if (key == '<Esc>') {\n            // Clear input state and get back to normal mode.\n            clearInputState(cm);\n            if (vim.visualMode) {\n              exitVisualMode(cm);\n            } else if (vim.insertMode) {\n              exitInsertMode(cm);\n            }\n            return true;\n          }\n        }\n        function doKeyToKey(keys) {\n          // TODO: prevent infinite recursion.\n          var match;\n          while (keys) {\n            // Pull off one command key, which is either a single character\n            // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n            match = (/<\\w+-.+?>|<\\w+>|./).exec(keys);\n            key = match[0];\n            keys = keys.substring(match.index + key.length);\n            CodeMirror.Vim.handleKey(cm, key, 'mapping');\n          }\n        }\n\n        function handleKeyInsertMode() {\n          if (handleEsc()) { return true; }\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          var keysAreChars = key.length == 1;\n          var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n          // Need to check all key substrings in insert mode.\n          while (keys.length > 1 && match.type != 'full') {\n            var keys = vim.inputState.keyBuffer = keys.slice(1);\n            var thisMatch = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n            if (thisMatch.type != 'none') { match = thisMatch; }\n          }\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') {\n            if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n            lastInsertModeKeyTimer = window.setTimeout(\n              function() { if (vim.insertMode && vim.inputState.keyBuffer) { clearInputState(cm); } },\n              getOption('insertModeEscKeysTimeout'));\n            return !keysAreChars;\n          }\n\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            for (var i = 0; i < selections.length; i++) {\n              var here = selections[i].head;\n              cm.replaceRange('', offsetCursor(here, 0, -(keys.length - 1)), here, '+input');\n            }\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n          }\n          clearInputState(cm);\n          return match.command;\n        }\n\n        function handleKeyNonInsertMode() {\n          if (handleMacroRecording() || handleEsc()) { return true; }\n\n          var keys = vim.inputState.keyBuffer = vim.inputState.keyBuffer + key;\n          if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (!keysMatcher) { clearInputState(cm); return false; }\n          var context = vim.visualMode ? 'visual' :\n                                         'normal';\n          var match = commandDispatcher.matchCommand(keysMatcher[2] || keysMatcher[1], defaultKeymap, vim.inputState, context);\n          if (match.type == 'none') { clearInputState(cm); return false; }\n          else if (match.type == 'partial') { return true; }\n\n          vim.inputState.keyBuffer = '';\n          var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n          if (keysMatcher[1] && keysMatcher[1] != '0') {\n            vim.inputState.pushRepeatDigit(keysMatcher[1]);\n          }\n          return match.command;\n        }\n\n        var command;\n        if (vim.insertMode) { command = handleKeyInsertMode(); }\n        else { command = handleKeyNonInsertMode(); }\n        if (command === false) {\n          return !vim.insertMode && key.length === 1 ? function() { return true; } : undefined;\n        } else if (command === true) {\n          // TODO: Look into using CodeMirror's multi-key handling.\n          // Return no-op since we are caching the key. Counts as handled, but\n          // don't want act on it just yet.\n          return function() { return true; };\n        } else {\n          return function() {\n            return cm.operation(function() {\n              cm.curOp.isVimOp = true;\n              try {\n                if (command.type == 'keyToKey') {\n                  doKeyToKey(command.toKeys);\n                } else {\n                  commandDispatcher.processCommand(cm, vim, command);\n                }\n              } catch (e) {\n                // clear VIM state in case it's in a bad state.\n                cm.state.vim = undefined;\n                maybeInitVimState(cm);\n                if (!CodeMirror.Vim.suppressErrorLogging) {\n                  console['log'](e);\n                }\n                throw e;\n              }\n              return true;\n            });\n          };\n        }\n      },\n      handleEx: function(cm, input) {\n        exCommandDispatcher.processCommand(cm, input);\n      },\n\n      defineMotion: defineMotion,\n      defineAction: defineAction,\n      defineOperator: defineOperator,\n      mapCommand: mapCommand,\n      _mapCommand: _mapCommand,\n\n      defineRegister: defineRegister,\n\n      exitVisualMode: exitVisualMode,\n      exitInsertMode: exitInsertMode\n    };\n\n    // Represents the current input state.\n    function InputState() {\n      this.prefixRepeat = [];\n      this.motionRepeat = [];\n\n      this.operator = null;\n      this.operatorArgs = null;\n      this.motion = null;\n      this.motionArgs = null;\n      this.keyBuffer = []; // For matching multi-key commands.\n      this.registerName = null; // Defaults to the unnamed register.\n    }\n    InputState.prototype.pushRepeatDigit = function(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    };\n    InputState.prototype.getRepeat = function() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    };\n\n    function clearInputState(cm, reason) {\n      cm.state.vim.inputState = new InputState();\n      CodeMirror.signal(cm, 'vim-command-done', reason);\n    }\n\n    /*\n     * Register stores information about copy and paste registers.  Besides\n     * text, a register must store whether it is linewise (i.e., when it is\n     * pasted, should it insert itself into a new line, or should the text be\n     * inserted at the cursor position.)\n     */\n    function Register(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    Register.prototype = {\n      setText: function(text, linewise, blockwise) {\n        this.keyBuffer = [text || ''];\n        this.linewise = !!linewise;\n        this.blockwise = !!blockwise;\n      },\n      pushText: function(text, linewise) {\n        // if this register has ever been set to linewise, use linewise.\n        if (linewise) {\n          if (!this.linewise) {\n            this.keyBuffer.push('\\n');\n          }\n          this.linewise = true;\n        }\n        this.keyBuffer.push(text);\n      },\n      pushInsertModeChanges: function(changes) {\n        this.insertModeChanges.push(createInsertModeChanges(changes));\n      },\n      pushSearchQuery: function(query) {\n        this.searchQueries.push(query);\n      },\n      clear: function() {\n        this.keyBuffer = [];\n        this.insertModeChanges = [];\n        this.searchQueries = [];\n        this.linewise = false;\n      },\n      toString: function() {\n        return this.keyBuffer.join('');\n      }\n    };\n\n    /**\n     * Defines an external register.\n     *\n     * The name should be a single character that will be used to reference the register.\n     * The register should support setText, pushText, clear, and toString(). See Register\n     * for a reference implementation.\n     */\n    function defineRegister(name, register) {\n      var registers = vimGlobalState.registerController.registers;\n      if (!name || name.length != 1) {\n        throw Error('Register name must be 1 character');\n      }\n      if (registers[name]) {\n        throw Error('Register already defined ' + name);\n      }\n      registers[name] = register;\n      validRegisters.push(name);\n    }\n\n    /*\n     * vim registers allow you to keep many independent copy and paste buffers.\n     * See http://usevim.com/2012/04/13/registers/ for an introduction.\n     *\n     * RegisterController keeps the state of all the registers.  An initial\n     * state may be passed in.  The unnamed register '\"' will always be\n     * overridden.\n     */\n    function RegisterController(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n    }\n    RegisterController.prototype = {\n      pushText: function(registerName, operator, text, linewise, blockwise) {\n        if (linewise && text.charAt(text.length - 1) !== '\\n'){\n          text += '\\n';\n        }\n        // Lowercase and uppercase registers refer to the same register.\n        // Uppercase just means append.\n        var register = this.isValidRegister(registerName) ?\n            this.getRegister(registerName) : null;\n        // if no register/an invalid register was specified, things go to the\n        // default registers\n        if (!register) {\n          switch (operator) {\n            case 'yank':\n              // The 0 register contains the text from the most recent yank.\n              this.registers['0'] = new Register(text, linewise, blockwise);\n              break;\n            case 'delete':\n            case 'change':\n              if (text.indexOf('\\n') == -1) {\n                // Delete less than 1 line. Update the small delete register.\n                this.registers['-'] = new Register(text, linewise);\n              } else {\n                // Shift down the contents of the numbered registers and put the\n                // deleted text into register 1.\n                this.shiftNumericRegisters_();\n                this.registers['1'] = new Register(text, linewise);\n              }\n              break;\n          }\n          // Make sure the unnamed register is set to what just happened\n          this.unnamedRegister.setText(text, linewise, blockwise);\n          return;\n        }\n\n        // If we've gotten to this point, we've actually specified a register\n        var append = isUpperCase(registerName);\n        if (append) {\n          register.pushText(text, linewise);\n        } else {\n          register.setText(text, linewise, blockwise);\n        }\n        // The unnamed register always has the same value as the last used\n        // register.\n        this.unnamedRegister.setText(register.toString(), linewise);\n      },\n      // Gets the register named @name.  If one of @name doesn't already exist,\n      // create it.  If @name is invalid, return the unnamedRegister.\n      getRegister: function(name) {\n        if (!this.isValidRegister(name)) {\n          return this.unnamedRegister;\n        }\n        name = name.toLowerCase();\n        if (!this.registers[name]) {\n          this.registers[name] = new Register();\n        }\n        return this.registers[name];\n      },\n      isValidRegister: function(name) {\n        return name && inArray(name, validRegisters);\n      },\n      shiftNumericRegisters_: function() {\n        for (var i = 9; i >= 2; i--) {\n          this.registers[i] = this.getRegister('' + (i - 1));\n        }\n      }\n    };\n    function HistoryController() {\n        this.historyBuffer = [];\n        this.iterator = 0;\n        this.initialPrefix = null;\n    }\n    HistoryController.prototype = {\n      // the input argument here acts a user entered prefix for a small time\n      // until we start autocompletion in which case it is the autocompleted.\n      nextMatch: function (input, up) {\n        var historyBuffer = this.historyBuffer;\n        var dir = up ? -1 : 1;\n        if (this.initialPrefix === null) this.initialPrefix = input;\n        for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i+= dir) {\n          var element = historyBuffer[i];\n          for (var j = 0; j <= element.length; j++) {\n            if (this.initialPrefix == element.substring(0, j)) {\n              this.iterator = i;\n              return element;\n            }\n          }\n        }\n        // should return the user input in case we reach the end of buffer.\n        if (i >= historyBuffer.length) {\n          this.iterator = historyBuffer.length;\n          return this.initialPrefix;\n        }\n        // return the last autocompleted query or exCommand as it is.\n        if (i < 0 ) return input;\n      },\n      pushInput: function(input) {\n        var index = this.historyBuffer.indexOf(input);\n        if (index > -1) this.historyBuffer.splice(index, 1);\n        if (input.length) this.historyBuffer.push(input);\n      },\n      reset: function() {\n        this.initialPrefix = null;\n        this.iterator = this.historyBuffer.length;\n      }\n    };\n    var commandDispatcher = {\n      matchCommand: function(keys, keyMap, inputState, context) {\n        var matches = commandMatches(keys, keyMap, context, inputState);\n        if (!matches.full && !matches.partial) {\n          return {type: 'none'};\n        } else if (!matches.full && matches.partial) {\n          return {type: 'partial'};\n        }\n\n        var bestMatch;\n        for (var i = 0; i < matches.full.length; i++) {\n          var match = matches.full[i];\n          if (!bestMatch) {\n            bestMatch = match;\n          }\n        }\n        if (bestMatch.keys.slice(-11) == '<character>') {\n          var character = lastChar(keys);\n          if (!character) return {type: 'none'};\n          inputState.selectedCharacter = character;\n        }\n        return {type: 'full', command: bestMatch};\n      },\n      processCommand: function(cm, vim, command) {\n        vim.inputState.repeatOverride = command.repeatOverride;\n        switch (command.type) {\n          case 'motion':\n            this.processMotion(cm, vim, command);\n            break;\n          case 'operator':\n            this.processOperator(cm, vim, command);\n            break;\n          case 'operatorMotion':\n            this.processOperatorMotion(cm, vim, command);\n            break;\n          case 'action':\n            this.processAction(cm, vim, command);\n            break;\n          case 'search':\n            this.processSearch(cm, vim, command);\n            break;\n          case 'ex':\n          case 'keyToEx':\n            this.processEx(cm, vim, command);\n            break;\n          default:\n            break;\n        }\n      },\n      processMotion: function(cm, vim, command) {\n        vim.inputState.motion = command.motion;\n        vim.inputState.motionArgs = copyArgs(command.motionArgs);\n        this.evalInput(cm, vim);\n      },\n      processOperator: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        if (inputState.operator) {\n          if (inputState.operator == command.operator) {\n            // Typing an operator twice like 'dd' makes the operator operate\n            // linewise\n            inputState.motion = 'expandToLine';\n            inputState.motionArgs = { linewise: true };\n            this.evalInput(cm, vim);\n            return;\n          } else {\n            // 2 different operators in a row doesn't make sense.\n            clearInputState(cm);\n          }\n        }\n        inputState.operator = command.operator;\n        inputState.operatorArgs = copyArgs(command.operatorArgs);\n        if (command.exitVisualBlock) {\n            vim.visualBlock = false;\n            updateCmSelection(cm);\n        }\n        if (vim.visualMode) {\n          // Operating on a selection in visual mode. We don't need a motion.\n          this.evalInput(cm, vim);\n        }\n      },\n      processOperatorMotion: function(cm, vim, command) {\n        var visualMode = vim.visualMode;\n        var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n        if (operatorMotionArgs) {\n          // Operator motions may have special behavior in visual mode.\n          if (visualMode && operatorMotionArgs.visualLine) {\n            vim.visualLine = true;\n          }\n        }\n        this.processOperator(cm, vim, command);\n        if (!visualMode) {\n          this.processMotion(cm, vim, command);\n        }\n      },\n      processAction: function(cm, vim, command) {\n        var inputState = vim.inputState;\n        var repeat = inputState.getRepeat();\n        var repeatIsExplicit = !!repeat;\n        var actionArgs = copyArgs(command.actionArgs) || {};\n        if (inputState.selectedCharacter) {\n          actionArgs.selectedCharacter = inputState.selectedCharacter;\n        }\n        // Actions may or may not have motions and operators. Do these first.\n        if (command.operator) {\n          this.processOperator(cm, vim, command);\n        }\n        if (command.motion) {\n          this.processMotion(cm, vim, command);\n        }\n        if (command.motion || command.operator) {\n          this.evalInput(cm, vim);\n        }\n        actionArgs.repeat = repeat || 1;\n        actionArgs.repeatIsExplicit = repeatIsExplicit;\n        actionArgs.registerName = inputState.registerName;\n        clearInputState(cm);\n        vim.lastMotion = null;\n        if (command.isEdit) {\n          this.recordLastEdit(vim, inputState, command);\n        }\n        actions[command.action](cm, actionArgs, vim);\n      },\n      processSearch: function(cm, vim, command) {\n        if (!cm.getSearchCursor) {\n          // Search depends on SearchCursor.\n          return;\n        }\n        var forward = command.searchArgs.forward;\n        var wholeWordOnly = command.searchArgs.wholeWordOnly;\n        getSearchState(cm).setReversed(!forward);\n        var promptPrefix = (forward) ? '/' : '?';\n        var originalQuery = getSearchState(cm).getQuery();\n        var originalScrollPos = cm.getScrollInfo();\n        function handleQuery(query, ignoreCase, smartCase) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          try {\n            updateSearchQuery(cm, query, ignoreCase, smartCase);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + query);\n            clearInputState(cm);\n            return;\n          }\n          commandDispatcher.processMotion(cm, vim, {\n            type: 'motion',\n            motion: 'findNext',\n            motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n          });\n        }\n        function onPromptClose(query) {\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isRecording) {\n            logSearchQuery(macroModeState, query);\n          }\n        }\n        function onPromptKeyUp(e, query, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Up' || keyName == 'Down') {\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n            close(query);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.searchHistoryController.reset();\n          }\n          var parsedQuery;\n          try {\n            parsedQuery = updateSearchQuery(cm, query,\n                true /** ignoreCase */, true /** smartCase */);\n          } catch (e) {\n            // Swallow bad regexes for incremental search.\n          }\n          if (parsedQuery) {\n            cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n          } else {\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          }\n        }\n        function onPromptKeyDown(e, query, close) {\n          var keyName = CodeMirror.keyName(e);\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && query == '')) {\n            vimGlobalState.searchHistoryController.pushInput(query);\n            vimGlobalState.searchHistoryController.reset();\n            updateSearchQuery(cm, originalQuery);\n            clearSearchHighlight(cm);\n            cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          } else if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          }\n        }\n        switch (command.searchArgs.querySrc) {\n          case 'prompt':\n            var macroModeState = vimGlobalState.macroModeState;\n            if (macroModeState.isPlaying) {\n              var query = macroModeState.replaySearchQueries.shift();\n              handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            } else {\n              showPrompt(cm, {\n                  onClose: onPromptClose,\n                  prefix: promptPrefix,\n                  desc: searchPromptDesc,\n                  onKeyUp: onPromptKeyUp,\n                  onKeyDown: onPromptKeyDown\n              });\n            }\n            break;\n          case 'wordUnderCursor':\n            var word = expandWordUnderCursor(cm, false /** inclusive */,\n                true /** forward */, false /** bigWord */,\n                true /** noSymbol */);\n            var isKeyword = true;\n            if (!word) {\n              word = expandWordUnderCursor(cm, false /** inclusive */,\n                  true /** forward */, false /** bigWord */,\n                  false /** noSymbol */);\n              isKeyword = false;\n            }\n            if (!word) {\n              return;\n            }\n            var query = cm.getLine(word.start.line).substring(word.start.ch,\n                word.end.ch);\n            if (isKeyword && wholeWordOnly) {\n                query = '\\\\b' + query + '\\\\b';\n            } else {\n              query = escapeRegex(query);\n            }\n\n            // cachedCursor is used to save the old position of the cursor\n            // when * or # causes vim to seek for the nearest word and shift\n            // the cursor before entering the motion.\n            vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n            cm.setCursor(word.start);\n\n            handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n            break;\n        }\n      },\n      processEx: function(cm, vim, command) {\n        function onPromptClose(input) {\n          // Give the prompt some time to close so that if processCommand shows\n          // an error, the elements don't overlap.\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          exCommandDispatcher.processCommand(cm, input);\n        }\n        function onPromptKeyDown(e, input, close) {\n          var keyName = CodeMirror.keyName(e), up, offset;\n          if (keyName == 'Esc' || keyName == 'Ctrl-C' || keyName == 'Ctrl-[' ||\n              (keyName == 'Backspace' && input == '')) {\n            vimGlobalState.exCommandHistoryController.pushInput(input);\n            vimGlobalState.exCommandHistoryController.reset();\n            CodeMirror.e_stop(e);\n            clearInputState(cm);\n            close();\n            cm.focus();\n          }\n          if (keyName == 'Up' || keyName == 'Down') {\n            CodeMirror.e_stop(e);\n            up = keyName == 'Up' ? true : false;\n            offset = e.target ? e.target.selectionEnd : 0;\n            input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n            close(input);\n            if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n          } else if (keyName == 'Ctrl-U') {\n            // Ctrl-U clears input.\n            CodeMirror.e_stop(e);\n            close('');\n          } else {\n            if ( keyName != 'Left' && keyName != 'Right' && keyName != 'Ctrl' && keyName != 'Alt' && keyName != 'Shift')\n              vimGlobalState.exCommandHistoryController.reset();\n          }\n        }\n        if (command.type == 'keyToEx') {\n          // Handle user defined Ex to Ex mappings\n          exCommandDispatcher.processCommand(cm, command.exArgs.input);\n        } else {\n          if (vim.visualMode) {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':', value: '\\'<,\\'>',\n                onKeyDown: onPromptKeyDown, selectValueOnOpen: false});\n          } else {\n            showPrompt(cm, { onClose: onPromptClose, prefix: ':',\n                onKeyDown: onPromptKeyDown});\n          }\n        }\n      },\n      evalInput: function(cm, vim) {\n        // If the motion command is set, execute both the operator and motion.\n        // Otherwise return.\n        var inputState = vim.inputState;\n        var motion = inputState.motion;\n        var motionArgs = inputState.motionArgs || {};\n        var operator = inputState.operator;\n        var operatorArgs = inputState.operatorArgs || {};\n        var registerName = inputState.registerName;\n        var sel = vim.sel;\n        // TODO: Make sure cm and vim selections are identical outside visual mode.\n        var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n        var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n        var oldHead = copyCursor(origHead);\n        var oldAnchor = copyCursor(origAnchor);\n        var newHead, newAnchor;\n        var repeat;\n        if (operator) {\n          this.recordLastEdit(vim, inputState);\n        }\n        if (inputState.repeatOverride !== undefined) {\n          // If repeatOverride is specified, that takes precedence over the\n          // input state's repeat. Used by Ex mode and can be user defined.\n          repeat = inputState.repeatOverride;\n        } else {\n          repeat = inputState.getRepeat();\n        }\n        if (repeat > 0 && motionArgs.explicitRepeat) {\n          motionArgs.repeatIsExplicit = true;\n        } else if (motionArgs.noRepeat ||\n            (!motionArgs.explicitRepeat && repeat === 0)) {\n          repeat = 1;\n          motionArgs.repeatIsExplicit = false;\n        }\n        if (inputState.selectedCharacter) {\n          // If there is a character input, stick it in all of the arg arrays.\n          motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n              inputState.selectedCharacter;\n        }\n        motionArgs.repeat = repeat;\n        clearInputState(cm);\n        if (motion) {\n          var motionResult = motions[motion](cm, origHead, motionArgs, vim);\n          vim.lastMotion = motions[motion];\n          if (!motionResult) {\n            return;\n          }\n          if (motionArgs.toJumplist) {\n            var jumpList = vimGlobalState.jumpList;\n            // if the current motion is # or *, use cachedCursor\n            var cachedCursor = jumpList.cachedCursor;\n            if (cachedCursor) {\n              recordJumpPosition(cm, cachedCursor, motionResult);\n              delete jumpList.cachedCursor;\n            } else {\n              recordJumpPosition(cm, origHead, motionResult);\n            }\n          }\n          if (motionResult instanceof Array) {\n            newAnchor = motionResult[0];\n            newHead = motionResult[1];\n          } else {\n            newHead = motionResult;\n          }\n          // TODO: Handle null returns from motion commands better.\n          if (!newHead) {\n            newHead = copyCursor(origHead);\n          }\n          if (vim.visualMode) {\n            if (!(vim.visualBlock && newHead.ch === Infinity)) {\n              newHead = clipCursorToContent(cm, newHead);\n            }\n            if (newAnchor) {\n              newAnchor = clipCursorToContent(cm, newAnchor);\n            }\n            newAnchor = newAnchor || oldAnchor;\n            sel.anchor = newAnchor;\n            sel.head = newHead;\n            updateCmSelection(cm);\n            updateMark(cm, vim, '<',\n                cursorIsBefore(newAnchor, newHead) ? newAnchor\n                    : newHead);\n            updateMark(cm, vim, '>',\n                cursorIsBefore(newAnchor, newHead) ? newHead\n                    : newAnchor);\n          } else if (!operator) {\n            newHead = clipCursorToContent(cm, newHead);\n            cm.setCursor(newHead.line, newHead.ch);\n          }\n        }\n        if (operator) {\n          if (operatorArgs.lastSel) {\n            // Replaying a visual mode operation\n            newAnchor = oldAnchor;\n            var lastSel = operatorArgs.lastSel;\n            var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n            var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n            if (lastSel.visualLine) {\n              // Linewise Visual mode: The same number of lines.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            } else if (lastSel.visualBlock) {\n              // Blockwise Visual mode: The same number of lines and columns.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n            } else if (lastSel.head.line == lastSel.anchor.line) {\n              // Normal Visual mode within one line: The same number of characters.\n              newHead = Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n            } else {\n              // Normal Visual mode with several lines: The same number of lines, in the\n              // last line the same number of characters as in the last line the last time.\n              newHead = Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n            }\n            vim.visualMode = true;\n            vim.visualLine = lastSel.visualLine;\n            vim.visualBlock = lastSel.visualBlock;\n            sel = vim.sel = {\n              anchor: newAnchor,\n              head: newHead\n            };\n            updateCmSelection(cm);\n          } else if (vim.visualMode) {\n            operatorArgs.lastSel = {\n              anchor: copyCursor(sel.anchor),\n              head: copyCursor(sel.head),\n              visualBlock: vim.visualBlock,\n              visualLine: vim.visualLine\n            };\n          }\n          var curStart, curEnd, linewise, mode;\n          var cmSel;\n          if (vim.visualMode) {\n            // Init visual op\n            curStart = cursorMin(sel.head, sel.anchor);\n            curEnd = cursorMax(sel.head, sel.anchor);\n            linewise = vim.visualLine || operatorArgs.linewise;\n            mode = vim.visualBlock ? 'block' :\n                   linewise ? 'line' :\n                   'char';\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode);\n            if (linewise) {\n              var ranges = cmSel.ranges;\n              if (mode == 'block') {\n                // Linewise operators in visual block mode extend to end of line\n                for (var i = 0; i < ranges.length; i++) {\n                  ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n                }\n              } else if (mode == 'line') {\n                ranges[0].head = Pos(ranges[0].head.line + 1, 0);\n              }\n            }\n          } else {\n            // Init motion op\n            curStart = copyCursor(newAnchor || oldAnchor);\n            curEnd = copyCursor(newHead || oldHead);\n            if (cursorIsBefore(curEnd, curStart)) {\n              var tmp = curStart;\n              curStart = curEnd;\n              curEnd = tmp;\n            }\n            linewise = motionArgs.linewise || operatorArgs.linewise;\n            if (linewise) {\n              // Expand selection to entire line.\n              expandSelectionToLine(cm, curStart, curEnd);\n            } else if (motionArgs.forward) {\n              // Clip to trailing newlines only if the motion goes forward.\n              clipToLine(cm, curStart, curEnd);\n            }\n            mode = 'char';\n            var exclusive = !motionArgs.inclusive || linewise;\n            cmSel = makeCmSelection(cm, {\n              anchor: curStart,\n              head: curEnd\n            }, mode, exclusive);\n          }\n          cm.setSelections(cmSel.ranges, cmSel.primary);\n          vim.lastMotion = null;\n          operatorArgs.repeat = repeat; // For indent in visual mode.\n          operatorArgs.registerName = registerName;\n          // Keep track of linewise as it affects how paste and change behave.\n          operatorArgs.linewise = linewise;\n          var operatorMoveTo = operators[operator](\n            cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n          if (vim.visualMode) {\n            exitVisualMode(cm, operatorMoveTo != null);\n          }\n          if (operatorMoveTo) {\n            cm.setCursor(operatorMoveTo);\n          }\n        }\n      },\n      recordLastEdit: function(vim, inputState, actionCommand) {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        vim.lastEditInputState = inputState;\n        vim.lastEditActionCommand = actionCommand;\n        macroModeState.lastInsertModeChanges.changes = [];\n        macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n        macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n      }\n    };\n\n    /**\n     * typedef {Object{line:number,ch:number}} Cursor An object containing the\n     *     position of the cursor.\n     */\n    // All of the functions below return Cursor objects.\n    var motions = {\n      moveToTopLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToMiddleLine: function(cm) {\n        var range = getUserVisibleLines(cm);\n        var line = Math.floor((range.top + range.bottom) * 0.5);\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      moveToBottomLine: function(cm, _head, motionArgs) {\n        var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n        return Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n      },\n      expandToLine: function(_cm, head, motionArgs) {\n        // Expands forward to end of line, and then to next line if repeat is\n        // >1. Does not handle backward motion!\n        var cur = head;\n        return Pos(cur.line + motionArgs.repeat - 1, Infinity);\n      },\n      findNext: function(cm, _head, motionArgs) {\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        if (!query) {\n          return;\n        }\n        var prev = !motionArgs.forward;\n        // If search is initiated with ? instead of /, negate direction.\n        prev = (state.isReversed()) ? !prev : prev;\n        highlightSearchMatches(cm, query);\n        return findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      },\n      goToMark: function(cm, _head, motionArgs, vim) {\n        var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter);\n        if (pos) {\n          return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n        }\n        return null;\n      },\n      moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n        if (vim.visualBlock && motionArgs.sameLine) {\n          var sel = vim.sel;\n          return [\n            clipCursorToContent(cm, Pos(sel.anchor.line, sel.head.ch)),\n            clipCursorToContent(cm, Pos(sel.head.line, sel.anchor.ch))\n          ];\n        } else {\n          return ([vim.sel.head, vim.sel.anchor]);\n        }\n      },\n      jumpToMark: function(cm, head, motionArgs, vim) {\n        var best = head;\n        for (var i = 0; i < motionArgs.repeat; i++) {\n          var cursor = best;\n          for (var key in vim.marks) {\n            if (!isLowerCase(key)) {\n              continue;\n            }\n            var mark = vim.marks[key].find();\n            var isWrongDirection = (motionArgs.forward) ?\n              cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n            if (isWrongDirection) {\n              continue;\n            }\n            if (motionArgs.linewise && (mark.line == cursor.line)) {\n              continue;\n            }\n\n            var equal = cursorEqual(cursor, best);\n            var between = (motionArgs.forward) ?\n              cursorIsBetween(cursor, mark, best) :\n              cursorIsBetween(best, mark, cursor);\n\n            if (equal || between) {\n              best = mark;\n            }\n          }\n        }\n\n        if (motionArgs.linewise) {\n          // Vim places the cursor on the first non-whitespace character of\n          // the line if there is one, else it places the cursor at the end\n          // of the line, regardless of whether a mark was found.\n          best = Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n        }\n        return best;\n      },\n      moveByCharacters: function(_cm, head, motionArgs) {\n        var cur = head;\n        var repeat = motionArgs.repeat;\n        var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n        return Pos(cur.line, ch);\n      },\n      moveByLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        var endCh = cur.ch;\n        // Depending what our last motion was, we may want to do different\n        // things. If our last motion was moving vertically, we want to\n        // preserve the HPos from our last horizontal move.  If our last motion\n        // was going to the end of a line, moving vertically we should go to\n        // the end of the line, etc.\n        switch (vim.lastMotion) {\n          case this.moveByLines:\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveToColumn:\n          case this.moveToEol:\n            endCh = vim.lastHPos;\n            break;\n          default:\n            vim.lastHPos = endCh;\n        }\n        var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n        var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n        var first = cm.firstLine();\n        var last = cm.lastLine();\n        var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n        var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n        if (hasMarkedText) {\n          line = posV.line;\n          endCh = posV.ch;\n        }\n        // Vim go to line begin or line end when cursor at first/last line and\n        // move to previous/next line is triggered.\n        if (line < first && cur.line == first){\n          return this.moveToStartOfLine(cm, head, motionArgs, vim);\n        }else if (line > last && cur.line == last){\n            return this.moveToEol(cm, head, motionArgs, vim, true);\n        }\n        if (motionArgs.toFirstChar){\n          endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n          vim.lastHPos = endCh;\n        }\n        vim.lastHSPos = cm.charCoords(Pos(line, endCh),'div').left;\n        return Pos(line, endCh);\n      },\n      moveByDisplayLines: function(cm, head, motionArgs, vim) {\n        var cur = head;\n        switch (vim.lastMotion) {\n          case this.moveByDisplayLines:\n          case this.moveByScroll:\n          case this.moveByLines:\n          case this.moveToColumn:\n          case this.moveToEol:\n            break;\n          default:\n            vim.lastHSPos = cm.charCoords(cur,'div').left;\n        }\n        var repeat = motionArgs.repeat;\n        var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n        if (res.hitSide) {\n          if (motionArgs.forward) {\n            var lastCharCoords = cm.charCoords(res, 'div');\n            var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n            var res = cm.coordsChar(goalCoords, 'div');\n          } else {\n            var resCoords = cm.charCoords(Pos(cm.firstLine(), 0), 'div');\n            resCoords.left = vim.lastHSPos;\n            res = cm.coordsChar(resCoords, 'div');\n          }\n        }\n        vim.lastHPos = res.ch;\n        return res;\n      },\n      moveByPage: function(cm, head, motionArgs) {\n        // CodeMirror only exposes functions that move the cursor page down, so\n        // doing this bad hack to move the cursor and move it back. evalInput\n        // will move the cursor to where it should be in the end.\n        var curStart = head;\n        var repeat = motionArgs.repeat;\n        return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n      },\n      moveByParagraph: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findParagraph(cm, head, motionArgs.repeat, dir);\n      },\n      moveBySentence: function(cm, head, motionArgs) {\n        var dir = motionArgs.forward ? 1 : -1;\n        return findSentence(cm, head, motionArgs.repeat, dir);\n      },\n      moveByScroll: function(cm, head, motionArgs, vim) {\n        var scrollbox = cm.getScrollInfo();\n        var curEnd = null;\n        var repeat = motionArgs.repeat;\n        if (!repeat) {\n          repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n        }\n        var orig = cm.charCoords(head, 'local');\n        motionArgs.repeat = repeat;\n        var curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n        if (!curEnd) {\n          return null;\n        }\n        var dest = cm.charCoords(curEnd, 'local');\n        cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n        return curEnd;\n      },\n      moveByWords: function(cm, head, motionArgs) {\n        return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n            !!motionArgs.wordEnd, !!motionArgs.bigWord);\n      },\n      moveTillCharacter: function(cm, _head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter);\n        var increment = motionArgs.forward ? -1 : 1;\n        recordLastCharacterSearch(increment, motionArgs);\n        if (!curEnd) return null;\n        curEnd.ch += increment;\n        return curEnd;\n      },\n      moveToCharacter: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        recordLastCharacterSearch(0, motionArgs);\n        return moveToCharacter(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToSymbol: function(cm, head, motionArgs) {\n        var repeat = motionArgs.repeat;\n        return findSymbol(cm, repeat, motionArgs.forward,\n            motionArgs.selectedCharacter) || head;\n      },\n      moveToColumn: function(cm, head, motionArgs, vim) {\n        var repeat = motionArgs.repeat;\n        // repeat is equivalent to which column we want to move to!\n        vim.lastHPos = repeat - 1;\n        vim.lastHSPos = cm.charCoords(head,'div').left;\n        return moveToColumn(cm, repeat);\n      },\n      moveToEol: function(cm, head, motionArgs, vim, keepHPos) {\n        var cur = head;\n        var retval= Pos(cur.line + motionArgs.repeat - 1, Infinity);\n        var end=cm.clipPos(retval);\n        end.ch--;\n        if (!keepHPos) {\n          vim.lastHPos = Infinity;\n          vim.lastHSPos = cm.charCoords(end,'div').left;\n        }\n        return retval;\n      },\n      moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n        // Go to the start of the line where the text begins, or the end for\n        // whitespace-only lines\n        var cursor = head;\n        return Pos(cursor.line,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n      },\n      moveToMatchedSymbol: function(cm, head) {\n        var cursor = head;\n        var line = cursor.line;\n        var ch = cursor.ch;\n        var lineText = cm.getLine(line);\n        var symbol;\n        for (; ch < lineText.length; ch++) {\n          symbol = lineText.charAt(ch);\n          if (symbol && isMatchableSymbol(symbol)) {\n            var style = cm.getTokenTypeAt(Pos(line, ch + 1));\n            if (style !== \"string\" && style !== \"comment\") {\n              break;\n            }\n          }\n        }\n        if (ch < lineText.length) {\n          // Only include angle brackets in analysis if they are being matched.\n          var re = (ch === '<' || ch === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n          var matched = cm.findMatchingBracket(Pos(line, ch), {bracketRegex: re});\n          return matched.to;\n        } else {\n          return cursor;\n        }\n      },\n      moveToStartOfLine: function(_cm, head) {\n        return Pos(head.line, 0);\n      },\n      moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n        var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n        if (motionArgs.repeatIsExplicit) {\n          lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n        }\n        return Pos(lineNum,\n                   findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n      },\n      textObjectManipulation: function(cm, head, motionArgs, vim) {\n        // TODO: lots of possible exceptions that can be thrown here. Try da(\n        //     outside of a () block.\n        var mirroredPairs = {'(': ')', ')': '(',\n                             '{': '}', '}': '{',\n                             '[': ']', ']': '[',\n                             '<': '>', '>': '<'};\n        var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n        var character = motionArgs.selectedCharacter;\n        // 'b' refers to  '()' block.\n        // 'B' refers to  '{}' block.\n        if (character == 'b') {\n          character = '(';\n        } else if (character == 'B') {\n          character = '{';\n        }\n\n        // Inclusive is the difference between a and i\n        // TODO: Instead of using the additional text object map to perform text\n        //     object operations, merge the map into the defaultKeyMap and use\n        //     motionArgs to define behavior. Define separate entries for 'aw',\n        //     'iw', 'a[', 'i[', etc.\n        var inclusive = !motionArgs.textObjectInner;\n\n        var tmp;\n        if (mirroredPairs[character]) {\n          tmp = selectCompanionObject(cm, head, character, inclusive);\n        } else if (selfPaired[character]) {\n          tmp = findBeginningAndEnd(cm, head, character, inclusive);\n        } else if (character === 'W') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     true /** bigWord */);\n        } else if (character === 'w') {\n          tmp = expandWordUnderCursor(cm, inclusive, true /** forward */,\n                                                     false /** bigWord */);\n        } else if (character === 'p') {\n          tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n          motionArgs.linewise = true;\n          if (vim.visualMode) {\n            if (!vim.visualLine) { vim.visualLine = true; }\n          } else {\n            var operatorArgs = vim.inputState.operatorArgs;\n            if (operatorArgs) { operatorArgs.linewise = true; }\n            tmp.end.line--;\n          }\n        } else if (character === 't') {\n          tmp = expandTagUnderCursor(cm, head, inclusive);\n        } else {\n          // No text object defined for this, don't move.\n          return null;\n        }\n\n        if (!cm.state.vim.visualMode) {\n          return [tmp.start, tmp.end];\n        } else {\n          return expandSelection(cm, tmp.start, tmp.end);\n        }\n      },\n\n      repeatLastCharacterSearch: function(cm, head, motionArgs) {\n        var lastSearch = vimGlobalState.lastCharacterSearch;\n        var repeat = motionArgs.repeat;\n        var forward = motionArgs.forward === lastSearch.forward;\n        var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n        cm.moveH(-increment, 'char');\n        motionArgs.inclusive = forward ? true : false;\n        var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n        if (!curEnd) {\n          cm.moveH(increment, 'char');\n          return head;\n        }\n        curEnd.ch += increment;\n        return curEnd;\n      }\n    };\n\n    function defineMotion(name, fn) {\n      motions[name] = fn;\n    }\n\n    function fillArray(val, times) {\n      var arr = [];\n      for (var i = 0; i < times; i++) {\n        arr.push(val);\n      }\n      return arr;\n    }\n    /**\n     * An operator acts on a text selection. It receives the list of selections\n     * as input. The corresponding CodeMirror selection is guaranteed to\n    * match the input selection.\n     */\n    var operators = {\n      change: function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (!vim.visualMode) {\n          text = cm.getRange(anchor, head);\n          var lastState = vim.lastEditInputState || {};\n          if (lastState.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n            // Exclude trailing whitespace if the range is not all whitespace.\n            var match = (/\\s+$/).exec(text);\n            if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n              head = offsetCursor(head, 0, - match[0].length);\n              text = text.slice(0, - match[0].length);\n            }\n          }\n          var prevLineEnd = new Pos(anchor.line - 1, Number.MAX_VALUE);\n          var wasLastLine = cm.firstLine() == cm.lastLine();\n          if (head.line > cm.lastLine() && args.linewise && !wasLastLine) {\n            cm.replaceRange('', prevLineEnd, head);\n          } else {\n            cm.replaceRange('', anchor, head);\n          }\n          if (args.linewise) {\n            // Push the next line back down, if there is a next line.\n            if (!wasLastLine) {\n              cm.setCursor(prevLineEnd);\n              CodeMirror.commands.newlineAndIndent(cm);\n            }\n            // make sure cursor ends up at the end of the line.\n            anchor.ch = Number.MAX_VALUE;\n          }\n          finalHead = anchor;\n        } else if (args.fullLine) {\n            head.ch = Number.MAX_VALUE;\n            head.line--;\n            cm.setSelection(anchor, head)\n            text = cm.getSelection();\n            cm.replaceSelection(\"\");\n            finalHead = anchor;\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'change', text,\n            args.linewise, ranges.length > 1);\n        actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n      },\n      // delete is a javascript keyword.\n      'delete': function(cm, args, ranges) {\n        var finalHead, text;\n        var vim = cm.state.vim;\n        if (!vim.visualBlock) {\n          var anchor = ranges[0].anchor,\n              head = ranges[0].head;\n          if (args.linewise &&\n              head.line != cm.firstLine() &&\n              anchor.line == cm.lastLine() &&\n              anchor.line == head.line - 1) {\n            // Special case for dd on last line (and first line).\n            if (anchor.line == cm.firstLine()) {\n              anchor.ch = 0;\n            } else {\n              anchor = Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n            }\n          }\n          text = cm.getRange(anchor, head);\n          cm.replaceRange('', anchor, head);\n          finalHead = anchor;\n          if (args.linewise) {\n            finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n          }\n        } else {\n          text = cm.getSelection();\n          var replacement = fillArray('', ranges.length);\n          cm.replaceSelections(replacement);\n          finalHead = ranges[0].anchor;\n        }\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'delete', text,\n            args.linewise, vim.visualBlock);\n        return clipCursorToContent(cm, finalHead);\n      },\n      indent: function(cm, args, ranges) {\n        var vim = cm.state.vim;\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        // In visual mode, n> shifts the selection right n times, instead of\n        // shifting n lines right once.\n        var repeat = (vim.visualMode) ? args.repeat : 1;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      indentAuto: function(cm, _args, ranges) {\n        cm.execCommand(\"indentAuto\");\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n      },\n      changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n        var selections = cm.getSelections();\n        var swapped = [];\n        var toLower = args.toLower;\n        for (var j = 0; j < selections.length; j++) {\n          var toSwap = selections[j];\n          var text = '';\n          if (toLower === true) {\n            text = toSwap.toLowerCase();\n          } else if (toLower === false) {\n            text = toSwap.toUpperCase();\n          } else {\n            for (var i = 0; i < toSwap.length; i++) {\n              var character = toSwap.charAt(i);\n              text += isUpperCase(character) ? character.toLowerCase() :\n                  character.toUpperCase();\n            }\n          }\n          swapped.push(text);\n        }\n        cm.replaceSelections(swapped);\n        if (args.shouldMoveCursor){\n          return newHead;\n        } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n          return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n        } else if (args.linewise){\n          return oldAnchor;\n        } else {\n          return cursorMin(ranges[0].anchor, ranges[0].head);\n        }\n      },\n      yank: function(cm, args, ranges, oldAnchor) {\n        var vim = cm.state.vim;\n        var text = cm.getSelection();\n        var endPos = vim.visualMode\n          ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n          : oldAnchor;\n        vimGlobalState.registerController.pushText(\n            args.registerName, 'yank',\n            text, args.linewise, vim.visualBlock);\n        return endPos;\n      }\n    };\n\n    function defineOperator(name, fn) {\n      operators[name] = fn;\n    }\n\n    var actions = {\n      jumpListWalk: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat;\n        var forward = actionArgs.forward;\n        var jumpList = vimGlobalState.jumpList;\n\n        var mark = jumpList.move(cm, forward ? repeat : -repeat);\n        var markPos = mark ? mark.find() : undefined;\n        markPos = markPos ? markPos : cm.getCursor();\n        cm.setCursor(markPos);\n      },\n      scroll: function(cm, actionArgs, vim) {\n        if (vim.visualMode) {\n          return;\n        }\n        var repeat = actionArgs.repeat || 1;\n        var lineHeight = cm.defaultTextHeight();\n        var top = cm.getScrollInfo().top;\n        var delta = lineHeight * repeat;\n        var newPos = actionArgs.forward ? top + delta : top - delta;\n        var cursor = copyCursor(cm.getCursor());\n        var cursorCoords = cm.charCoords(cursor, 'local');\n        if (actionArgs.forward) {\n          if (newPos > cursorCoords.top) {\n             cursor.line += (newPos - cursorCoords.top) / lineHeight;\n             cursor.line = Math.ceil(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(null, cursorCoords.top);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        } else {\n          var newBottom = newPos + cm.getScrollInfo().clientHeight;\n          if (newBottom < cursorCoords.bottom) {\n             cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n             cursor.line = Math.floor(cursor.line);\n             cm.setCursor(cursor);\n             cursorCoords = cm.charCoords(cursor, 'local');\n             cm.scrollTo(\n                 null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n          } else {\n             // Cursor stays within bounds.  Just reposition the scroll window.\n             cm.scrollTo(null, newPos);\n          }\n        }\n      },\n      scrollToCursor: function(cm, actionArgs) {\n        var lineNum = cm.getCursor().line;\n        var charCoords = cm.charCoords(Pos(lineNum, 0), 'local');\n        var height = cm.getScrollInfo().clientHeight;\n        var y = charCoords.top;\n        var lineHeight = charCoords.bottom - y;\n        switch (actionArgs.position) {\n          case 'center': y = y - (height / 2) + lineHeight;\n            break;\n          case 'bottom': y = y - height + lineHeight;\n            break;\n        }\n        cm.scrollTo(null, y);\n      },\n      replayMacro: function(cm, actionArgs, vim) {\n        var registerName = actionArgs.selectedCharacter;\n        var repeat = actionArgs.repeat;\n        var macroModeState = vimGlobalState.macroModeState;\n        if (registerName == '@') {\n          registerName = macroModeState.latestRegister;\n        } else {\n          macroModeState.latestRegister = registerName;\n        }\n        while(repeat--){\n          executeMacroRegister(cm, vim, macroModeState, registerName);\n        }\n      },\n      enterMacroRecordMode: function(cm, actionArgs) {\n        var macroModeState = vimGlobalState.macroModeState;\n        var registerName = actionArgs.selectedCharacter;\n        if (vimGlobalState.registerController.isValidRegister(registerName)) {\n          macroModeState.enterMacroRecordMode(cm, registerName);\n        }\n      },\n      toggleOverwrite: function(cm) {\n        if (!cm.state.overwrite) {\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n      },\n      enterInsertMode: function(cm, actionArgs, vim) {\n        if (cm.getOption('readOnly')) { return; }\n        vim.insertMode = true;\n        vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n        var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n        var sel = vim.sel;\n        var head = actionArgs.head || cm.getCursor('head');\n        var height = cm.listSelections().length;\n        if (insertAt == 'eol') {\n          head = Pos(head.line, lineLength(cm, head.line));\n        } else if (insertAt == 'bol') {\n          head = Pos(head.line, 0);\n        } else if (insertAt == 'charAfter') {\n          head = offsetCursor(head, 0, 1);\n        } else if (insertAt == 'firstNonBlank') {\n          head = motions.moveToFirstNonWhiteSpaceCharacter(cm, head);\n        } else if (insertAt == 'startOfSelectedArea') {\n          if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line < sel.anchor.line) {\n              head = sel.head;\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.min(sel.head.ch, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'endOfSelectedArea') {\n            if (!vim.visualMode)\n              return;\n          if (!vim.visualBlock) {\n            if (sel.head.line >= sel.anchor.line) {\n              head = offsetCursor(sel.head, 0, 1);\n            } else {\n              head = Pos(sel.anchor.line, 0);\n            }\n          } else {\n            head = Pos(\n                Math.min(sel.head.line, sel.anchor.line),\n                Math.max(sel.head.ch + 1, sel.anchor.ch));\n            height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n          }\n        } else if (insertAt == 'inplace') {\n          if (vim.visualMode){\n            return;\n          }\n        } else if (insertAt == 'lastEdit') {\n          head = getLastEditPos(cm) || head;\n        }\n        cm.setOption('disableInput', false);\n        if (actionArgs && actionArgs.replace) {\n          // Handle Replace-mode as a special case of insert mode.\n          cm.toggleOverwrite(true);\n          cm.setOption('keyMap', 'vim-replace');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n        } else {\n          cm.toggleOverwrite(false);\n          cm.setOption('keyMap', 'vim-insert');\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n        }\n        if (!vimGlobalState.macroModeState.isPlaying) {\n          // Only record if not replaying.\n          cm.on('change', onChange);\n          CodeMirror.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        selectForInsert(cm, head, height);\n      },\n      toggleVisualMode: function(cm, actionArgs, vim) {\n        var repeat = actionArgs.repeat;\n        var anchor = cm.getCursor();\n        var head;\n        // TODO: The repeat should actually select number of characters/lines\n        //     equal to the repeat times the size of the previous visual\n        //     operation.\n        if (!vim.visualMode) {\n          // Entering visual mode\n          vim.visualMode = true;\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          head = clipCursorToContent(\n              cm, Pos(anchor.line, anchor.ch + repeat - 1));\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n        } else if (vim.visualLine ^ actionArgs.linewise ||\n            vim.visualBlock ^ actionArgs.blockwise) {\n          // Toggling between modes\n          vim.visualLine = !!actionArgs.linewise;\n          vim.visualBlock = !!actionArgs.blockwise;\n          CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n          updateCmSelection(cm);\n        } else {\n          exitVisualMode(cm);\n        }\n      },\n      reselectLastSelection: function(cm, _actionArgs, vim) {\n        var lastSelection = vim.lastSelection;\n        if (vim.visualMode) {\n          updateLastSelection(cm, vim);\n        }\n        if (lastSelection) {\n          var anchor = lastSelection.anchorMark.find();\n          var head = lastSelection.headMark.find();\n          if (!anchor || !head) {\n            // If the marks have been destroyed due to edits, do nothing.\n            return;\n          }\n          vim.sel = {\n            anchor: anchor,\n            head: head\n          };\n          vim.visualMode = true;\n          vim.visualLine = lastSelection.visualLine;\n          vim.visualBlock = lastSelection.visualBlock;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<', cursorMin(anchor, head));\n          updateMark(cm, vim, '>', cursorMax(anchor, head));\n          CodeMirror.signal(cm, 'vim-mode-change', {\n            mode: 'visual',\n            subMode: vim.visualLine ? 'linewise' :\n                     vim.visualBlock ? 'blockwise' : ''});\n        }\n      },\n      joinLines: function(cm, actionArgs, vim) {\n        var curStart, curEnd;\n        if (vim.visualMode) {\n          curStart = cm.getCursor('anchor');\n          curEnd = cm.getCursor('head');\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curEnd;\n            curEnd = curStart;\n            curStart = tmp;\n          }\n          curEnd.ch = lineLength(cm, curEnd.line) - 1;\n        } else {\n          // Repeat is the number of lines to join. Minimum 2 lines.\n          var repeat = Math.max(actionArgs.repeat, 2);\n          curStart = cm.getCursor();\n          curEnd = clipCursorToContent(cm, Pos(curStart.line + repeat - 1,\n                                               Infinity));\n        }\n        var finalCh = 0;\n        for (var i = curStart.line; i < curEnd.line; i++) {\n          finalCh = lineLength(cm, curStart.line);\n          var tmp = Pos(curStart.line + 1,\n                        lineLength(cm, curStart.line + 1));\n          var text = cm.getRange(curStart, tmp);\n          text = actionArgs.keepSpaces\n            ? text.replace(/\\n\\r?/g, '')\n            : text.replace(/\\n\\s*/g, ' ');\n          cm.replaceRange(text, curStart, tmp);\n        }\n        var curFinalPos = Pos(curStart.line, finalCh);\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curFinalPos);\n      },\n      newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n        vim.insertMode = true;\n        var insertAt = copyCursor(cm.getCursor());\n        if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n          // Special case for inserting newline before start of document.\n          cm.replaceRange('\\n', Pos(cm.firstLine(), 0));\n          cm.setCursor(cm.firstLine(), 0);\n        } else {\n          insertAt.line = (actionArgs.after) ? insertAt.line :\n              insertAt.line - 1;\n          insertAt.ch = lineLength(cm, insertAt.line);\n          cm.setCursor(insertAt);\n          var newlineFn = CodeMirror.commands.newlineAndIndentContinueComment ||\n              CodeMirror.commands.newlineAndIndent;\n          newlineFn(cm);\n        }\n        this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n      },\n      paste: function(cm, actionArgs, vim) {\n        var cur = copyCursor(cm.getCursor());\n        var register = vimGlobalState.registerController.getRegister(\n            actionArgs.registerName);\n        var text = register.toString();\n        if (!text) {\n          return;\n        }\n        if (actionArgs.matchIndent) {\n          var tabSize = cm.getOption(\"tabSize\");\n          // length that considers tabs and tabSize\n          var whitespaceLength = function(str) {\n            var tabs = (str.split(\"\\t\").length - 1);\n            var spaces = (str.split(\" \").length - 1);\n            return tabs * tabSize + spaces * 1;\n          };\n          var currentLine = cm.getLine(cm.getCursor().line);\n          var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n          // chomp last newline b/c don't want it to match /^\\s*/gm\n          var chompedText = text.replace(/\\n$/, '');\n          var wasChomped = text !== chompedText;\n          var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n          var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n            var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n            if (newIndent < 0) {\n              return \"\";\n            }\n            else if (cm.getOption(\"indentWithTabs\")) {\n              var quotient = Math.floor(newIndent / tabSize);\n              return Array(quotient + 1).join('\\t');\n            }\n            else {\n              return Array(newIndent + 1).join(' ');\n            }\n          });\n          text += wasChomped ? \"\\n\" : \"\";\n        }\n        if (actionArgs.repeat > 1) {\n          var text = Array(actionArgs.repeat + 1).join(text);\n        }\n        var linewise = register.linewise;\n        var blockwise = register.blockwise;\n        if (blockwise) {\n          text = text.split('\\n');\n          if (linewise) {\n              text.pop();\n          }\n          for (var i = 0; i < text.length; i++) {\n            text[i] = (text[i] == '') ? ' ' : text[i];\n          }\n          cur.ch += actionArgs.after ? 1 : 0;\n          cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n        } else if (linewise) {\n          if(vim.visualMode) {\n            text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n          } else if (actionArgs.after) {\n            // Move the newline at the end to the start instead, and paste just\n            // before the newline character of the line we are on right now.\n            text = '\\n' + text.slice(0, text.length - 1);\n            cur.ch = lineLength(cm, cur.line);\n          } else {\n            cur.ch = 0;\n          }\n        } else {\n          cur.ch += actionArgs.after ? 1 : 0;\n        }\n        var curPosFinal;\n        var idx;\n        if (vim.visualMode) {\n          //  save the pasted text for reselection if the need arises\n          vim.lastPastedText = text;\n          var lastSelectionCurEnd;\n          var selectedArea = getSelectedAreaRange(cm, vim);\n          var selectionStart = selectedArea[0];\n          var selectionEnd = selectedArea[1];\n          var selectedText = cm.getSelection();\n          var selections = cm.listSelections();\n          var emptyStrings = new Array(selections.length).join('1').split('1');\n          // save the curEnd marker before it get cleared due to cm.replaceRange.\n          if (vim.lastSelection) {\n            lastSelectionCurEnd = vim.lastSelection.headMark.find();\n          }\n          // push the previously selected text to unnamed register\n          vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n          if (blockwise) {\n            // first delete the selected text\n            cm.replaceSelections(emptyStrings);\n            // Set new selections as per the block length of the yanked text\n            selectionEnd = Pos(selectionStart.line + text.length-1, selectionStart.ch);\n            cm.setCursor(selectionStart);\n            selectBlock(cm, selectionEnd);\n            cm.replaceSelections(text);\n            curPosFinal = selectionStart;\n          } else if (vim.visualBlock) {\n            cm.replaceSelections(emptyStrings);\n            cm.setCursor(selectionStart);\n            cm.replaceRange(text, selectionStart, selectionStart);\n            curPosFinal = selectionStart;\n          } else {\n            cm.replaceRange(text, selectionStart, selectionEnd);\n            curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n          }\n          // restore the the curEnd marker\n          if(lastSelectionCurEnd) {\n            vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n          }\n          if (linewise) {\n            curPosFinal.ch=0;\n          }\n        } else {\n          if (blockwise) {\n            cm.setCursor(cur);\n            for (var i = 0; i < text.length; i++) {\n              var line = cur.line+i;\n              if (line > cm.lastLine()) {\n                cm.replaceRange('\\n',  Pos(line, 0));\n              }\n              var lastCh = lineLength(cm, line);\n              if (lastCh < cur.ch) {\n                extendLineToColumn(cm, line, cur.ch);\n              }\n            }\n            cm.setCursor(cur);\n            selectBlock(cm, Pos(cur.line + text.length-1, cur.ch));\n            cm.replaceSelections(text);\n            curPosFinal = cur;\n          } else {\n            cm.replaceRange(text, cur);\n            // Now fine tune the cursor to where we want it.\n            if (linewise && actionArgs.after) {\n              curPosFinal = Pos(\n              cur.line + 1,\n              findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line + 1)));\n            } else if (linewise && !actionArgs.after) {\n              curPosFinal = Pos(\n                cur.line,\n                findFirstNonWhiteSpaceCharacter(cm.getLine(cur.line)));\n            } else if (!linewise && actionArgs.after) {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length - 1);\n            } else {\n              idx = cm.indexFromPos(cur);\n              curPosFinal = cm.posFromIndex(idx + text.length);\n            }\n          }\n        }\n        if (vim.visualMode) {\n          exitVisualMode(cm, false);\n        }\n        cm.setCursor(curPosFinal);\n      },\n      undo: function(cm, actionArgs) {\n        cm.operation(function() {\n          repeatFn(cm, CodeMirror.commands.undo, actionArgs.repeat)();\n          cm.setCursor(cm.getCursor('anchor'));\n        });\n      },\n      redo: function(cm, actionArgs) {\n        repeatFn(cm, CodeMirror.commands.redo, actionArgs.repeat)();\n      },\n      setRegister: function(_cm, actionArgs, vim) {\n        vim.inputState.registerName = actionArgs.selectedCharacter;\n      },\n      setMark: function(cm, actionArgs, vim) {\n        var markName = actionArgs.selectedCharacter;\n        updateMark(cm, vim, markName, cm.getCursor());\n      },\n      replace: function(cm, actionArgs, vim) {\n        var replaceWith = actionArgs.selectedCharacter;\n        var curStart = cm.getCursor();\n        var replaceTo;\n        var curEnd;\n        var selections = cm.listSelections();\n        if (vim.visualMode) {\n          curStart = cm.getCursor('start');\n          curEnd = cm.getCursor('end');\n        } else {\n          var line = cm.getLine(curStart.line);\n          replaceTo = curStart.ch + actionArgs.repeat;\n          if (replaceTo > line.length) {\n            replaceTo=line.length;\n          }\n          curEnd = Pos(curStart.line, replaceTo);\n        }\n        if (replaceWith=='\\n') {\n          if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n          // special case, where vim help says to replace by just one line-break\n          (CodeMirror.commands.newlineAndIndentContinueComment || CodeMirror.commands.newlineAndIndent)(cm);\n        } else {\n          var replaceWithStr = cm.getRange(curStart, curEnd);\n          //replace all characters in range by selected, but keep linebreaks\n          replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n          if (vim.visualBlock) {\n            // Tabs are split in visua block before replacing\n            var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n            replaceWithStr = cm.getSelection();\n            replaceWithStr = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n            cm.replaceSelections(replaceWithStr);\n          } else {\n            cm.replaceRange(replaceWithStr, curStart, curEnd);\n          }\n          if (vim.visualMode) {\n            curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                         selections[0].anchor : selections[0].head;\n            cm.setCursor(curStart);\n            exitVisualMode(cm, false);\n          } else {\n            cm.setCursor(offsetCursor(curEnd, 0, -1));\n          }\n        }\n      },\n      incrementNumberToken: function(cm, actionArgs) {\n        var cur = cm.getCursor();\n        var lineStr = cm.getLine(cur.line);\n        var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n        var match;\n        var start;\n        var end;\n        var numberStr;\n        while ((match = re.exec(lineStr)) !== null) {\n          start = match.index;\n          end = start + match[0].length;\n          if (cur.ch < end)break;\n        }\n        if (!actionArgs.backtrack && (end <= cur.ch))return;\n        if (match) {\n          var baseStr = match[2] || match[4]\n          var digits = match[3] || match[5]\n          var increment = actionArgs.increase ? 1 : -1;\n          var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n          var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n          numberStr = number.toString(base);\n          var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : ''\n          if (numberStr.charAt(0) === '-') {\n            numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n          } else {\n            numberStr = baseStr + zeroPadding + numberStr;\n          }\n          var from = Pos(cur.line, start);\n          var to = Pos(cur.line, end);\n          cm.replaceRange(numberStr, from, to);\n        } else {\n          return;\n        }\n        cm.setCursor(Pos(cur.line, start + numberStr.length - 1));\n      },\n      repeatLastEdit: function(cm, actionArgs, vim) {\n        var lastEditInputState = vim.lastEditInputState;\n        if (!lastEditInputState) { return; }\n        var repeat = actionArgs.repeat;\n        if (repeat && actionArgs.repeatIsExplicit) {\n          vim.lastEditInputState.repeatOverride = repeat;\n        } else {\n          repeat = vim.lastEditInputState.repeatOverride || repeat;\n        }\n        repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n      },\n      indent: function(cm, actionArgs) {\n        cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n      },\n      exitInsertMode: exitInsertMode\n    };\n\n    function defineAction(name, fn) {\n      actions[name] = fn;\n    }\n\n    /*\n     * Below are miscellaneous utility functions used by vim.js\n     */\n\n    /**\n     * Clips cursor to ensure that line is within the buffer's range\n     * If includeLineBreak is true, then allow cur.ch == lineLength.\n     */\n    function clipCursorToContent(cm, cur) {\n      var vim = cm.state.vim;\n      var includeLineBreak = vim.insertMode || vim.visualMode;\n      var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n      var maxCh = lineLength(cm, line) - 1 + !!includeLineBreak;\n      var ch = Math.min(Math.max(0, cur.ch), maxCh);\n      return Pos(line, ch);\n    }\n    function copyArgs(args) {\n      var ret = {};\n      for (var prop in args) {\n        if (args.hasOwnProperty(prop)) {\n          ret[prop] = args[prop];\n        }\n      }\n      return ret;\n    }\n    function offsetCursor(cur, offsetLine, offsetCh) {\n      if (typeof offsetLine === 'object') {\n        offsetCh = offsetLine.ch;\n        offsetLine = offsetLine.line;\n      }\n      return Pos(cur.line + offsetLine, cur.ch + offsetCh);\n    }\n    function commandMatches(keys, keyMap, context, inputState) {\n      // Partial matches are not applied. They inform the key handler\n      // that the current key sequence is a subsequence of a valid key\n      // sequence, so that the key buffer is not cleared.\n      var match, partial = [], full = [];\n      for (var i = 0; i < keyMap.length; i++) {\n        var command = keyMap[i];\n        if (context == 'insert' && command.context != 'insert' ||\n            command.context && command.context != context ||\n            inputState.operator && command.type == 'action' ||\n            !(match = commandMatch(keys, command.keys))) { continue; }\n        if (match == 'partial') { partial.push(command); }\n        if (match == 'full') { full.push(command); }\n      }\n      return {\n        partial: partial.length && partial,\n        full: full.length && full\n      };\n    }\n    function commandMatch(pressed, mapped) {\n      if (mapped.slice(-11) == '<character>') {\n        // Last character matches anything.\n        var prefixLen = mapped.length - 11;\n        var pressedPrefix = pressed.slice(0, prefixLen);\n        var mappedPrefix = mapped.slice(0, prefixLen);\n        return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n               mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n      } else {\n        return pressed == mapped ? 'full' :\n               mapped.indexOf(pressed) == 0 ? 'partial' : false;\n      }\n    }\n    function lastChar(keys) {\n      var match = /^.*(<[^>]+>)$/.exec(keys);\n      var selectedCharacter = match ? match[1] : keys.slice(-1);\n      if (selectedCharacter.length > 1){\n        switch(selectedCharacter){\n          case '<CR>':\n            selectedCharacter='\\n';\n            break;\n          case '<Space>':\n            selectedCharacter=' ';\n            break;\n          default:\n            selectedCharacter='';\n            break;\n        }\n      }\n      return selectedCharacter;\n    }\n    function repeatFn(cm, fn, repeat) {\n      return function() {\n        for (var i = 0; i < repeat; i++) {\n          fn(cm);\n        }\n      };\n    }\n    function copyCursor(cur) {\n      return Pos(cur.line, cur.ch);\n    }\n    function cursorEqual(cur1, cur2) {\n      return cur1.ch == cur2.ch && cur1.line == cur2.line;\n    }\n    function cursorIsBefore(cur1, cur2) {\n      if (cur1.line < cur2.line) {\n        return true;\n      }\n      if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n        return true;\n      }\n      return false;\n    }\n    function cursorMin(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n    }\n    function cursorMax(cur1, cur2) {\n      if (arguments.length > 2) {\n        cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n      }\n      return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n    }\n    function cursorIsBetween(cur1, cur2, cur3) {\n      // returns true if cur2 is between cur1 and cur3.\n      var cur1before2 = cursorIsBefore(cur1, cur2);\n      var cur2before3 = cursorIsBefore(cur2, cur3);\n      return cur1before2 && cur2before3;\n    }\n    function lineLength(cm, lineNum) {\n      return cm.getLine(lineNum).length;\n    }\n    function trim(s) {\n      if (s.trim) {\n        return s.trim();\n      }\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }\n    function escapeRegex(s) {\n      return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n    }\n    function extendLineToColumn(cm, lineNum, column) {\n      var endCh = lineLength(cm, lineNum);\n      var spaces = new Array(column-endCh+1).join(' ');\n      cm.setCursor(Pos(lineNum, endCh));\n      cm.replaceRange(spaces, cm.getCursor());\n    }\n    // This functions selects a rectangular block\n    // of text with selectionEnd as any of its corner\n    // Height of block:\n    // Difference in selectionEnd.line and first/last selection.line\n    // Width of the block:\n    // Distance between selectionEnd.ch and any(first considered here) selection.ch\n    function selectBlock(cm, selectionEnd) {\n      var selections = [], ranges = cm.listSelections();\n      var head = copyCursor(cm.clipPos(selectionEnd));\n      var isClipped = !cursorEqual(selectionEnd, head);\n      var curHead = cm.getCursor('head');\n      var primIndex = getIndex(ranges, curHead);\n      var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n      var max = ranges.length - 1;\n      var index = max - primIndex > primIndex ? max : 0;\n      var base = ranges[index].anchor;\n\n      var firstLine = Math.min(base.line, head.line);\n      var lastLine = Math.max(base.line, head.line);\n      var baseCh = base.ch, headCh = head.ch;\n\n      var dir = ranges[index].head.ch - baseCh;\n      var newDir = headCh - baseCh;\n      if (dir > 0 && newDir <= 0) {\n        baseCh++;\n        if (!isClipped) { headCh--; }\n      } else if (dir < 0 && newDir >= 0) {\n        baseCh--;\n        if (!wasClipped) { headCh++; }\n      } else if (dir < 0 && newDir == -1) {\n        baseCh--;\n        headCh++;\n      }\n      for (var line = firstLine; line <= lastLine; line++) {\n        var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n        selections.push(range);\n      }\n      cm.setSelections(selections);\n      selectionEnd.ch = headCh;\n      base.ch = baseCh;\n      return base;\n    }\n    function selectForInsert(cm, head, height) {\n      var sel = [];\n      for (var i = 0; i < height; i++) {\n        var lineHead = offsetCursor(head, i, 0);\n        sel.push({anchor: lineHead, head: lineHead});\n      }\n      cm.setSelections(sel, 0);\n    }\n    // getIndex returns the index of the cursor in the selections.\n    function getIndex(ranges, cursor, end) {\n      for (var i = 0; i < ranges.length; i++) {\n        var atAnchor = end != 'head' && cursorEqual(ranges[i].anchor, cursor);\n        var atHead = end != 'anchor' && cursorEqual(ranges[i].head, cursor);\n        if (atAnchor || atHead) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    function getSelectedAreaRange(cm, vim) {\n      var lastSelection = vim.lastSelection;\n      var getCurrentSelectedAreaRange = function() {\n        var selections = cm.listSelections();\n        var start =  selections[0];\n        var end = selections[selections.length-1];\n        var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n        var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n        return [selectionStart, selectionEnd];\n      };\n      var getLastSelectedAreaRange = function() {\n        var selectionStart = cm.getCursor();\n        var selectionEnd = cm.getCursor();\n        var block = lastSelection.visualBlock;\n        if (block) {\n          var width = block.width;\n          var height = block.height;\n          selectionEnd = Pos(selectionStart.line + height, selectionStart.ch + width);\n          var selections = [];\n          // selectBlock creates a 'proper' rectangular block.\n          // We do not want that in all cases, so we manually set selections.\n          for (var i = selectionStart.line; i < selectionEnd.line; i++) {\n            var anchor = Pos(i, selectionStart.ch);\n            var head = Pos(i, selectionEnd.ch);\n            var range = {anchor: anchor, head: head};\n            selections.push(range);\n          }\n          cm.setSelections(selections);\n        } else {\n          var start = lastSelection.anchorMark.find();\n          var end = lastSelection.headMark.find();\n          var line = end.line - start.line;\n          var ch = end.ch - start.ch;\n          selectionEnd = {line: selectionEnd.line + line, ch: line ? selectionEnd.ch : ch + selectionEnd.ch};\n          if (lastSelection.visualLine) {\n            selectionStart = Pos(selectionStart.line, 0);\n            selectionEnd = Pos(selectionEnd.line, lineLength(cm, selectionEnd.line));\n          }\n          cm.setSelection(selectionStart, selectionEnd);\n        }\n        return [selectionStart, selectionEnd];\n      };\n      if (!vim.visualMode) {\n      // In case of replaying the action.\n        return getLastSelectedAreaRange();\n      } else {\n        return getCurrentSelectedAreaRange();\n      }\n    }\n    // Updates the previous selection with the current selection's values. This\n    // should only be called in visual mode.\n    function updateLastSelection(cm, vim) {\n      var anchor = vim.sel.anchor;\n      var head = vim.sel.head;\n      // To accommodate the effect of lastPastedText in the last selection\n      if (vim.lastPastedText) {\n        head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n        vim.lastPastedText = null;\n      }\n      vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                           'headMark': cm.setBookmark(head),\n                           'anchor': copyCursor(anchor),\n                           'head': copyCursor(head),\n                           'visualMode': vim.visualMode,\n                           'visualLine': vim.visualLine,\n                           'visualBlock': vim.visualBlock};\n    }\n    function expandSelection(cm, start, end) {\n      var sel = cm.state.vim.sel;\n      var head = sel.head;\n      var anchor = sel.anchor;\n      var tmp;\n      if (cursorIsBefore(end, start)) {\n        tmp = end;\n        end = start;\n        start = tmp;\n      }\n      if (cursorIsBefore(head, anchor)) {\n        head = cursorMin(start, head);\n        anchor = cursorMax(anchor, end);\n      } else {\n        anchor = cursorMin(start, anchor);\n        head = cursorMax(head, end);\n        head = offsetCursor(head, 0, -1);\n        if (head.ch == -1 && head.line != cm.firstLine()) {\n          head = Pos(head.line - 1, lineLength(cm, head.line - 1));\n        }\n      }\n      return [anchor, head];\n    }\n    /**\n     * Updates the CodeMirror selection to match the provided vim selection.\n     * If no arguments are given, it uses the current vim selection state.\n     */\n    function updateCmSelection(cm, sel, mode) {\n      var vim = cm.state.vim;\n      sel = sel || vim.sel;\n      var mode = mode ||\n        vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n      var cmSel = makeCmSelection(cm, sel, mode);\n      cm.setSelections(cmSel.ranges, cmSel.primary);\n      updateFakeCursor(cm);\n    }\n    function makeCmSelection(cm, sel, mode, exclusive) {\n      var head = copyCursor(sel.head);\n      var anchor = copyCursor(sel.anchor);\n      if (mode == 'char') {\n        var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n        head = offsetCursor(sel.head, 0, headOffset);\n        anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'line') {\n        if (!cursorIsBefore(sel.head, sel.anchor)) {\n          anchor.ch = 0;\n\n          var lastLine = cm.lastLine();\n          if (head.line > lastLine) {\n            head.line = lastLine;\n          }\n          head.ch = lineLength(cm, head.line);\n        } else {\n          head.ch = 0;\n          anchor.ch = lineLength(cm, anchor.line);\n        }\n        return {\n          ranges: [{anchor: anchor, head: head}],\n          primary: 0\n        };\n      } else if (mode == 'block') {\n        var top = Math.min(anchor.line, head.line),\n            left = Math.min(anchor.ch, head.ch),\n            bottom = Math.max(anchor.line, head.line),\n            right = Math.max(anchor.ch, head.ch) + 1;\n        var height = bottom - top + 1;\n        var primary = head.line == top ? 0 : height - 1;\n        var ranges = [];\n        for (var i = 0; i < height; i++) {\n          ranges.push({\n            anchor: Pos(top + i, left),\n            head: Pos(top + i, right)\n          });\n        }\n        return {\n          ranges: ranges,\n          primary: primary\n        };\n      }\n    }\n    function getHead(cm) {\n      var cur = cm.getCursor('head');\n      if (cm.getSelection().length == 1) {\n        // Small corner case when only 1 character is selected. The \"real\"\n        // head is the left of head and anchor.\n        cur = cursorMin(cur, cm.getCursor('anchor'));\n      }\n      return cur;\n    }\n\n    /**\n     * If moveHead is set to false, the CodeMirror selection will not be\n     * touched. The caller assumes the responsibility of putting the cursor\n    * in the right place.\n     */\n    function exitVisualMode(cm, moveHead) {\n      var vim = cm.state.vim;\n      if (moveHead !== false) {\n        cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n      }\n      updateLastSelection(cm, vim);\n      vim.visualMode = false;\n      vim.visualLine = false;\n      vim.visualBlock = false;\n      if (!vim.insertMode) CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      clearFakeCursor(vim);\n    }\n\n    // Remove any trailing newlines from the selection. For\n    // example, with the caret at the start of the last word on the line,\n    // 'dw' should word, but not the newline, while 'w' should advance the\n    // caret to the first character of the next line.\n    function clipToLine(cm, curStart, curEnd) {\n      var selection = cm.getRange(curStart, curEnd);\n      // Only clip if the selection ends with trailing newline + whitespace\n      if (/\\n\\s*$/.test(selection)) {\n        var lines = selection.split('\\n');\n        // We know this is all whitespace.\n        lines.pop();\n\n        // Cases:\n        // 1. Last word is an empty line - do not clip the trailing '\\n'\n        // 2. Last word is not an empty line - clip the trailing '\\n'\n        var line;\n        // Find the line containing the last word, and clip all whitespace up\n        // to it.\n        for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n          curEnd.line--;\n          curEnd.ch = 0;\n        }\n        // If the last word is not an empty line, clip an additional newline\n        if (line) {\n          curEnd.line--;\n          curEnd.ch = lineLength(cm, curEnd.line);\n        } else {\n          curEnd.ch = 0;\n        }\n      }\n    }\n\n    // Expand the selection to line ends.\n    function expandSelectionToLine(_cm, curStart, curEnd) {\n      curStart.ch = 0;\n      curEnd.ch = 0;\n      curEnd.line++;\n    }\n\n    function findFirstNonWhiteSpaceCharacter(text) {\n      if (!text) {\n        return 0;\n      }\n      var firstNonWS = text.search(/\\S/);\n      return firstNonWS == -1 ? text.length : firstNonWS;\n    }\n\n    function expandWordUnderCursor(cm, inclusive, _forward, bigWord, noSymbol) {\n      var cur = getHead(cm);\n      var line = cm.getLine(cur.line);\n      var idx = cur.ch;\n\n      // Seek to first word or non-whitespace character, depending on if\n      // noSymbol is true.\n      var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) { return null; }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n\n      var end = idx, start = idx;\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n      while (test(line.charAt(start)) && start >= 0) { start--; }\n      start++;\n\n      if (inclusive) {\n        // If present, include all whitespace after word.\n        // Otherwise, include all whitespace before word, except indentation.\n        var wordEnd = end;\n        while (/\\s/.test(line.charAt(end)) && end < line.length) { end++; }\n        if (wordEnd == end) {\n          var wordStart = start;\n          while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n          if (!start) { start = wordStart; }\n        }\n      }\n      return { start: Pos(cur.line, start), end: Pos(cur.line, end) };\n    }\n\n    /**\n     * Depends on the following:\n     *\n     * - editor mode should be htmlmixedmode / xml\n     * - mode/xml/xml.js should be loaded\n     * - addon/fold/xml-fold.js should be loaded\n     *\n     * If any of the above requirements are not true, this function noops.\n     *\n     * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n     * The following caveats apply (based off cursory testing, I'm sure there\n     * are other discrepancies):\n     *\n     * - Does not work inside comments:\n     *   ```\n     *   <!-- <div>broken</div> -->\n     *   ```\n     * - Does not work when tags have different cases:\n     *   ```\n     *   <div>broken</DIV>\n     *   ```\n     * - Does not work when cursor is inside a broken tag:\n     *   ```\n     *   <div><brok><en></div>\n     *   ```\n     */\n    function expandTagUnderCursor(cm, head, inclusive) {\n      var cur = head;\n      if (!CodeMirror.findMatchingTag || !CodeMirror.findEnclosingTag) {\n        return { start: cur, end: cur };\n      }\n\n      var tags = CodeMirror.findMatchingTag(cm, head) || CodeMirror.findEnclosingTag(cm, head);\n      if (!tags || !tags.open || !tags.close) {\n        return { start: cur, end: cur };\n      }\n\n      if (inclusive) {\n        return { start: tags.open.from, end: tags.close.to };\n      }\n      return { start: tags.open.to, end: tags.close.from };\n    }\n\n    function recordJumpPosition(cm, oldCur, newCur) {\n      if (!cursorEqual(oldCur, newCur)) {\n        vimGlobalState.jumpList.add(cm, oldCur, newCur);\n      }\n    }\n\n    function recordLastCharacterSearch(increment, args) {\n        vimGlobalState.lastCharacterSearch.increment = increment;\n        vimGlobalState.lastCharacterSearch.forward = args.forward;\n        vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n    }\n\n    var symbolToMode = {\n        '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n        '[': 'section', ']': 'section',\n        '*': 'comment', '/': 'comment',\n        'm': 'method', 'M': 'method',\n        '#': 'preprocess'\n    };\n    var findSymbolModes = {\n      bracket: {\n        isComplete: function(state) {\n          if (state.nextCh === state.symb) {\n            state.depth++;\n            if (state.depth >= 1)return true;\n          } else if (state.nextCh === state.reverseSymb) {\n            state.depth--;\n          }\n          return false;\n        }\n      },\n      section: {\n        init: function(state) {\n          state.curMoveThrough = true;\n          state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n        },\n        isComplete: function(state) {\n          return state.index === 0 && state.nextCh === state.symb;\n        }\n      },\n      comment: {\n        isComplete: function(state) {\n          var found = state.lastCh === '*' && state.nextCh === '/';\n          state.lastCh = state.nextCh;\n          return found;\n        }\n      },\n      // TODO: The original Vim implementation only operates on level 1 and 2.\n      // The current implementation doesn't check for code block level and\n      // therefore it operates on any levels.\n      method: {\n        init: function(state) {\n          state.symb = (state.symb === 'm' ? '{' : '}');\n          state.reverseSymb = state.symb === '{' ? '}' : '{';\n        },\n        isComplete: function(state) {\n          if (state.nextCh === state.symb)return true;\n          return false;\n        }\n      },\n      preprocess: {\n        init: function(state) {\n          state.index = 0;\n        },\n        isComplete: function(state) {\n          if (state.nextCh === '#') {\n            var token = state.lineText.match(/#(\\w+)/)[1];\n            if (token === 'endif') {\n              if (state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth++;\n            } else if (token === 'if') {\n              if (!state.forward && state.depth === 0) {\n                return true;\n              }\n              state.depth--;\n            }\n            if (token === 'else' && state.depth === 0)return true;\n          }\n          return false;\n        }\n      }\n    };\n    function findSymbol(cm, repeat, forward, symb) {\n      var cur = copyCursor(cm.getCursor());\n      var increment = forward ? 1 : -1;\n      var endLine = forward ? cm.lineCount() : -1;\n      var curCh = cur.ch;\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      var state = {\n        lineText: lineText,\n        nextCh: lineText.charAt(curCh),\n        lastCh: null,\n        index: curCh,\n        symb: symb,\n        reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n        forward: forward,\n        depth: 0,\n        curMoveThrough: false\n      };\n      var mode = symbolToMode[symb];\n      if (!mode)return cur;\n      var init = findSymbolModes[mode].init;\n      var isComplete = findSymbolModes[mode].isComplete;\n      if (init) { init(state); }\n      while (line !== endLine && repeat) {\n        state.index += increment;\n        state.nextCh = state.lineText.charAt(state.index);\n        if (!state.nextCh) {\n          line += increment;\n          state.lineText = cm.getLine(line) || '';\n          if (increment > 0) {\n            state.index = 0;\n          } else {\n            var lineLen = state.lineText.length;\n            state.index = (lineLen > 0) ? (lineLen-1) : 0;\n          }\n          state.nextCh = state.lineText.charAt(state.index);\n        }\n        if (isComplete(state)) {\n          cur.line = line;\n          cur.ch = state.index;\n          repeat--;\n        }\n      }\n      if (state.nextCh || state.curMoveThrough) {\n        return Pos(line, state.index);\n      }\n      return cur;\n    }\n\n    /*\n     * Returns the boundaries of the next word. If the cursor in the middle of\n     * the word, then returns the boundaries of the current word, starting at\n     * the cursor. If the cursor is at the start/end of a word, and we are going\n     * forward/backward, respectively, find the boundaries of the next word.\n     *\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Cursor} cur The cursor position.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only [a-zA-Z0-9] characters count as part of the word.\n     * @param {boolean} emptyLineIsWord True if empty lines should be treated\n     *     as words.\n     * @return {Object{from:number, to:number, line: number}} The boundaries of\n     *     the word, or null if there are no more words.\n     */\n    function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n      var lineNum = cur.line;\n      var pos = cur.ch;\n      var line = cm.getLine(lineNum);\n      var dir = forward ? 1 : -1;\n      var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n      if (emptyLineIsWord && line == '') {\n        lineNum += dir;\n        line = cm.getLine(lineNum);\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        pos = (forward) ? 0 : line.length;\n      }\n\n      while (true) {\n        if (emptyLineIsWord && line == '') {\n          return { from: 0, to: 0, line: lineNum };\n        }\n        var stop = (dir > 0) ? line.length : -1;\n        var wordStart = stop, wordEnd = stop;\n        // Find bounds of next word.\n        while (pos != stop) {\n          var foundWord = false;\n          for (var i = 0; i < charTests.length && !foundWord; ++i) {\n            if (charTests[i](line.charAt(pos))) {\n              wordStart = pos;\n              // Advance to end of word.\n              while (pos != stop && charTests[i](line.charAt(pos))) {\n                pos += dir;\n              }\n              wordEnd = pos;\n              foundWord = wordStart != wordEnd;\n              if (wordStart == cur.ch && lineNum == cur.line &&\n                  wordEnd == wordStart + dir) {\n                // We started at the end of a word. Find the next one.\n                continue;\n              } else {\n                return {\n                  from: Math.min(wordStart, wordEnd + 1),\n                  to: Math.max(wordStart, wordEnd),\n                  line: lineNum };\n              }\n            }\n          }\n          if (!foundWord) {\n            pos += dir;\n          }\n        }\n        // Advance to next/prev line.\n        lineNum += dir;\n        if (!isLine(cm, lineNum)) {\n          return null;\n        }\n        line = cm.getLine(lineNum);\n        pos = (dir > 0) ? 0 : line.length;\n      }\n    }\n\n    /**\n     * @param {CodeMirror} cm CodeMirror object.\n     * @param {Pos} cur The position to start from.\n     * @param {int} repeat Number of words to move past.\n     * @param {boolean} forward True to search forward. False to search\n     *     backward.\n     * @param {boolean} wordEnd True to move to end of word. False to move to\n     *     beginning of word.\n     * @param {boolean} bigWord True if punctuation count as part of the word.\n     *     False if only alphabet characters count as part of the word.\n     * @return {Cursor} The position the cursor should move to.\n     */\n    function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n      var curStart = copyCursor(cur);\n      var words = [];\n      if (forward && !wordEnd || !forward && wordEnd) {\n        repeat++;\n      }\n      // For 'e', empty lines are not considered words, go figure.\n      var emptyLineIsWord = !(forward && wordEnd);\n      for (var i = 0; i < repeat; i++) {\n        var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n        if (!word) {\n          var eodCh = lineLength(cm, cm.lastLine());\n          words.push(forward\n              ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n              : {line: 0, from: 0, to: 0});\n          break;\n        }\n        words.push(word);\n        cur = Pos(word.line, forward ? (word.to - 1) : word.from);\n      }\n      var shortCircuit = words.length != repeat;\n      var firstWord = words[0];\n      var lastWord = words.pop();\n      if (forward && !wordEnd) {\n        // w\n        if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.from);\n      } else if (forward && wordEnd) {\n        return Pos(lastWord.line, lastWord.to - 1);\n      } else if (!forward && wordEnd) {\n        // ge\n        if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n          // We did not start in the middle of a word. Discard the extra word at the end.\n          lastWord = words.pop();\n        }\n        return Pos(lastWord.line, lastWord.to);\n      } else {\n        // b\n        return Pos(lastWord.line, lastWord.from);\n      }\n    }\n\n    function moveToCharacter(cm, repeat, forward, character) {\n      var cur = cm.getCursor();\n      var start = cur.ch;\n      var idx;\n      for (var i = 0; i < repeat; i ++) {\n        var line = cm.getLine(cur.line);\n        idx = charIdxInLine(start, line, character, forward, true);\n        if (idx == -1) {\n          return null;\n        }\n        start = idx;\n      }\n      return Pos(cm.getCursor().line, idx);\n    }\n\n    function moveToColumn(cm, repeat) {\n      // repeat is always >= 1, so repeat - 1 always corresponds\n      // to the column we want to go to.\n      var line = cm.getCursor().line;\n      return clipCursorToContent(cm, Pos(line, repeat - 1));\n    }\n\n    function updateMark(cm, vim, markName, pos) {\n      if (!inArray(markName, validMarks)) {\n        return;\n      }\n      if (vim.marks[markName]) {\n        vim.marks[markName].clear();\n      }\n      vim.marks[markName] = cm.setBookmark(pos);\n    }\n\n    function charIdxInLine(start, line, character, forward, includeChar) {\n      // Search for char in line.\n      // motion_options: {forward, includeChar}\n      // If includeChar = true, include it too.\n      // If forward = true, search forward, else search backwards.\n      // If char is not found on this line, do nothing\n      var idx;\n      if (forward) {\n        idx = line.indexOf(character, start + 1);\n        if (idx != -1 && !includeChar) {\n          idx -= 1;\n        }\n      } else {\n        idx = line.lastIndexOf(character, start - 1);\n        if (idx != -1 && !includeChar) {\n          idx += 1;\n        }\n      }\n      return idx;\n    }\n\n    function findParagraph(cm, head, repeat, dir, inclusive) {\n      var line = head.line;\n      var min = cm.firstLine();\n      var max = cm.lastLine();\n      var start, end, i = line;\n      function isEmpty(i) { return !cm.getLine(i); }\n      function isBoundary(i, dir, any) {\n        if (any) { return isEmpty(i) != isEmpty(i + dir); }\n        return !isEmpty(i) && isEmpty(i + dir);\n      }\n      if (dir) {\n        while (min <= i && i <= max && repeat > 0) {\n          if (isBoundary(i, dir)) { repeat--; }\n          i += dir;\n        }\n        return new Pos(i, 0);\n      }\n\n      var vim = cm.state.vim;\n      if (vim.visualLine && isBoundary(line, 1, true)) {\n        var anchor = vim.sel.anchor;\n        if (isBoundary(anchor.line, -1, true)) {\n          if (!inclusive || anchor.line != line) {\n            line += 1;\n          }\n        }\n      }\n      var startState = isEmpty(line);\n      for (i = line; i <= max && repeat; i++) {\n        if (isBoundary(i, 1, true)) {\n          if (!inclusive || isEmpty(i) != startState) {\n            repeat--;\n          }\n        }\n      }\n      end = new Pos(i, 0);\n      // select boundary before paragraph for the last one\n      if (i > max && !startState) { startState = true; }\n      else { inclusive = false; }\n      for (i = line; i > min; i--) {\n        if (!inclusive || isEmpty(i) == startState || i == line) {\n          if (isBoundary(i, -1, true)) { break; }\n        }\n      }\n      start = new Pos(i, 0);\n      return { start: start, end: end };\n    }\n\n    function findSentence(cm, cur, repeat, dir) {\n\n      /*\n        Takes an index object\n        {\n          line: the line string,\n          ln: line number,\n          pos: index in line,\n          dir: direction of traversal (-1 or 1)\n        }\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n       */\n      function nextChar(cm, idx) {\n        if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n          idx.ln += idx.dir;\n          if (!isLine(cm, idx.ln)) {\n            idx.line = null;\n            idx.ln = null;\n            idx.pos = null;\n            return;\n          }\n          idx.line = cm.getLine(idx.ln);\n          idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n        }\n        else {\n          idx.pos += idx.dir;\n        }\n      }\n\n      /*\n        Performs one iteration of traversal in forward direction\n        Returns an index object of the new location\n       */\n      function forward(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n        var stop = (line === \"\");\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: curr.pos,\n        }\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n          last_valid.ln = curr.ln;\n          last_valid.pos = curr.pos;\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            return { ln: curr.ln, pos: curr.pos, };\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && !stop\n            && (curr.pos === curr.line.length - 1\n              || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n            stop = true;\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the last non whitespace character on the last\n          valid line in the case that we reach the end of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = line.length - 1; i >= 0; --i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n\n        return last_valid;\n\n      }\n\n      /*\n        Performs one iteration of traversal in reverse direction\n        Returns an index object of the new location\n       */\n      function reverse(cm, ln, pos, dir) {\n        var line = cm.getLine(ln);\n\n        var curr = {\n          line: line,\n          ln: ln,\n          pos: pos,\n          dir: dir,\n        }\n\n        var last_valid = {\n          ln: curr.ln,\n          pos: null,\n        };\n\n        var skip_empty_lines = (curr.line === \"\");\n\n        // Move one step to skip character we start on\n        nextChar(cm, curr);\n\n        while (curr.line !== null) {\n\n          if (curr.line === \"\" && !skip_empty_lines) {\n            if (last_valid.pos !== null) {\n              return last_valid;\n            }\n            else {\n              return { ln: curr.ln, pos: curr.pos };\n            }\n          }\n          else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n              && last_valid.pos !== null\n              && !(curr.ln === last_valid.ln && curr.pos + 1 === last_valid.pos)) {\n            return last_valid;\n          }\n          else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n            skip_empty_lines = false;\n            last_valid = { ln: curr.ln, pos: curr.pos }\n          }\n\n          nextChar(cm, curr);\n        }\n\n        /*\n          Set the position to the first non whitespace character on the last\n          valid line in the case that we reach the beginning of the document.\n        */\n        var line = cm.getLine(last_valid.ln);\n        last_valid.pos = 0;\n        for(var i = 0; i < line.length; ++i) {\n          if (!isWhiteSpaceString(line[i])) {\n            last_valid.pos = i;\n            break;\n          }\n        }\n        return last_valid;\n      }\n\n      var curr_index = {\n        ln: cur.line,\n        pos: cur.ch,\n      };\n\n      while (repeat > 0) {\n        if (dir < 0) {\n          curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        else {\n          curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n        }\n        repeat--;\n      }\n\n      return Pos(curr_index.ln, curr_index.pos);\n    }\n\n    // TODO: perhaps this finagling of start and end positions belongs\n    // in codemirror/replaceRange?\n    function selectCompanionObject(cm, head, symb, inclusive) {\n      var cur = head, start, end;\n\n      var bracketRegexp = ({\n        '(': /[()]/, ')': /[()]/,\n        '[': /[[\\]]/, ']': /[[\\]]/,\n        '{': /[{}]/, '}': /[{}]/,\n        '<': /[<>]/, '>': /[<>]/})[symb];\n      var openSym = ({\n        '(': '(', ')': '(',\n        '[': '[', ']': '[',\n        '{': '{', '}': '{',\n        '<': '<', '>': '<'})[symb];\n      var curChar = cm.getLine(cur.line).charAt(cur.ch);\n      // Due to the behavior of scanForBracket, we need to add an offset if the\n      // cursor is on a matching open bracket.\n      var offset = curChar === openSym ? 1 : 0;\n\n      start = cm.scanForBracket(Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n      end = cm.scanForBracket(Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      start = start.pos;\n      end = end.pos;\n\n      if ((start.line == end.line && start.ch > end.ch)\n          || (start.line > end.line)) {\n        var tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      if (inclusive) {\n        end.ch += 1;\n      } else {\n        start.ch += 1;\n      }\n\n      return { start: start, end: end };\n    }\n\n    // Takes in a symbol and a cursor and tries to simulate text objects that\n    // have identical opening and closing symbols\n    // TODO support across multiple lines\n    function findBeginningAndEnd(cm, head, symb, inclusive) {\n      var cur = copyCursor(head);\n      var line = cm.getLine(cur.line);\n      var chars = line.split('');\n      var start, end, i, len;\n      var firstIndex = chars.indexOf(symb);\n\n      // the decision tree is to always look backwards for the beginning first,\n      // but if the cursor is in front of the first instance of the symb,\n      // then move the cursor forward\n      if (cur.ch < firstIndex) {\n        cur.ch = firstIndex;\n        // Why is this line even here???\n        // cm.setCursor(cur.line, firstIndex+1);\n      }\n      // otherwise if the cursor is currently on the closing symbol\n      else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n\n      // if we're currently on the symbol, we've got a start\n      if (chars[cur.ch] == symb && !end) {\n        start = cur.ch + 1; // assign start to ahead of the cursor\n      } else {\n        // go backwards to find the start\n        for (i = cur.ch; i > -1 && !start; i--) {\n          if (chars[i] == symb) {\n            start = i + 1;\n          }\n        }\n      }\n\n      // look forwards for the end symbol\n      if (start && !end) {\n        for (i = start, len = chars.length; i < len && !end; i++) {\n          if (chars[i] == symb) {\n            end = i;\n          }\n        }\n      }\n\n      // nothing found\n      if (!start || !end) {\n        return { start: cur, end: cur };\n      }\n\n      // include the symbols\n      if (inclusive) {\n        --start; ++end;\n      }\n\n      return {\n        start: Pos(cur.line, start),\n        end: Pos(cur.line, end)\n      };\n    }\n\n    // Search functions\n    defineOption('pcre', true, 'boolean');\n    function SearchState() {}\n    SearchState.prototype = {\n      getQuery: function() {\n        return vimGlobalState.query;\n      },\n      setQuery: function(query) {\n        vimGlobalState.query = query;\n      },\n      getOverlay: function() {\n        return this.searchOverlay;\n      },\n      setOverlay: function(overlay) {\n        this.searchOverlay = overlay;\n      },\n      isReversed: function() {\n        return vimGlobalState.isReversed;\n      },\n      setReversed: function(reversed) {\n        vimGlobalState.isReversed = reversed;\n      },\n      getScrollbarAnnotate: function() {\n        return this.annotate;\n      },\n      setScrollbarAnnotate: function(annotate) {\n        this.annotate = annotate;\n      }\n    };\n    function getSearchState(cm) {\n      var vim = cm.state.vim;\n      return vim.searchState_ || (vim.searchState_ = new SearchState());\n    }\n    function dialog(cm, template, shortText, onClose, options) {\n      if (cm.openDialog) {\n        cm.openDialog(template, onClose, { bottom: true, value: options.value,\n            onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n            selectValueOnOpen: false});\n      }\n      else {\n        onClose(prompt(shortText, ''));\n      }\n    }\n    function splitBySlash(argString) {\n      return splitBySeparator(argString, '/');\n    }\n\n    function findUnescapedSlashes(argString) {\n      return findUnescapedSeparators(argString, '/');\n    }\n\n    function splitBySeparator(argString, separator) {\n      var slashes = findUnescapedSeparators(argString, separator) || [];\n      if (!slashes.length) return [];\n      var tokens = [];\n      // in case of strings like foo/bar\n      if (slashes[0] !== 0) return;\n      for (var i = 0; i < slashes.length; i++) {\n        if (typeof slashes[i] == 'number')\n          tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n      }\n      return tokens;\n    }\n\n    function findUnescapedSeparators(str, separator) {\n      if (!separator)\n        separator = '/';\n\n      var escapeNextChar = false;\n      var slashes = [];\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n        if (!escapeNextChar && c == separator) {\n          slashes.push(i);\n        }\n        escapeNextChar = !escapeNextChar && (c == '\\\\');\n      }\n      return slashes;\n    }\n\n    // Translates a search string from ex (vim) syntax into javascript form.\n    function translateRegex(str) {\n      // When these match, add a '\\' if unescaped or remove one if escaped.\n      var specials = '|(){';\n      // Remove, but never add, a '\\' for these.\n      var unescape = '}';\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        var specialComesNext = (n && specials.indexOf(n) != -1);\n        if (escapeNextChar) {\n          if (c !== '\\\\' || !specialComesNext) {\n            out.push(c);\n          }\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            // Treat the unescape list as special for removing, but not adding '\\'.\n            if (n && unescape.indexOf(n) != -1) {\n              specialComesNext = true;\n            }\n            // Not passing this test means removing a '\\'.\n            if (!specialComesNext || n === '\\\\') {\n              out.push(c);\n            }\n          } else {\n            out.push(c);\n            if (specialComesNext && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Translates the replace part of a search and replace from ex (vim) syntax into\n    // javascript form.  Similar to translateRegex, but additionally fixes back references\n    // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n    var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n    function translateRegexReplace(str) {\n      var escapeNextChar = false;\n      var out = [];\n      for (var i = -1; i < str.length; i++) {\n        var c = str.charAt(i) || '';\n        var n = str.charAt(i+1) || '';\n        if (charUnescapes[c + n]) {\n          out.push(charUnescapes[c+n]);\n          i++;\n        } else if (escapeNextChar) {\n          // At any point in the loop, escapeNextChar is true if the previous\n          // character was a '\\' and was not escaped.\n          out.push(c);\n          escapeNextChar = false;\n        } else {\n          if (c === '\\\\') {\n            escapeNextChar = true;\n            if ((isNumber(n) || n === '$')) {\n              out.push('$');\n            } else if (n !== '/' && n !== '\\\\') {\n              out.push('\\\\');\n            }\n          } else {\n            if (c === '$') {\n              out.push('$');\n            }\n            out.push(c);\n            if (n === '/') {\n              out.push('\\\\');\n            }\n          }\n        }\n      }\n      return out.join('');\n    }\n\n    // Unescape \\ and / in the replace part, for PCRE mode.\n    var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n    function unescapeRegexReplace(str) {\n      var stream = new CodeMirror.StringStream(str);\n      var output = [];\n      while (!stream.eol()) {\n        // Search for \\.\n        while (stream.peek() && stream.peek() != '\\\\') {\n          output.push(stream.next());\n        }\n        var matched = false;\n        for (var matcher in unescapes) {\n          if (stream.match(matcher, true)) {\n            matched = true;\n            output.push(unescapes[matcher]);\n            break;\n          }\n        }\n        if (!matched) {\n          // Don't change anything\n          output.push(stream.next());\n        }\n      }\n      return output.join('');\n    }\n\n    /**\n     * Extract the regular expression from the query and return a Regexp object.\n     * Returns null if the query is blank.\n     * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n     * If smartCase is passed in, and the query contains upper case letters,\n     *   then ignoreCase is overridden, and the 'i' flag will not be set.\n     * If the query contains the /i in the flag part of the regular expression,\n     *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n     *   through to the Regex object.\n     */\n    function parseQuery(query, ignoreCase, smartCase) {\n      // First update the last search register\n      var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n      lastSearchRegister.setText(query);\n      // Check if the query is already a regex.\n      if (query instanceof RegExp) { return query; }\n      // First try to extract regex + flags from the input. If no flags found,\n      // extract just the regex. IE does not accept flags directly defined in\n      // the regex string in the form /regex/flags\n      var slashes = findUnescapedSlashes(query);\n      var regexPart;\n      var forceIgnoreCase;\n      if (!slashes.length) {\n        // Query looks like 'regexp'\n        regexPart = query;\n      } else {\n        // Query looks like 'regexp/...'\n        regexPart = query.substring(0, slashes[0]);\n        var flagsPart = query.substring(slashes[0]);\n        forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n      }\n      if (!regexPart) {\n        return null;\n      }\n      if (!getOption('pcre')) {\n        regexPart = translateRegex(regexPart);\n      }\n      if (smartCase) {\n        ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n      }\n      var regexp = new RegExp(regexPart,\n          (ignoreCase || forceIgnoreCase) ? 'i' : undefined);\n      return regexp;\n    }\n    function showConfirm(cm, text) {\n      if (cm.openNotification) {\n        cm.openNotification('<span style=\"color: red\">' + text + '</span>',\n                            {bottom: true, duration: 5000});\n      } else {\n        alert(text);\n      }\n    }\n    function makePrompt(prefix, desc) {\n      var raw = '<span style=\"font-family: monospace; white-space: pre\">' +\n          (prefix || \"\") + '<input type=\"text\" autocorrect=\"off\" ' +\n          'autocapitalize=\"off\" spellcheck=\"false\"></span>';\n      if (desc)\n        raw += ' <span style=\"color: #888\">' + desc + '</span>';\n      return raw;\n    }\n    var searchPromptDesc = '(Javascript regexp)';\n    function showPrompt(cm, options) {\n      var shortText = (options.prefix || '') + ' ' + (options.desc || '');\n      var prompt = makePrompt(options.prefix, options.desc);\n      dialog(cm, prompt, shortText, options.onClose, options);\n    }\n    function regexEqual(r1, r2) {\n      if (r1 instanceof RegExp && r2 instanceof RegExp) {\n          var props = ['global', 'multiline', 'ignoreCase', 'source'];\n          for (var i = 0; i < props.length; i++) {\n              var prop = props[i];\n              if (r1[prop] !== r2[prop]) {\n                  return false;\n              }\n          }\n          return true;\n      }\n      return false;\n    }\n    // Returns true if the query is valid.\n    function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n      if (!rawQuery) {\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n      if (!query) {\n        return;\n      }\n      highlightSearchMatches(cm, query);\n      if (regexEqual(query, state.getQuery())) {\n        return query;\n      }\n      state.setQuery(query);\n      return query;\n    }\n    function searchOverlay(query) {\n      if (query.source.charAt(0) == '^') {\n        var matchSol = true;\n      }\n      return {\n        token: function(stream) {\n          if (matchSol && !stream.sol()) {\n            stream.skipToEnd();\n            return;\n          }\n          var match = stream.match(query, false);\n          if (match) {\n            if (match[0].length == 0) {\n              // Matched empty string, skip to next.\n              stream.next();\n              return 'searching';\n            }\n            if (!stream.sol()) {\n              // Backtrack 1 to match \\b\n              stream.backUp(1);\n              if (!query.exec(stream.next() + match[0])) {\n                stream.next();\n                return null;\n              }\n            }\n            stream.match(query);\n            return 'searching';\n          }\n          while (!stream.eol()) {\n            stream.next();\n            if (stream.match(query, false)) break;\n          }\n        },\n        query: query\n      };\n    }\n    var highlightTimeout = 0;\n    function highlightSearchMatches(cm, query) {\n      clearTimeout(highlightTimeout);\n      highlightTimeout = setTimeout(function() {\n        var searchState = getSearchState(cm);\n        var overlay = searchState.getOverlay();\n        if (!overlay || query != overlay.query) {\n          if (overlay) {\n            cm.removeOverlay(overlay);\n          }\n          overlay = searchOverlay(query);\n          cm.addOverlay(overlay);\n          if (cm.showMatchesOnScrollbar) {\n            if (searchState.getScrollbarAnnotate()) {\n              searchState.getScrollbarAnnotate().clear();\n            }\n            searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n          }\n          searchState.setOverlay(overlay);\n        }\n      }, 50);\n    }\n    function findNext(cm, prev, query, repeat) {\n      if (repeat === undefined) { repeat = 1; }\n      return cm.operation(function() {\n        var pos = cm.getCursor();\n        var cursor = cm.getSearchCursor(query, pos);\n        for (var i = 0; i < repeat; i++) {\n          var found = cursor.find(prev);\n          if (i == 0 && found && cursorEqual(cursor.from(), pos)) { found = cursor.find(prev); }\n          if (!found) {\n            // SearchCursor may have returned null because it hit EOF, wrap\n            // around and try again.\n            cursor = cm.getSearchCursor(query,\n                (prev) ? Pos(cm.lastLine()) : Pos(cm.firstLine(), 0) );\n            if (!cursor.find(prev)) {\n              return;\n            }\n          }\n        }\n        return cursor.from();\n      });\n    }\n    function clearSearchHighlight(cm) {\n      var state = getSearchState(cm);\n      cm.removeOverlay(getSearchState(cm).getOverlay());\n      state.setOverlay(null);\n      if (state.getScrollbarAnnotate()) {\n        state.getScrollbarAnnotate().clear();\n        state.setScrollbarAnnotate(null);\n      }\n    }\n    /**\n     * Check if pos is in the specified range, INCLUSIVE.\n     * Range can be specified with 1 or 2 arguments.\n     * If the first range argument is an array, treat it as an array of line\n     * numbers. Match pos against any of the lines.\n     * If the first range argument is a number,\n     *   if there is only 1 range argument, check if pos has the same line\n     *       number\n     *   if there are 2 range arguments, then check if pos is in between the two\n     *       range arguments.\n     */\n    function isInRange(pos, start, end) {\n      if (typeof pos != 'number') {\n        // Assume it is a cursor position. Get the line number.\n        pos = pos.line;\n      }\n      if (start instanceof Array) {\n        return inArray(pos, start);\n      } else {\n        if (end) {\n          return (pos >= start && pos <= end);\n        } else {\n          return pos == start;\n        }\n      }\n    }\n    function getUserVisibleLines(cm) {\n      var scrollInfo = cm.getScrollInfo();\n      var occludeToleranceTop = 6;\n      var occludeToleranceBottom = 10;\n      var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n      var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n      var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n      return {top: from.line, bottom: to.line};\n    }\n\n    function getMarkPos(cm, vim, markName) {\n      if (markName == '\\'' || markName == '`') {\n        return vimGlobalState.jumpList.find(cm, -1) || Pos(0, 0);\n      } else if (markName == '.') {\n        return getLastEditPos(cm);\n      }\n\n      var mark = vim.marks[markName];\n      return mark && mark.find();\n    }\n\n    function getLastEditPos(cm) {\n      var done = cm.doc.history.done;\n      for (var i = done.length; i--;) {\n        if (done[i].changes) {\n          return copyCursor(done[i].changes[0].to);\n        }\n      }\n    }\n\n    var ExCommandDispatcher = function() {\n      this.buildCommandMap_();\n    };\n    ExCommandDispatcher.prototype = {\n      processCommand: function(cm, input, opt_params) {\n        var that = this;\n        cm.operation(function () {\n          cm.curOp.isVimOp = true;\n          that._processCommand(cm, input, opt_params);\n        });\n      },\n      _processCommand: function(cm, input, opt_params) {\n        var vim = cm.state.vim;\n        var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n        var previousCommand = commandHistoryRegister.toString();\n        if (vim.visualMode) {\n          exitVisualMode(cm);\n        }\n        var inputStream = new CodeMirror.StringStream(input);\n        // update \": with the latest command whether valid or invalid\n        commandHistoryRegister.setText(input);\n        var params = opt_params || {};\n        params.input = input;\n        try {\n          this.parseInput_(cm, inputStream, params);\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n        var command;\n        var commandName;\n        if (!params.commandName) {\n          // If only a line range is defined, move to the line.\n          if (params.line !== undefined) {\n            commandName = 'move';\n          }\n        } else {\n          command = this.matchCommand_(params.commandName);\n          if (command) {\n            commandName = command.name;\n            if (command.excludeFromCommandHistory) {\n              commandHistoryRegister.setText(previousCommand);\n            }\n            this.parseCommandArgs_(inputStream, params, command);\n            if (command.type == 'exToKey') {\n              // Handle Ex to Key mapping.\n              for (var i = 0; i < command.toKeys.length; i++) {\n                CodeMirror.Vim.handleKey(cm, command.toKeys[i], 'mapping');\n              }\n              return;\n            } else if (command.type == 'exToEx') {\n              // Handle Ex to Ex mapping.\n              this.processCommand(cm, command.toInput);\n              return;\n            }\n          }\n        }\n        if (!commandName) {\n          showConfirm(cm, 'Not an editor command \":' + input + '\"');\n          return;\n        }\n        try {\n          exCommands[commandName](cm, params);\n          // Possibly asynchronous commands (e.g. substitute, which might have a\n          // user confirmation), are responsible for calling the callback when\n          // done. All others have it taken care of for them here.\n          if ((!command || !command.possiblyAsync) && params.callback) {\n            params.callback();\n          }\n        } catch(e) {\n          showConfirm(cm, e);\n          throw e;\n        }\n      },\n      parseInput_: function(cm, inputStream, result) {\n        inputStream.eatWhile(':');\n        // Parse range.\n        if (inputStream.eat('%')) {\n          result.line = cm.firstLine();\n          result.lineEnd = cm.lastLine();\n        } else {\n          result.line = this.parseLineSpec_(cm, inputStream);\n          if (result.line !== undefined && inputStream.eat(',')) {\n            result.lineEnd = this.parseLineSpec_(cm, inputStream);\n          }\n        }\n\n        // Parse command name.\n        var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n        if (commandMatch) {\n          result.commandName = commandMatch[1];\n        } else {\n          result.commandName = inputStream.match(/.*/)[0];\n        }\n\n        return result;\n      },\n      parseLineSpec_: function(cm, inputStream) {\n        var numberMatch = inputStream.match(/^(\\d+)/);\n        if (numberMatch) {\n          // Absolute line number plus offset (N+M or N-M) is probably a typo,\n          // not something the user actually wanted. (NB: vim does allow this.)\n          return parseInt(numberMatch[1], 10) - 1;\n        }\n        switch (inputStream.next()) {\n          case '.':\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          case '$':\n            return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n          case '\\'':\n            var markName = inputStream.next();\n            var markPos = getMarkPos(cm, cm.state.vim, markName);\n            if (!markPos) throw new Error('Mark not set');\n            return this.parseLineSpecOffset_(inputStream, markPos.line);\n          case '-':\n          case '+':\n            inputStream.backUp(1);\n            // Offset is relative to current line if not otherwise specified.\n            return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n          default:\n            inputStream.backUp(1);\n            return undefined;\n        }\n      },\n      parseLineSpecOffset_: function(inputStream, line) {\n        var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n        if (offsetMatch) {\n          var offset = parseInt(offsetMatch[2], 10);\n          if (offsetMatch[1] == \"-\") {\n            line -= offset;\n          } else {\n            line += offset;\n          }\n        }\n        return line;\n      },\n      parseCommandArgs_: function(inputStream, params, command) {\n        if (inputStream.eol()) {\n          return;\n        }\n        params.argString = inputStream.match(/.*/)[0];\n        // Parse command-line arguments\n        var delim = command.argDelimiter || /\\s+/;\n        var args = trim(params.argString).split(delim);\n        if (args.length && args[0]) {\n          params.args = args;\n        }\n      },\n      matchCommand_: function(commandName) {\n        // Return the command in the command map that matches the shortest\n        // prefix of the passed in command name. The match is guaranteed to be\n        // unambiguous if the defaultExCommandMap's shortNames are set up\n        // correctly. (see @code{defaultExCommandMap}).\n        for (var i = commandName.length; i > 0; i--) {\n          var prefix = commandName.substring(0, i);\n          if (this.commandMap_[prefix]) {\n            var command = this.commandMap_[prefix];\n            if (command.name.indexOf(commandName) === 0) {\n              return command;\n            }\n          }\n        }\n        return null;\n      },\n      buildCommandMap_: function() {\n        this.commandMap_ = {};\n        for (var i = 0; i < defaultExCommandMap.length; i++) {\n          var command = defaultExCommandMap[i];\n          var key = command.shortName || command.name;\n          this.commandMap_[key] = command;\n        }\n      },\n      map: function(lhs, rhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Ex to Ex mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToEx',\n              toInput: rhs.substring(1),\n              user: true\n            };\n          } else {\n            // Ex to key mapping\n            this.commandMap_[commandName] = {\n              name: commandName,\n              type: 'exToKey',\n              toKeys: rhs,\n              user: true\n            };\n          }\n        } else {\n          if (rhs != ':' && rhs.charAt(0) == ':') {\n            // Key to Ex mapping.\n            var mapping = {\n              keys: lhs,\n              type: 'keyToEx',\n              exArgs: { input: rhs.substring(1) }\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          } else {\n            // Key to key mapping\n            var mapping = {\n              keys: lhs,\n              type: 'keyToKey',\n              toKeys: rhs\n            };\n            if (ctx) { mapping.context = ctx; }\n            defaultKeymap.unshift(mapping);\n          }\n        }\n      },\n      unmap: function(lhs, ctx) {\n        if (lhs != ':' && lhs.charAt(0) == ':') {\n          // Ex to Ex or Ex to key mapping\n          if (ctx) { throw Error('Mode not supported for ex mappings'); }\n          var commandName = lhs.substring(1);\n          if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n            delete this.commandMap_[commandName];\n            return;\n          }\n        } else {\n          // Key to Ex or key to key mapping\n          var keys = lhs;\n          for (var i = 0; i < defaultKeymap.length; i++) {\n            if (keys == defaultKeymap[i].keys\n                && defaultKeymap[i].context === ctx) {\n              defaultKeymap.splice(i, 1);\n              return;\n            }\n          }\n        }\n        throw Error('No such mapping.');\n      }\n    };\n\n    var exCommands = {\n      colorscheme: function(cm, params) {\n        if (!params.args || params.args.length < 1) {\n          showConfirm(cm, cm.getOption('theme'));\n          return;\n        }\n        cm.setOption('theme', params.args[0]);\n      },\n      map: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 2) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx);\n      },\n      imap: function(cm, params) { this.map(cm, params, 'insert'); },\n      nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n      vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n      unmap: function(cm, params, ctx) {\n        var mapArgs = params.args;\n        if (!mapArgs || mapArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'No such mapping: ' + params.input);\n          }\n          return;\n        }\n        exCommandDispatcher.unmap(mapArgs[0], ctx);\n      },\n      move: function(cm, params) {\n        commandDispatcher.processCommand(cm, cm.state.vim, {\n            type: 'motion',\n            motion: 'moveToLineOrEdgeOfDocument',\n            motionArgs: { forward: false, explicitRepeat: true,\n              linewise: true },\n            repeatOverride: params.line+1});\n      },\n      set: function(cm, params) {\n        var setArgs = params.args;\n        // Options passed through to the setOption/getOption calls. May be passed in by the\n        // local/global versions of the set command\n        var setCfg = params.setCfg || {};\n        if (!setArgs || setArgs.length < 1) {\n          if (cm) {\n            showConfirm(cm, 'Invalid mapping: ' + params.input);\n          }\n          return;\n        }\n        var expr = setArgs[0].split('=');\n        var optionName = expr[0];\n        var value = expr[1];\n        var forceGet = false;\n\n        if (optionName.charAt(optionName.length - 1) == '?') {\n          // If post-fixed with ?, then the set is actually a get.\n          if (value) { throw Error('Trailing characters: ' + params.argString); }\n          optionName = optionName.substring(0, optionName.length - 1);\n          forceGet = true;\n        }\n        if (value === undefined && optionName.substring(0, 2) == 'no') {\n          // To set boolean options to false, the option name is prefixed with\n          // 'no'.\n          optionName = optionName.substring(2);\n          value = false;\n        }\n\n        var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n        if (optionIsBoolean && value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n        // If no value is provided, then we assume this is a get.\n        if (!optionIsBoolean && value === undefined || forceGet) {\n          var oldValue = getOption(optionName, cm, setCfg);\n          if (oldValue instanceof Error) {\n            showConfirm(cm, oldValue.message);\n          } else if (oldValue === true || oldValue === false) {\n            showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n          } else {\n            showConfirm(cm, '  ' + optionName + '=' + oldValue);\n          }\n        } else {\n          var setOptionReturn = setOption(optionName, value, cm, setCfg);\n          if (setOptionReturn instanceof Error) {\n            showConfirm(cm, setOptionReturn.message);\n          }\n        }\n      },\n      setlocal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'local'};\n        this.set(cm, params);\n      },\n      setglobal: function (cm, params) {\n        // setCfg is passed through to setOption\n        params.setCfg = {scope: 'global'};\n        this.set(cm, params);\n      },\n      registers: function(cm, params) {\n        var regArgs = params.args;\n        var registers = vimGlobalState.registerController.registers;\n        var regInfo = '----------Registers----------<br><br>';\n        if (!regArgs) {\n          for (var registerName in registers) {\n            var text = registers[registerName].toString();\n            if (text.length) {\n              regInfo += '\"' + registerName + '    ' + text + '<br>';\n            }\n          }\n        } else {\n          var registerName;\n          regArgs = regArgs.join('');\n          for (var i = 0; i < regArgs.length; i++) {\n            registerName = regArgs.charAt(i);\n            if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n              continue;\n            }\n            var register = registers[registerName] || new Register();\n            regInfo += '\"' + registerName + '    ' + register.toString() + '<br>';\n          }\n        }\n        showConfirm(cm, regInfo);\n      },\n      sort: function(cm, params) {\n        var reverse, ignoreCase, unique, number, pattern;\n        function parseArgs() {\n          if (params.argString) {\n            var args = new CodeMirror.StringStream(params.argString);\n            if (args.eat('!')) { reverse = true; }\n            if (args.eol()) { return; }\n            if (!args.eatSpace()) { return 'Invalid arguments'; }\n            var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n            if (!opts && !args.eol()) { return 'Invalid arguments'; }\n            if (opts[1]) {\n              ignoreCase = opts[1].indexOf('i') != -1;\n              unique = opts[1].indexOf('u') != -1;\n              var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1 && 1;\n              var hex = opts[1].indexOf('x') != -1 && 1;\n              var octal = opts[1].indexOf('o') != -1 && 1;\n              if (decimal + hex + octal > 1) { return 'Invalid arguments'; }\n              number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n            }\n            if (opts[2]) {\n              pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n            }\n          }\n        }\n        var err = parseArgs();\n        if (err) {\n          showConfirm(cm, err + ': ' + params.argString);\n          return;\n        }\n        var lineStart = params.line || cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        if (lineStart == lineEnd) { return; }\n        var curStart = Pos(lineStart, 0);\n        var curEnd = Pos(lineEnd, lineLength(cm, lineEnd));\n        var text = cm.getRange(curStart, curEnd).split('\\n');\n        var numberRegex = pattern ? pattern :\n           (number == 'decimal') ? /(-?)([\\d]+)/ :\n           (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n           (number == 'octal') ? /([0-7]+)/ : null;\n        var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : null;\n        var numPart = [], textPart = [];\n        if (number || pattern) {\n          for (var i = 0; i < text.length; i++) {\n            var matchPart = pattern ? text[i].match(pattern) : null;\n            if (matchPart && matchPart[0] != '') {\n              numPart.push(matchPart);\n            } else if (!pattern && numberRegex.exec(text[i])) {\n              numPart.push(text[i]);\n            } else {\n              textPart.push(text[i]);\n            }\n          }\n        } else {\n          textPart = text;\n        }\n        function compareFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n          var anum = number && numberRegex.exec(a);\n          var bnum = number && numberRegex.exec(b);\n          if (!anum) { return a < b ? -1 : 1; }\n          anum = parseInt((anum[1] + anum[2]).toLowerCase(), radix);\n          bnum = parseInt((bnum[1] + bnum[2]).toLowerCase(), radix);\n          return anum - bnum;\n        }\n        function comparePatternFn(a, b) {\n          if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n          if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n          return (a[0] < b[0]) ? -1 : 1;\n        }\n        numPart.sort(pattern ? comparePatternFn : compareFn);\n        if (pattern) {\n          for (var i = 0; i < numPart.length; i++) {\n            numPart[i] = numPart[i].input;\n          }\n        } else if (!number) { textPart.sort(compareFn); }\n        text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n        if (unique) { // Remove duplicate lines\n          var textOld = text;\n          var lastLine;\n          text = [];\n          for (var i = 0; i < textOld.length; i++) {\n            if (textOld[i] != lastLine) {\n              text.push(textOld[i]);\n            }\n            lastLine = textOld[i];\n          }\n        }\n        cm.replaceRange(text.join('\\n'), curStart, curEnd);\n      },\n      global: function(cm, params) {\n        // a global command is of the form\n        // :[range]g/pattern/[cmd]\n        // argString holds the string /pattern/[cmd]\n        var argString = params.argString;\n        if (!argString) {\n          showConfirm(cm, 'Regular Expression missing from global');\n          return;\n        }\n        // range is specified here\n        var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n        var lineEnd = params.lineEnd || params.line || cm.lastLine();\n        // get the tokens from argString\n        var tokens = splitBySlash(argString);\n        var regexPart = argString, cmd;\n        if (tokens.length) {\n          regexPart = tokens[0];\n          cmd = tokens.slice(1, tokens.length).join('/');\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise\n          // use the regex part as the new query.\n          try {\n           updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n             true /** smartCase */);\n          } catch (e) {\n           showConfirm(cm, 'Invalid regex: ' + regexPart);\n           return;\n          }\n        }\n        // now that we have the regexPart, search for regex matches in the\n        // specified range of lines\n        var query = getSearchState(cm).getQuery();\n        var matchedLines = [], content = '';\n        for (var i = lineStart; i <= lineEnd; i++) {\n          var matched = query.test(cm.getLine(i));\n          if (matched) {\n            matchedLines.push(i+1);\n            content+= cm.getLine(i) + '<br>';\n          }\n        }\n        // if there is no [cmd], just display the list of matched lines\n        if (!cmd) {\n          showConfirm(cm, content);\n          return;\n        }\n        var index = 0;\n        var nextCommand = function() {\n          if (index < matchedLines.length) {\n            var command = matchedLines[index] + cmd;\n            exCommandDispatcher.processCommand(cm, command, {\n              callback: nextCommand\n            });\n          }\n          index++;\n        };\n        nextCommand();\n      },\n      substitute: function(cm, params) {\n        if (!cm.getSearchCursor) {\n          throw new Error('Search feature not available. Requires searchcursor.js or ' +\n              'any other getSearchCursor implementation.');\n        }\n        var argString = params.argString;\n        var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n        var regexPart, replacePart = '', trailing, flagsPart, count;\n        var confirm = false; // Whether to confirm each replace.\n        var global = false; // True to replace all instances on a line, false to replace only 1.\n        if (tokens.length) {\n          regexPart = tokens[0];\n          if (getOption('pcre') && regexPart !== '') {\n              regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n          }\n          replacePart = tokens[1];\n          if (regexPart && regexPart[regexPart.length - 1] === '$') {\n            regexPart = regexPart.slice(0, regexPart.length - 1) + '\\\\n';\n            replacePart = replacePart ? replacePart + '\\n' : '\\n';\n          }\n          if (replacePart !== undefined) {\n            if (getOption('pcre')) {\n              replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n            } else {\n              replacePart = translateRegexReplace(replacePart);\n            }\n            vimGlobalState.lastSubstituteReplacePart = replacePart;\n          }\n          trailing = tokens[2] ? tokens[2].split(' ') : [];\n        } else {\n          // either the argString is empty or its of the form ' hello/world'\n          // actually splitBySlash returns a list of tokens\n          // only if the string starts with a '/'\n          if (argString && argString.length) {\n            showConfirm(cm, 'Substitutions should be of the form ' +\n                ':s/pattern/replace/');\n            return;\n          }\n        }\n        // After the 3rd slash, we can have flags followed by a space followed\n        // by count.\n        if (trailing) {\n          flagsPart = trailing[0];\n          count = parseInt(trailing[1]);\n          if (flagsPart) {\n            if (flagsPart.indexOf('c') != -1) {\n              confirm = true;\n              flagsPart.replace('c', '');\n            }\n            if (flagsPart.indexOf('g') != -1) {\n              global = true;\n              flagsPart.replace('g', '');\n            }\n            if (getOption('pcre')) {\n               regexPart = regexPart + '/' + flagsPart;\n            } else {\n               regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n            }\n          }\n        }\n        if (regexPart) {\n          // If regex part is empty, then use the previous query. Otherwise use\n          // the regex part as the new query.\n          try {\n            updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n              true /** smartCase */);\n          } catch (e) {\n            showConfirm(cm, 'Invalid regex: ' + regexPart);\n            return;\n          }\n        }\n        replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n        if (replacePart === undefined) {\n          showConfirm(cm, 'No previous substitute regular expression');\n          return;\n        }\n        var state = getSearchState(cm);\n        var query = state.getQuery();\n        var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n        var lineEnd = params.lineEnd || lineStart;\n        if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n          lineEnd = Infinity;\n        }\n        if (count) {\n          lineStart = lineEnd;\n          lineEnd = lineStart + count - 1;\n        }\n        var startPos = clipCursorToContent(cm, Pos(lineStart, 0));\n        var cursor = cm.getSearchCursor(query, startPos);\n        doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n      },\n      redo: CodeMirror.commands.redo,\n      undo: CodeMirror.commands.undo,\n      write: function(cm) {\n        if (CodeMirror.commands.save) {\n          // If a save command is defined, call it.\n          CodeMirror.commands.save(cm);\n        } else if (cm.save) {\n          // Saves to text area if no save command is defined and cm.save() is available.\n          cm.save();\n        }\n      },\n      nohlsearch: function(cm) {\n        clearSearchHighlight(cm);\n      },\n      yank: function (cm) {\n        var cur = copyCursor(cm.getCursor());\n        var line = cur.line;\n        var lineText = cm.getLine(line);\n        vimGlobalState.registerController.pushText(\n          '0', 'yank', lineText, true, true);\n      },\n      delmarks: function(cm, params) {\n        if (!params.argString || !trim(params.argString)) {\n          showConfirm(cm, 'Argument required');\n          return;\n        }\n\n        var state = cm.state.vim;\n        var stream = new CodeMirror.StringStream(trim(params.argString));\n        while (!stream.eol()) {\n          stream.eatSpace();\n\n          // Record the streams position at the beginning of the loop for use\n          // in error messages.\n          var count = stream.pos;\n\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var sym = stream.next();\n          // Check if this symbol is part of a range\n          if (stream.match('-', true)) {\n            // This symbol is part of a range.\n\n            // The range must terminate at an alphabetic character.\n            if (!stream.match(/[a-zA-Z]/, false)) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            var startMark = sym;\n            var finishMark = stream.next();\n            // The range must terminate at an alphabetic character which\n            // shares the same case as the start of the range.\n            if (isLowerCase(startMark) && isLowerCase(finishMark) ||\n                isUpperCase(startMark) && isUpperCase(finishMark)) {\n              var start = startMark.charCodeAt(0);\n              var finish = finishMark.charCodeAt(0);\n              if (start >= finish) {\n                showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n                return;\n              }\n\n              // Because marks are always ASCII values, and we have\n              // determined that they are the same case, we can use\n              // their char codes to iterate through the defined range.\n              for (var j = 0; j <= finish - start; j++) {\n                var mark = String.fromCharCode(start + j);\n                delete state.marks[mark];\n              }\n            } else {\n              showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n              return;\n            }\n          } else {\n            // This symbol is a valid mark, and is not part of a range.\n            delete state.marks[sym];\n          }\n        }\n      }\n    };\n\n    var exCommandDispatcher = new ExCommandDispatcher();\n\n    /**\n    * @param {CodeMirror} cm CodeMirror instance we are in.\n    * @param {boolean} confirm Whether to confirm each replace.\n    * @param {Cursor} lineStart Line to start replacing from.\n    * @param {Cursor} lineEnd Line to stop replacing at.\n    * @param {RegExp} query Query for performing matches with.\n    * @param {string} replaceWith Text to replace matches with. May contain $1,\n    *     $2, etc for replacing captured groups using Javascript replace.\n    * @param {function()} callback A callback for when the replace is done.\n    */\n    function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n        replaceWith, callback) {\n      // Set up all the functions.\n      cm.state.vim.exMode = true;\n      var done = false;\n      var lastPos = searchCursor.from();\n      function replaceAll() {\n        cm.operation(function() {\n          while (!done) {\n            replace();\n            next();\n          }\n          stop();\n        });\n      }\n      function replace() {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        var newText = text.replace(query, replaceWith);\n        searchCursor.replace(newText);\n      }\n      function next() {\n        // The below only loops to skip over multiple occurrences on the same\n        // line when 'global' is not true.\n        while(searchCursor.findNext() &&\n              isInRange(searchCursor.from(), lineStart, lineEnd)) {\n          if (!global && lastPos && searchCursor.from().line == lastPos.line) {\n            continue;\n          }\n          cm.scrollIntoView(searchCursor.from(), 30);\n          cm.setSelection(searchCursor.from(), searchCursor.to());\n          lastPos = searchCursor.from();\n          done = false;\n          return;\n        }\n        done = true;\n      }\n      function stop(close) {\n        if (close) { close(); }\n        cm.focus();\n        if (lastPos) {\n          cm.setCursor(lastPos);\n          var vim = cm.state.vim;\n          vim.exMode = false;\n          vim.lastHPos = vim.lastHSPos = lastPos.ch;\n        }\n        if (callback) { callback(); }\n      }\n      function onPromptKeyDown(e, _value, close) {\n        // Swallow all keys.\n        CodeMirror.e_stop(e);\n        var keyName = CodeMirror.keyName(e);\n        switch (keyName) {\n          case 'Y':\n            replace(); next(); break;\n          case 'N':\n            next(); break;\n          case 'A':\n            // replaceAll contains a call to close of its own. We don't want it\n            // to fire too early or multiple times.\n            var savedCallback = callback;\n            callback = undefined;\n            cm.operation(replaceAll);\n            callback = savedCallback;\n            break;\n          case 'L':\n            replace();\n            // fall through and exit.\n          case 'Q':\n          case 'Esc':\n          case 'Ctrl-C':\n          case 'Ctrl-[':\n            stop(close);\n            break;\n        }\n        if (done) { stop(close); }\n        return true;\n      }\n\n      // Actually do replace.\n      next();\n      if (done) {\n        showConfirm(cm, 'No matches for ' + query.source);\n        return;\n      }\n      if (!confirm) {\n        replaceAll();\n        if (callback) { callback(); }\n        return;\n      }\n      showPrompt(cm, {\n        prefix: 'replace with <strong>' + replaceWith + '</strong> (y/n/a/q/l)',\n        onKeyDown: onPromptKeyDown\n      });\n    }\n\n    CodeMirror.keyMap.vim = {\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function exitInsertMode(cm) {\n      var vim = cm.state.vim;\n      var macroModeState = vimGlobalState.macroModeState;\n      var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n      var isPlaying = macroModeState.isPlaying;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!isPlaying) {\n        cm.off('change', onChange);\n        CodeMirror.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (!isPlaying && vim.insertModeRepeat > 1) {\n        // Perform insert mode repeat for commands like 3,a and 3,o.\n        repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n            true /** repeatForInsert */);\n        vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n      }\n      delete vim.insertModeRepeat;\n      vim.insertMode = false;\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n      cm.setOption('keyMap', 'vim');\n      cm.setOption('disableInput', true);\n      cm.toggleOverwrite(false); // exit replace mode if we were in it.\n      // update the \". register before exiting insert mode\n      insertModeChangeRegister.setText(lastChange.changes.join(''));\n      CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n      if (macroModeState.isRecording) {\n        logInsertModeChange(macroModeState);\n      }\n    }\n\n    function _mapCommand(command) {\n      defaultKeymap.unshift(command);\n    }\n\n    function mapCommand(keys, type, name, args, extra) {\n      var command = {keys: keys, type: type};\n      command[type] = name;\n      command[type + \"Args\"] = args;\n      for (var key in extra)\n        command[key] = extra[key];\n      _mapCommand(command);\n    }\n\n    // The timeout in milliseconds for the two-character ESC keymap should be\n    // adjusted according to your typing speed to prevent false positives.\n    defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n    CodeMirror.keyMap['vim-insert'] = {\n      // TODO: override navigation keys so that Esc will cancel automatic\n      // indentation from o, O, i_<CR>\n      fallthrough: ['default'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    CodeMirror.keyMap['vim-replace'] = {\n      'Backspace': 'goCharLeft',\n      fallthrough: ['vim-insert'],\n      attach: attachVimMap,\n      detach: detachVimMap,\n      call: cmKey\n    };\n\n    function executeMacroRegister(cm, vim, macroModeState, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (registerName == ':') {\n        // Read-only register containing last Ex command.\n        if (register.keyBuffer[0]) {\n          exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n        }\n        macroModeState.isPlaying = false;\n        return;\n      }\n      var keyBuffer = register.keyBuffer;\n      var imc = 0;\n      macroModeState.isPlaying = true;\n      macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n      for (var i = 0; i < keyBuffer.length; i++) {\n        var text = keyBuffer[i];\n        var match, key;\n        while (text) {\n          // Pull off one command key, which is either a single character\n          // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n          match = (/<\\w+-.+?>|<\\w+>|./).exec(text);\n          key = match[0];\n          text = text.substring(match.index + key.length);\n          CodeMirror.Vim.handleKey(cm, key, 'macro');\n          if (vim.insertMode) {\n            var changes = register.insertModeChanges[imc++].changes;\n            vimGlobalState.macroModeState.lastInsertModeChanges.changes =\n                changes;\n            repeatInsertModeChanges(cm, changes, 1);\n            exitInsertMode(cm);\n          }\n        }\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function logKey(macroModeState, key) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.pushText(key);\n      }\n    }\n\n    function logInsertModeChange(macroModeState) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushInsertModeChanges) {\n        register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n      }\n    }\n\n    function logSearchQuery(macroModeState, query) {\n      if (macroModeState.isPlaying) { return; }\n      var registerName = macroModeState.latestRegister;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register && register.pushSearchQuery) {\n        register.pushSearchQuery(query);\n      }\n    }\n\n    /**\n     * Listens for changes made in insert mode.\n     * Should only be active in insert mode.\n     */\n    function onChange(cm, changeObj) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (!macroModeState.isPlaying) {\n        while(changeObj) {\n          lastChange.expectCursorActivityForChange = true;\n          if (lastChange.ignoreCount > 1) {\n            lastChange.ignoreCount--;\n          } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n              || changeObj.origin === undefined /* only in testing */) {\n            var selectionCount = cm.listSelections().length;\n            if (selectionCount > 1)\n              lastChange.ignoreCount = selectionCount;\n            var text = changeObj.text.join('\\n');\n            if (lastChange.maybeReset) {\n              lastChange.changes = [];\n              lastChange.maybeReset = false;\n            }\n            if (text) {\n              if (cm.state.overwrite && !/\\n/.test(text)) {\n                lastChange.changes.push([text]);\n              } else {\n                lastChange.changes.push(text);\n              }\n            }\n          }\n          // Change objects may be chained with next.\n          changeObj = changeObj.next;\n        }\n      }\n    }\n\n    /**\n    * Listens for any kind of cursor activity on CodeMirror.\n    */\n    function onCursorActivity(cm) {\n      var vim = cm.state.vim;\n      if (vim.insertMode) {\n        // Tracking cursor activity in insert mode (for macro support).\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isPlaying) { return; }\n        var lastChange = macroModeState.lastInsertModeChanges;\n        if (lastChange.expectCursorActivityForChange) {\n          lastChange.expectCursorActivityForChange = false;\n        } else {\n          // Cursor moved outside the context of an edit. Reset the change.\n          lastChange.maybeReset = true;\n        }\n      } else if (!cm.curOp.isVimOp) {\n        handleExternalSelection(cm, vim);\n      }\n      if (vim.visualMode) {\n        updateFakeCursor(cm);\n      }\n    }\n    /**\n     * Keeps track of a fake cursor to support visual mode cursor behavior.\n     */\n    function updateFakeCursor(cm) {\n      var className = 'cm-animate-fat-cursor';\n      var vim = cm.state.vim;\n      var from = clipCursorToContent(cm, copyCursor(vim.sel.head));\n      var to = offsetCursor(from, 0, 1);\n      clearFakeCursor(vim);\n      // In visual mode, the cursor may be positioned over EOL.\n      if (from.ch == cm.getLine(from.line).length) {\n        var widget = document.createElement(\"span\");\n        widget.textContent = \"\\u00a0\";\n        widget.className = className;\n        vim.fakeCursorBookmark = cm.setBookmark(from, {widget: widget});\n      } else {\n        vim.fakeCursor = cm.markText(from, to, {className: className});\n      }\n    }\n    function clearFakeCursor(vim) {\n      if (vim.fakeCursor) {\n        vim.fakeCursor.clear();\n        vim.fakeCursor = null;\n      }\n      if (vim.fakeCursorBookmark) {\n        vim.fakeCursorBookmark.clear();\n        vim.fakeCursorBookmark = null;\n      }\n    }\n    function handleExternalSelection(cm, vim) {\n      var anchor = cm.getCursor('anchor');\n      var head = cm.getCursor('head');\n      // Enter or exit visual mode to match mouse selection.\n      if (vim.visualMode && !cm.somethingSelected()) {\n        exitVisualMode(cm, false);\n      } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n        vim.visualMode = true;\n        vim.visualLine = false;\n        CodeMirror.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n      }\n      if (vim.visualMode) {\n        // Bind CodeMirror selection model to vim selection model.\n        // Mouse selections are considered visual characterwise.\n        var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n        var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n        head = offsetCursor(head, 0, headOffset);\n        anchor = offsetCursor(anchor, 0, anchorOffset);\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        updateMark(cm, vim, '<', cursorMin(head, anchor));\n        updateMark(cm, vim, '>', cursorMax(head, anchor));\n      } else if (!vim.insertMode) {\n        // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n        vim.lastHPos = cm.getCursor().ch;\n      }\n    }\n\n    /** Wrapper for special keys pressed in insert mode */\n    function InsertModeKey(keyName) {\n      this.keyName = keyName;\n    }\n\n    /**\n    * Handles raw key down events from the text area.\n    * - Should only be active in insert mode.\n    * - For recording deletes in insert mode.\n    */\n    function onKeyEventTargetKeyDown(e) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var lastChange = macroModeState.lastInsertModeChanges;\n      var keyName = CodeMirror.keyName(e);\n      if (!keyName) { return; }\n      function onKeyFound() {\n        if (lastChange.maybeReset) {\n          lastChange.changes = [];\n          lastChange.maybeReset = false;\n        }\n        lastChange.changes.push(new InsertModeKey(keyName));\n        return true;\n      }\n      if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n        CodeMirror.lookupKey(keyName, 'vim-insert', onKeyFound);\n      }\n    }\n\n    /**\n     * Repeats the last edit, which includes exactly 1 command and at most 1\n     * insert. Operator and motion commands are read from lastEditInputState,\n     * while action commands are read from lastEditActionCommand.\n     *\n     * If repeatForInsert is true, then the function was called by\n     * exitInsertMode to repeat the insert mode changes the user just made. The\n     * corresponding enterInsertMode call was made with a count.\n     */\n    function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n      var macroModeState = vimGlobalState.macroModeState;\n      macroModeState.isPlaying = true;\n      var isAction = !!vim.lastEditActionCommand;\n      var cachedInputState = vim.inputState;\n      function repeatCommand() {\n        if (isAction) {\n          commandDispatcher.processAction(cm, vim, vim.lastEditActionCommand);\n        } else {\n          commandDispatcher.evalInput(cm, vim);\n        }\n      }\n      function repeatInsert(repeat) {\n        if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n          // For some reason, repeat cw in desktop VIM does not repeat\n          // insert mode changes. Will conform to that behavior.\n          repeat = !vim.lastEditActionCommand ? 1 : repeat;\n          var changeObject = macroModeState.lastInsertModeChanges;\n          repeatInsertModeChanges(cm, changeObject.changes, repeat);\n        }\n      }\n      vim.inputState = vim.lastEditInputState;\n      if (isAction && vim.lastEditActionCommand.interlaceInsertRepeat) {\n        // o and O repeat have to be interlaced with insert repeats so that the\n        // insertions appear on separate lines instead of the last line.\n        for (var i = 0; i < repeat; i++) {\n          repeatCommand();\n          repeatInsert(1);\n        }\n      } else {\n        if (!repeatForInsert) {\n          // Hack to get the cursor to end up at the right place. If I is\n          // repeated in insert mode repeat, cursor will be 1 insert\n          // change set left of where it should be.\n          repeatCommand();\n        }\n        repeatInsert(repeat);\n      }\n      vim.inputState = cachedInputState;\n      if (vim.insertMode && !repeatForInsert) {\n        // Don't exit insert mode twice. If repeatForInsert is set, then we\n        // were called by an exitInsertMode call lower on the stack.\n        exitInsertMode(cm);\n      }\n      macroModeState.isPlaying = false;\n    }\n\n    function repeatInsertModeChanges(cm, changes, repeat) {\n      function keyHandler(binding) {\n        if (typeof binding == 'string') {\n          CodeMirror.commands[binding](cm);\n        } else {\n          binding(cm);\n        }\n        return true;\n      }\n      var head = cm.getCursor('head');\n      var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n      if (visualBlock) {\n        // Set up block selection again for repeating the changes.\n        selectForInsert(cm, head, visualBlock + 1);\n        repeat = cm.listSelections().length;\n        cm.setCursor(head);\n      }\n      for (var i = 0; i < repeat; i++) {\n        if (visualBlock) {\n          cm.setCursor(offsetCursor(head, i, 0));\n        }\n        for (var j = 0; j < changes.length; j++) {\n          var change = changes[j];\n          if (change instanceof InsertModeKey) {\n            CodeMirror.lookupKey(change.keyName, 'vim-insert', keyHandler);\n          } else if (typeof change == \"string\") {\n            var cur = cm.getCursor();\n            cm.replaceRange(change, cur, cur);\n          } else {\n            var start = cm.getCursor();\n            var end = offsetCursor(start, 0, change[0].length);\n            cm.replaceRange(change[0], start, end);\n          }\n        }\n      }\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, 0, 1));\n      }\n    }\n\n    resetVimGlobalState();\n    return vimApi;\n  };\n  // Initialize Vim and make it available as an API.\n  CodeMirror.Vim = Vim();\n});\n"],"sourceRoot":""}