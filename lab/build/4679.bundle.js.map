{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser-extension/lib/index.js"],"names":["CommandIDs","copy","copyDownloadLink","createLauncher","cut","del","download","duplicate","hideBrowser","goToPath","openPath","open","openBrowserTab","paste","createNewDirectory","createNewFile","createNewMarkdownFile","rename","share","copyPath","showBrowser","shutdown","toggleBrowser","toggleNavigateToCurrentDirectory","toggleLastModified","search","browser","activate","app","factory","docManager","labShell","restorer","settingRegistry","translator","treePathUpdater","commandPalette","mainMenu","trans","load","defaultBrowser","commands","add","namespace","docRegistry","registry","tracker","addCommand","execute","widget","currentWidget","delete","icon","closeIcon","stylesheet","label","__","mnemonic","copyIcon","cutIcon","downloadIcon","isHidden","collapseLeft","async","args","_a","path","dontShowBrowser","Private","navigateToPath","type","browserForPath","getBrowserForPath","clearSelectedItems","parts","split","name","length","selectItemByName","reason","console","warn","caption","InputDialog","placeholder","title","okLabel","value","undefined","trailingSlash","endsWith","slice","services","model","manager","item","contents","get","content","Error","response","status","message","showErrorMessage","addItem","command","category","Promise","all","toArray","map","selectedItems","localPath","cd","ft","getFileType","bindprops","folderIcon","addIcon","getDownloadUrl","next","then","url","Clipboard","pasteIcon","newFolderIcon","ext","textEditorIcon","markdownIcon","editIcon","isVisible","fileIcon","areas","area","it","widgets","contains","activateById","id","shutdownKernels","stopIcon","isToggled","navigateToCurrentDirectory","set","catch","error","header","DOMUtils","document","body","column","classList","remove","i","alert","settingsMenu","addGroup","OpenWithMenu","Menu","msg","this","clearItems","factories","_intersection","_getFactories","forEach","super","onBeforeAttach","preferredWidgetFactories","f","notebookFactory","getWidgetFactory","indexOf","unshift","iter","first","isect","Set","reduce","subarr","filter","x","has","selectorContent","selectorItem","selectorNotDir","contextMenu","selector","rank","openWith","submenu","addCommands","updateBrowserTitle","binding","find","keyBindings","b","ks","CommandRegistry","keys","join","keyBindingChanged","connect","restored","layout","fresh","mode","maybeCreate","isEmpty","hasCommand","layoutModified","useFuzzyFilter","settings","changed","composite","currentChanged","_","change","newValue","context","contextForWidget","pathChanged","sender","requires","IFileBrowserFactory","IDocumentManager","ILabShell","ILayoutRestorer","ISettingRegistry","ITranslator","optional","ITreePathUpdater","ICommandPalette","IMainMenu","autoStart","state","router","tree","WidgetTracker","createFileBrowser","options","FilterFileBrowserModel","auto","driveName","refreshInterval","restore","FileBrowser","launcher","ToolbarButton","onClick","tooltip","actualOnClick","toolbar","insertItem","restoreBrowser","provides","IStateDB","IRouter","JupyterFrontEnd","shareFile","URLExt","PageConfig","workspace","treePath","linkIcon","fileUploadStatus","IStatusBar","statusBar","FileUploadStatus","registerStatusItem","align","isActive","items","activeStateChanged","stateChanged","cwd","_path","ready","PathExt","restoring","addClass","refresh","removeClass","listener","routed","disconnect","paths","file"],"mappings":"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","file":"4679.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module filebrowser-extension\n */\nimport { ILabShell, ILayoutRestorer, ITreePathUpdater, IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Clipboard, ToolbarButton, WidgetTracker, ICommandPalette, InputDialog, showErrorMessage, DOMUtils } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FilterFileBrowserModel, FileBrowser, FileUploadStatus, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { addIcon, closeIcon, copyIcon, cutIcon, downloadIcon, editIcon, fileIcon, folderIcon, linkIcon, markdownIcon, newFolderIcon, pasteIcon, stopIcon, textEditorIcon } from '@jupyterlab/ui-components';\nimport { map, reduce, toArray, find } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Menu } from '@lumino/widgets';\n/**\n * The command IDs used by the file browser plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.copy = 'filebrowser:copy';\n    CommandIDs.copyDownloadLink = 'filebrowser:copy-download-link';\n    // For main browser only.\n    CommandIDs.createLauncher = 'filebrowser:create-main-launcher';\n    CommandIDs.cut = 'filebrowser:cut';\n    CommandIDs.del = 'filebrowser:delete';\n    CommandIDs.download = 'filebrowser:download';\n    CommandIDs.duplicate = 'filebrowser:duplicate';\n    // For main browser only.\n    CommandIDs.hideBrowser = 'filebrowser:hide-main';\n    CommandIDs.goToPath = 'filebrowser:go-to-path';\n    CommandIDs.openPath = 'filebrowser:open-path';\n    CommandIDs.open = 'filebrowser:open';\n    CommandIDs.openBrowserTab = 'filebrowser:open-browser-tab';\n    CommandIDs.paste = 'filebrowser:paste';\n    CommandIDs.createNewDirectory = 'filebrowser:create-new-directory';\n    CommandIDs.createNewFile = 'filebrowser:create-new-file';\n    CommandIDs.createNewMarkdownFile = 'filebrowser:create-new-markdown-file';\n    CommandIDs.rename = 'filebrowser:rename';\n    // For main browser only.\n    CommandIDs.share = 'filebrowser:share-main';\n    // For main browser only.\n    CommandIDs.copyPath = 'filebrowser:copy-path';\n    CommandIDs.showBrowser = 'filebrowser:activate';\n    CommandIDs.shutdown = 'filebrowser:shutdown';\n    // For main browser only.\n    CommandIDs.toggleBrowser = 'filebrowser:toggle-main';\n    CommandIDs.toggleNavigateToCurrentDirectory = 'filebrowser:toggle-navigate-to-current-directory';\n    CommandIDs.toggleLastModified = 'filebrowser:toggle-last-modified';\n    CommandIDs.search = 'filebrowser:search';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The default file browser extension.\n */\nconst browser = {\n    activate: activateBrowser,\n    id: '@jupyterlab/filebrowser-extension:browser',\n    requires: [\n        IFileBrowserFactory,\n        IDocumentManager,\n        ILabShell,\n        ILayoutRestorer,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [ITreePathUpdater, ICommandPalette, IMainMenu],\n    autoStart: true\n};\n/**\n * The default file browser factory provider.\n */\nconst factory = {\n    activate: activateFactory,\n    id: '@jupyterlab/filebrowser-extension:factory',\n    provides: IFileBrowserFactory,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IStateDB, IRouter, JupyterFrontEnd.ITreeResolver]\n};\n/**\n * The default file browser share-file plugin\n *\n * This extension adds a \"Copy Shareable Link\" command that generates a copy-\n * pastable URL. This url can be used to open a particular file in JupyterLab,\n * handy for emailing links or bookmarking for reference.\n *\n * If you need to change how this link is generated (for instance, to copy a\n * /user-redirect URL for JupyterHub), disable this plugin and replace it\n * with another implementation.\n */\nconst shareFile = {\n    activate: activateShareFile,\n    id: '@jupyterlab/filebrowser-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true\n};\n/**\n * A plugin providing file upload status.\n */\nexport const fileUploadStatus = {\n    id: '@jupyterlab/filebrowser-extension:file-upload-status',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, browser, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const item = new FileUploadStatus({\n            tracker: browser.tracker,\n            translator\n        });\n        statusBar.registerStatusItem('@jupyterlab/filebrowser-extension:file-upload-status', {\n            item,\n            align: 'middle',\n            isActive: () => {\n                return !!item.model && item.model.items.length > 0;\n            },\n            activeStateChanged: item.model.stateChanged\n        });\n    }\n};\n/**\n * The file browser namespace token.\n */\nconst namespace = 'filebrowser';\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    browser,\n    shareFile,\n    fileUploadStatus\n];\nexport default plugins;\n/**\n * Activate the file browser factory provider.\n */\nasync function activateFactory(app, docManager, translator, state, router, tree) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    const tracker = new WidgetTracker({ namespace });\n    const createFileBrowser = (id, options = {}) => {\n        var _a;\n        const model = new FilterFileBrowserModel({\n            translator: translator,\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            manager: docManager,\n            driveName: options.driveName || '',\n            refreshInterval: options.refreshInterval,\n            state: options.state === null ? undefined : options.state || state || undefined\n        });\n        const restore = options.restore;\n        const widget = new FileBrowser({ id, model, restore, translator });\n        // Add a launcher toolbar item.\n        const launcher = new ToolbarButton({\n            icon: addIcon,\n            onClick: () => {\n                if (commands.hasCommand('launcher:create')) {\n                    return Private.createLauncher(commands, widget);\n                }\n            },\n            tooltip: trans.__('New Launcher'),\n            actualOnClick: true\n        });\n        widget.toolbar.insertItem(0, 'launch', launcher);\n        // Track the newly created file browser.\n        void tracker.add(widget);\n        return widget;\n    };\n    // Manually restore and load the default file browser.\n    const defaultBrowser = createFileBrowser('filebrowser', {\n        auto: false,\n        restore: false\n    });\n    void Private.restoreBrowser(defaultBrowser, commands, router, tree);\n    return { createFileBrowser, defaultBrowser, tracker };\n}\n/**\n * Activate the default file browser in the sidebar.\n */\nfunction activateBrowser(app, factory, docManager, labShell, restorer, settingRegistry, translator, treePathUpdater, commandPalette, mainMenu) {\n    const trans = translator.load('jupyterlab');\n    const browser = factory.defaultBrowser;\n    const { commands } = app;\n    // Let the application restorer track the primary file browser (that is\n    // automatically created) for restoration of application state (e.g. setting\n    // the file browser as the current side bar widget).\n    //\n    // All other file browsers created by using the factory function are\n    // responsible for their own restoration behavior, if any.\n    restorer.add(browser, namespace);\n    addCommands(app, factory, labShell, docManager, settingRegistry, translator, commandPalette, mainMenu);\n    browser.title.icon = folderIcon;\n    // Show the current file browser shortcut in its title.\n    const updateBrowserTitle = () => {\n        const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.toggleBrowser);\n        if (binding) {\n            const ks = CommandRegistry.formatKeystroke(binding.keys.join(' '));\n            browser.title.caption = trans.__('File Browser (%1)', ks);\n        }\n        else {\n            browser.title.caption = trans.__('File Browser');\n        }\n    };\n    updateBrowserTitle();\n    app.commands.keyBindingChanged.connect(() => {\n        updateBrowserTitle();\n    });\n    labShell.add(browser, 'left', { rank: 100 });\n    // If the layout is a fresh session without saved data and not in single document\n    // mode, open file browser.\n    void labShell.restored.then(layout => {\n        if (layout.fresh && labShell.mode !== 'single-document') {\n            void commands.execute(CommandIDs.showBrowser, void 0);\n        }\n    });\n    void Promise.all([app.restored, browser.model.restored]).then(() => {\n        function maybeCreate() {\n            // Create a launcher if there are no open items.\n            if (labShell.isEmpty('main') && commands.hasCommand('launcher:create')) {\n                void Private.createLauncher(commands, browser);\n            }\n        }\n        // When layout is modified, create a launcher if there are no open items.\n        labShell.layoutModified.connect(() => {\n            maybeCreate();\n        });\n        let navigateToCurrentDirectory = false;\n        let useFuzzyFilter = true;\n        void settingRegistry\n            .load('@jupyterlab/filebrowser-extension:browser')\n            .then(settings => {\n            settings.changed.connect(settings => {\n                navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory').composite;\n                browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n            });\n            navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory')\n                .composite;\n            browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n            settings.changed.connect(settings => {\n                useFuzzyFilter = settings.get('useFuzzyFilter').composite;\n                browser.useFuzzyFilter = useFuzzyFilter;\n            });\n            useFuzzyFilter = settings.get('useFuzzyFilter').composite;\n            browser.useFuzzyFilter = useFuzzyFilter;\n        });\n        // Whether to automatically navigate to a document's current directory\n        labShell.currentChanged.connect(async (_, change) => {\n            var _a;\n            if (navigateToCurrentDirectory && change.newValue) {\n                const { newValue } = change;\n                const context = docManager.contextForWidget(newValue);\n                if (context) {\n                    const { path } = context;\n                    try {\n                        await Private.navigateToPath(path, factory, translator);\n                        (_a = labShell.currentWidget) === null || _a === void 0 ? void 0 : _a.activate();\n                    }\n                    catch (reason) {\n                        console.warn(`${CommandIDs.goToPath} failed to open: ${path}`, reason);\n                    }\n                }\n            }\n        });\n        if (treePathUpdater) {\n            browser.model.pathChanged.connect((sender, args) => {\n                treePathUpdater(args.newValue);\n            });\n        }\n        maybeCreate();\n    });\n}\nfunction activateShareFile(app, factory, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    const { tracker } = factory;\n    commands.addCommand(CommandIDs.share, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            const model = widget === null || widget === void 0 ? void 0 : widget.selectedItems().next();\n            if (!model) {\n                return;\n            }\n            Clipboard.copyToSystem(URLExt.normalize(PageConfig.getUrl({\n                mode: 'single-document',\n                workspace: PageConfig.defaultWorkspace,\n                treePath: model.path\n            })));\n        },\n        isVisible: () => !!tracker.currentWidget &&\n            toArray(tracker.currentWidget.selectedItems()).length === 1,\n        icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Shareable Link')\n    });\n}\n/**\n * Add the main file browser commands to the application's command registry.\n */\nfunction addCommands(app, factory, labShell, docManager, settingRegistry, translator, commandPalette, mainMenu) {\n    const trans = translator.load('jupyterlab');\n    const { docRegistry: registry, commands } = app;\n    const { defaultBrowser: browser, tracker } = factory;\n    commands.addCommand(CommandIDs.del, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.delete();\n            }\n        },\n        icon: closeIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Delete'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copy, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.copy();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.cut, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.cut();\n            }\n        },\n        icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Cut')\n    });\n    commands.addCommand(CommandIDs.download, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.download();\n            }\n        },\n        icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Download')\n    });\n    commands.addCommand(CommandIDs.duplicate, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.duplicate();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Duplicate')\n    });\n    commands.addCommand(CommandIDs.hideBrowser, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget && !widget.isHidden) {\n                labShell.collapseLeft();\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.goToPath, {\n        execute: async (args) => {\n            var _a;\n            const path = args.path || '';\n            const showBrowser = !((_a = args === null || args === void 0 ? void 0 : args.dontShowBrowser) !== null && _a !== void 0 ? _a : false);\n            try {\n                const item = await Private.navigateToPath(path, factory, translator);\n                if (item.type !== 'directory' && showBrowser) {\n                    const browserForPath = Private.getBrowserForPath(path, factory);\n                    if (browserForPath) {\n                        browserForPath.clearSelectedItems();\n                        const parts = path.split('/');\n                        const name = parts[parts.length - 1];\n                        if (name) {\n                            await browserForPath.selectItemByName(name);\n                        }\n                    }\n                }\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goToPath} failed to go to: ${path}`, reason);\n            }\n            if (showBrowser) {\n                return commands.execute(CommandIDs.showBrowser, { path });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.openPath, {\n        label: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from Path…'),\n        caption: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from path'),\n        execute: async (args) => {\n            var _a;\n            let path;\n            if (args === null || args === void 0 ? void 0 : args.path) {\n                path = args.path;\n            }\n            else {\n                path = (_a = (await InputDialog.getText({\n                    label: trans.__('Path'),\n                    placeholder: '/path/relative/to/jlab/root',\n                    title: trans.__('Open Path'),\n                    okLabel: trans.__('Open')\n                })).value) !== null && _a !== void 0 ? _a : undefined;\n            }\n            if (!path) {\n                return;\n            }\n            try {\n                const trailingSlash = path !== '/' && path.endsWith('/');\n                if (trailingSlash) {\n                    // The normal contents service errors on paths ending in slash\n                    path = path.slice(0, path.length - 1);\n                }\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                const { services } = browserForPath.model.manager;\n                const item = await services.contents.get(path, {\n                    content: false\n                });\n                if (trailingSlash && item.type !== 'directory') {\n                    throw new Error(`Path ${path}/ is not a directory`);\n                }\n                await commands.execute(CommandIDs.goToPath, {\n                    path,\n                    dontShowBrowser: args.dontShowBrowser\n                });\n                if (item.type === 'directory') {\n                    return;\n                }\n                return commands.execute('docmanager:open', { path });\n            }\n            catch (reason) {\n                if (reason.response && reason.response.status === 404) {\n                    reason.message = trans.__('Could not find path: %1', path);\n                }\n                return showErrorMessage(trans.__('Cannot open'), reason);\n            }\n        }\n    });\n    // Add the openPath command to the command palette\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.openPath,\n            category: trans.__('File Operations')\n        });\n    }\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const factory = args['factory'] || void 0;\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const { contents } = widget.model.manager.services;\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                if (item.type === 'directory') {\n                    const localPath = contents.localPath(item.path);\n                    return widget.model.cd(`/${localPath}`);\n                }\n                return commands.execute('docmanager:open', {\n                    factory: factory,\n                    path: item.path\n                });\n            })));\n        },\n        icon: args => {\n            var _a;\n            const factory = args['factory'] || void 0;\n            if (factory) {\n                // if an explicit factory is passed...\n                const ft = registry.getFileType(factory);\n                // ...set an icon if the factory name corresponds to a file type name...\n                // ...or leave the icon blank\n                return (_a = ft === null || ft === void 0 ? void 0 : ft.icon) === null || _a === void 0 ? void 0 : _a.bindprops({ stylesheet: 'menuItem' });\n            }\n            else {\n                return folderIcon.bindprops({ stylesheet: 'menuItem' });\n            }\n        },\n        // FIXME-TRANS: Is this localizable?\n        label: args => (args['label'] || args['factory'] || trans.__('Open')),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.openBrowserTab, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                return commands.execute('docmanager:open-browser-tab', {\n                    path: item.path\n                });\n            })));\n        },\n        icon: addIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Open in New Browser Tab'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyDownloadLink, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            return widget.model.manager.services.contents\n                .getDownloadUrl(widget.selectedItems().next().path)\n                .then(url => {\n                Clipboard.copyToSystem(url);\n            });\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Download Link'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.paste, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.paste();\n            }\n        },\n        icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Paste'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.createNewDirectory, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewDirectory();\n            }\n        },\n        icon: newFolderIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Folder')\n    });\n    commands.addCommand(CommandIDs.createNewFile, {\n        execute: () => {\n            const { model: { path } } = browser;\n            void commands.execute('docmanager:new-untitled', {\n                path,\n                type: 'file',\n                ext: 'txt'\n            });\n        },\n        icon: textEditorIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New File')\n    });\n    commands.addCommand(CommandIDs.createNewMarkdownFile, {\n        execute: () => {\n            const { model: { path } } = browser;\n            void commands.execute('docmanager:new-untitled', {\n                path,\n                type: 'file',\n                ext: 'md'\n            });\n        },\n        icon: markdownIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Markdown File')\n    });\n    commands.addCommand(CommandIDs.rename, {\n        execute: args => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.rename();\n            }\n        },\n        icon: editIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Rename'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyPath, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const item = widget.selectedItems().next();\n            if (!item) {\n                return;\n            }\n            Clipboard.copyToSystem(item.path);\n        },\n        isVisible: () => !!tracker.currentWidget &&\n            tracker.currentWidget.selectedItems().next !== undefined,\n        icon: fileIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Path')\n    });\n    commands.addCommand(CommandIDs.showBrowser, {\n        execute: args => {\n            const path = args.path || '';\n            const browserForPath = Private.getBrowserForPath(path, factory);\n            // Check for browser not found\n            if (!browserForPath) {\n                return;\n            }\n            // Shortcut if we are using the main file browser\n            if (browser === browserForPath) {\n                labShell.activateById(browser.id);\n                return;\n            }\n            else {\n                const areas = ['left', 'right'];\n                for (const area of areas) {\n                    const it = labShell.widgets(area);\n                    let widget = it.next();\n                    while (widget) {\n                        if (widget.contains(browserForPath)) {\n                            labShell.activateById(widget.id);\n                            return;\n                        }\n                        widget = it.next();\n                    }\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.shutdown, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.shutdownKernels();\n            }\n        },\n        icon: stopIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Shut Down Kernel')\n    });\n    commands.addCommand(CommandIDs.toggleBrowser, {\n        execute: () => {\n            if (browser.isHidden) {\n                return commands.execute(CommandIDs.showBrowser, void 0);\n            }\n            return commands.execute(CommandIDs.hideBrowser, void 0);\n        }\n    });\n    commands.addCommand(CommandIDs.createLauncher, {\n        label: trans.__('New Launcher'),\n        execute: () => Private.createLauncher(commands, browser)\n    });\n    commands.addCommand(CommandIDs.toggleNavigateToCurrentDirectory, {\n        label: trans.__('Show Active File in File Browser'),\n        isToggled: () => browser.navigateToCurrentDirectory,\n        execute: () => {\n            const value = !browser.navigateToCurrentDirectory;\n            const key = 'navigateToCurrentDirectory';\n            return settingRegistry\n                .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                .catch((reason) => {\n                console.error(`Failed to set navigateToCurrentDirectory setting`);\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.toggleLastModified, {\n        label: trans.__('Toggle Last Modified Column'),\n        execute: () => {\n            const header = DOMUtils.findElement(document.body, 'jp-id-modified');\n            const column = DOMUtils.findElements(document.body, 'jp-DirListing-itemModified');\n            if (header.classList.contains('jp-LastModified-hidden')) {\n                header.classList.remove('jp-LastModified-hidden');\n                for (let i = 0; i < column.length; i++) {\n                    column[i].classList.remove('jp-LastModified-hidden');\n                }\n            }\n            else {\n                header.classList.add('jp-LastModified-hidden');\n                for (let i = 0; i < column.length; i++) {\n                    column[i].classList.add('jp-LastModified-hidden');\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.search, {\n        label: trans.__('Search on File Names'),\n        execute: () => alert('search')\n    });\n    if (mainMenu) {\n        mainMenu.settingsMenu.addGroup([{ command: CommandIDs.toggleNavigateToCurrentDirectory }], 5);\n    }\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.toggleNavigateToCurrentDirectory,\n            category: trans.__('File Operations')\n        });\n    }\n    /**\n     * A menu widget that dynamically populates with different widget factories\n     * based on current filebrowser selection.\n     */\n    class OpenWithMenu extends Menu {\n        onBeforeAttach(msg) {\n            // clear the current menu items\n            this.clearItems();\n            // get the widget factories that could be used to open all of the items\n            // in the current filebrowser selection\n            const factories = tracker.currentWidget\n                ? OpenWithMenu._intersection(map(tracker.currentWidget.selectedItems(), i => {\n                    return OpenWithMenu._getFactories(i);\n                }))\n                : undefined;\n            if (factories) {\n                // make new menu items from the widget factories\n                factories.forEach(factory => {\n                    this.addItem({\n                        args: { factory: factory },\n                        command: CommandIDs.open\n                    });\n                });\n            }\n            super.onBeforeAttach(msg);\n        }\n        static _getFactories(item) {\n            var _a;\n            const factories = registry\n                .preferredWidgetFactories(item.path)\n                .map(f => f.name);\n            const notebookFactory = (_a = registry.getWidgetFactory('notebook')) === null || _a === void 0 ? void 0 : _a.name;\n            if (notebookFactory &&\n                item.type === 'notebook' &&\n                factories.indexOf(notebookFactory) === -1) {\n                factories.unshift(notebookFactory);\n            }\n            return factories;\n        }\n        static _intersection(iter) {\n            // pop the first element of iter\n            const first = iter.next();\n            // first will be undefined if iter is empty\n            if (!first) {\n                return;\n            }\n            // \"initialize\" the intersection from first\n            const isect = new Set(first);\n            // reduce over the remaining elements of iter\n            return reduce(iter, (isect, subarr) => {\n                // filter out all elements not present in both isect and subarr,\n                // accumulate result in new set\n                return new Set(subarr.filter(x => isect.has(x)));\n            }, isect);\n        }\n    }\n    // matches anywhere on filebrowser\n    const selectorContent = '.jp-DirListing-content';\n    // matches all filebrowser items\n    const selectorItem = '.jp-DirListing-item[data-isdir]';\n    // matches only non-directory items\n    const selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\n    // If the user did not click on any file, we still want to show paste and new folder,\n    // so target the content rather than an item.\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewDirectory,\n        selector: selectorContent,\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewFile,\n        selector: selectorContent,\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewMarkdownFile,\n        selector: selectorContent,\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.paste,\n        selector: selectorContent,\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.open,\n        selector: selectorItem,\n        rank: 1\n    });\n    const openWith = new OpenWithMenu({ commands });\n    openWith.title.label = trans.__('Open With');\n    app.contextMenu.addItem({\n        type: 'submenu',\n        submenu: openWith,\n        selector: selectorNotDir,\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.openBrowserTab,\n        selector: selectorNotDir,\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.rename,\n        selector: selectorItem,\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.del,\n        selector: selectorItem,\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.cut,\n        selector: selectorItem,\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copy,\n        selector: selectorNotDir,\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.duplicate,\n        selector: selectorNotDir,\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.download,\n        selector: selectorNotDir,\n        rank: 9\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.shutdown,\n        selector: selectorNotDir,\n        rank: 10\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.share,\n        selector: selectorItem,\n        rank: 11\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyPath,\n        selector: selectorItem,\n        rank: 12\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyDownloadLink,\n        selector: selectorNotDir,\n        rank: 13\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.toggleLastModified,\n        selector: '.jp-DirListing-header',\n        rank: 14\n    });\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a launcher for a given filebrowser widget.\n     */\n    function createLauncher(commands, browser) {\n        const { model } = browser;\n        return commands\n            .execute('launcher:create', { cwd: model.path })\n            .then((launcher) => {\n            model.pathChanged.connect(() => {\n                if (launcher.content) {\n                    launcher.content.cwd = model.path;\n                }\n            }, launcher);\n            return launcher;\n        });\n    }\n    Private.createLauncher = createLauncher;\n    /**\n     * Get browser object given file path.\n     */\n    function getBrowserForPath(path, factory) {\n        const { defaultBrowser: browser, tracker } = factory;\n        const driveName = browser.model.manager.services.contents.driveName(path);\n        if (driveName) {\n            const browserForPath = tracker.find(_path => _path.model.driveName === driveName);\n            if (!browserForPath) {\n                // warn that no filebrowser could be found for this driveName\n                console.warn(`${CommandIDs.goToPath} failed to find filebrowser for path: ${path}`);\n                return;\n            }\n            return browserForPath;\n        }\n        // if driveName is empty, assume the main filebrowser\n        return browser;\n    }\n    Private.getBrowserForPath = getBrowserForPath;\n    /**\n     * Navigate to a path or the path containing a file.\n     */\n    async function navigateToPath(path, factory, translator) {\n        const trans = translator.load('jupyterlab');\n        const browserForPath = Private.getBrowserForPath(path, factory);\n        if (!browserForPath) {\n            throw new Error(trans.__('No browser for path'));\n        }\n        const { services } = browserForPath.model.manager;\n        const localPath = services.contents.localPath(path);\n        await services.ready;\n        const item = await services.contents.get(path, { content: false });\n        const { model } = browserForPath;\n        await model.restored;\n        if (item.type === 'directory') {\n            await model.cd(`/${localPath}`);\n        }\n        else {\n            await model.cd(`/${PathExt.dirname(localPath)}`);\n        }\n        return item;\n    }\n    Private.navigateToPath = navigateToPath;\n    /**\n     * Restores file browser state and overrides state if tree resolver resolves.\n     */\n    async function restoreBrowser(browser, commands, router, tree) {\n        const restoring = 'jp-mod-restoring';\n        browser.addClass(restoring);\n        if (!router) {\n            await browser.model.restore(browser.id);\n            await browser.model.refresh();\n            browser.removeClass(restoring);\n            return;\n        }\n        const listener = async () => {\n            router.routed.disconnect(listener);\n            const paths = await (tree === null || tree === void 0 ? void 0 : tree.paths);\n            if ((paths === null || paths === void 0 ? void 0 : paths.file) || (paths === null || paths === void 0 ? void 0 : paths.browser)) {\n                // Restore the model without populating it.\n                await browser.model.restore(browser.id, false);\n                if (paths.file) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.file,\n                        dontShowBrowser: true\n                    });\n                }\n                if (paths.browser) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.browser,\n                        dontShowBrowser: true\n                    });\n                }\n            }\n            else {\n                await browser.model.restore(browser.id);\n                await browser.model.refresh();\n            }\n            browser.removeClass(restoring);\n        };\n        router.routed.connect(listener);\n    }\n    Private.restoreBrowser = restoreBrowser;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}