{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/codeeditor/lib/tokens.js"],"names":["CodeEditor","defaultSelectionStyle","className","displayName","color","Model","options","this","_isDisposed","_mimeTypeChanged","Signal","modelDB","ModelDB","value","createString","text","mimeType","createValue","set","changed","connect","_onMimeTypeChanged","createMap","get","getValue","newValue","setValue","args","emit","name","oldValue","defaultConfig","fontFamily","fontSize","lineHeight","lineNumbers","lineWrap","wordWrapColumn","readOnly","tabSize","insertSpaces","matchBrackets","autoClosingBrackets","handlePaste","rulers","codeFolding","ERROR_CLASS","JSONEditor","Widget","super","_dataDirty","_inputDirty","_source","_originalValue","JSONExt","_changeGuard","translator","nullTranslator","_trans","load","addClass","headerNode","document","createElement","revertButtonNode","undoIcon","tag","title","__","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","_onValueChanged","editor","editorFactory","host","setOption","disconnect","_onSourceChanged","_setValue","event","type","_evtBlur","_evtClick","msg","addEventListener","hidden","isVisible","update","refresh","removeEventListener","sender","hasFocus","valid","JSON","parse","removeClass","err","target","contains","hasClass","_mergeContent","focus","old","user","source","key","delete","content","toJSON","stringify","length","setCursorPosition","line","column","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","_hasRefreshedSinceAttach","factory","uuid","config","selectionStyle","selections","_onSelectionsChanged","_updateOnShow","updateOnShow","isDisposed","dispose","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","width","height","setSize","resizeToFit","start","end","getSelection","getLine","slice","match","getOption","undefined","Private","findTextData","mimeData","preventDefault","stopPropagation","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","insert","IEditorMimeTypeService","mime","textType","types","find","t","indexOf","getData","defaultMimeType","IEditorServices","Token"],"mappings":"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","file":"9520.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nimport { ModelDB } from '@jupyterlab/observables';\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default selection style.\n     */\n    CodeEditor.defaultSelectionStyle = {\n        className: '',\n        displayName: '',\n        color: 'black'\n    };\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options) {\n            this._isDisposed = false;\n            this._mimeTypeChanged = new Signal(this);\n            options = options || {};\n            if (options.modelDB) {\n                this.modelDB = options.modelDB;\n            }\n            else {\n                this.modelDB = new ModelDB();\n            }\n            const value = this.modelDB.createString('value');\n            value.text = value.text || options.value || '';\n            const mimeType = this.modelDB.createValue('mimeType');\n            mimeType.set(options.mimeType || 'text/plain');\n            mimeType.changed.connect(this._onMimeTypeChanged, this);\n            this.modelDB.createMap('selections');\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * Get the value of the model.\n         */\n        get value() {\n            return this.modelDB.get('value');\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this.modelDB.get('selections');\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this.modelDB.getValue('mimeType');\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this.modelDB.setValue('mimeType', newValue);\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            this.value.text = '';\n            Signal.clearData(this);\n        }\n        _onMimeTypeChanged(mimeType, args) {\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: args.oldValue,\n                newValue: args.newValue\n            });\n        }\n    }\n    CodeEditor.Model = Model;\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeEditor.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineNumbers: false,\n        lineWrap: 'on',\n        wordWrapColumn: 80,\n        readOnly: false,\n        tabSize: 4,\n        insertSpaces: true,\n        matchBrackets: true,\n        autoClosingBrackets: true,\n        handlePaste: true,\n        rulers: [],\n        codeFolding: false\n    };\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: this._trans.__('Revert changes to data')\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: this._trans.__('Commit changes to data'),\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model();\n        model.value.text = this._trans.__('No data!');\n        model.mimeType = 'application/json';\n        model.value.changed.connect(this._onValueChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({ host: this.editorHostNode, model });\n        this.editor.setOption('readOnly', true);\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `after-show` messages for the widget.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.editor.refresh();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onValueChanged() {\n        let valid = true;\n        try {\n            const value = JSON.parse(this.editor.model.value.text);\n            this.removeClass(ERROR_CLASS);\n            this._inputDirty =\n                !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n        }\n        catch (err) {\n            this.addClass(ERROR_CLASS);\n            this._inputDirty = true;\n            valid = false;\n        }\n        this.revertButtonNode.hidden = !this._inputDirty;\n        this.commitButtonNode.hidden = !valid || !this._inputDirty;\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.value.text);\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.value.text = this._trans.__('No data!');\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.value.text = value;\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this.editor.refresh();\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        this._hasRefreshedSinceAttach = false;\n        const editor = (this.editor = options.factory({\n            host: this.node,\n            model: options.model,\n            uuid: options.uuid,\n            config: options.config,\n            selectionStyle: options.selectionStyle\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n        this._updateOnShow = options.updateOnShow !== false;\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.editor.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        // We have to refresh at least once after attaching,\n        // while visible.\n        this._hasRefreshedSinceAttach = false;\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._updateOnShow || !this._hasRefreshedSinceAttach) {\n            this.update();\n        }\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (msg.width >= 0 && msg.height >= 0) {\n            this.editor.setSize(msg);\n        }\n        else if (this.isVisible) {\n            this.editor.resizeToFit();\n        }\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        if (this.isVisible) {\n            this._hasRefreshedSinceAttach = true;\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x,\n            x: event.x,\n            y: event.y,\n            width: 0,\n            height: 0\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.value.insert(offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}