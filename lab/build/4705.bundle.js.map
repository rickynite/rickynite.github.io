{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/widget.js"],"names":["Private","OutputAreaModel","options","this","clearNext","_trusted","_isDisposed","_stateChanged","Signal","_changed","trusted","contentFactory","defaultContentFactory","list","ObservableList","values","each","value","_add","changed","connect","_onListChanged","length","i","item","get","toJSON","dispose","_createItem","set","isDisposed","index","JSONExt","normalize","output","clear","wait","_lastStream","toArray","map","name","_lastName","shouldCombine","lastModel","text","removeOverwrittenChars","push","createOutputModel","_onGenericChange","sender","args","emit","ContentFactory","OutputModel","Array","isArray","join","txt","replace","search","base","match","insert","slice","fixCarriageReturn","tmp","fixBackspace","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","Widget","super","outputLengthChanged","_onIOPub","msg","model","msgType","header","msg_type","displayId","content","transient","targets","Object","assign","output_type","add","_displayIdMap","_onExecuteReply","status","payload","pages","filter","source","data","JSON","parse","stringify","metadata","_minHeightTimeout","Map","addClass","rendermime","layout","PanelLayout","_insertOutput","onModelChanged","stateChanged","onStateChanged","widgets","_future","Error","_clear","onIOPub","onReply","onStdin","KernelMessage","onInputRequest","type","newIndex","newValues","startIndex","oldIndex","oldValues","widget","parent","_moveDisplayIdIndices","_preventHeightChangeJitter","_setOutput","count","forEach","indices","rangeEnd","splice","rect","node","getBoundingClientRect","style","minHeight","height","window","clearTimeout","setTimeout","future","factory","stdinPrompt","prompt","password","panel","Panel","createOutputPrompt","addWidget","input","createStdin","then","renderer","mimeType","preferredMimeType","renderModel","currentPreferredMimetype","isIsolated","IsolatedRenderer","createOutputItem","toggleClass","executionCount","insertWidget","createRenderedMimetype","createRenderer","catch","error","pre","document","createElement","textContent","message","appendChild","className","setAttribute","SimplifiedOutputArea","execute","async","code","sessionContext","_a","stopOnError","tags","indexOf","stop_on_error","kernel","session","requestExecute","done","mimeMd","undefined","OutputPrompt","Stdin","_executionCount","createInputWidgetNode","_promise","PromiseDelegate","_input","getElementsByTagName","focus","_value","promise","event","keyCode","sendInputReply","resolve","addEventListener","update","removeEventListener","promptNode","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","observe","win","contentWindow","location","reload","AttachedProperty","create","owner"],"mappings":"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","file":"4705.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each, map, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { JSONExt } from '@lumino/coreutils';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            each(options.values, value => {\n                this._add(value);\n            });\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            let item = this.list.get(i);\n            const value = item.toJSON();\n            item.dispose();\n            item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStream = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        each(this.list, (item) => {\n            item.dispose();\n        });\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        each(values, value => {\n            this._add(value);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return toArray(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            this._lastStream &&\n            value.name === this._lastName &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // In order to get a list change event, we add the previous\n            // text to the current item and replace the previous item.\n            // This also replaces the metadata of the last item.\n            this._lastStream += value.text;\n            this._lastStream = Private.removeOverwrittenChars(this._lastStream);\n            value.text = this._lastStream;\n            const item = this._createItem({ value, trusted });\n            const index = this.length - 1;\n            const prev = this.list.get(index);\n            prev.dispose();\n            this.list.set(index, item);\n            return index;\n        }\n        if (nbformat.isStream(value)) {\n            value.text = Private.removeOverwrittenChars(value.text);\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStream = value.text;\n            this._lastName = value.name;\n        }\n        else {\n            this._lastStream = '';\n        }\n        // Add the item to our list and return the new length.\n        return this.list.push(item);\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Remove characters that are overridden by backspace characters.\n     */\n    function fixBackspace(txt) {\n        let tmp = txt;\n        do {\n            txt = tmp;\n            // Cancel out anything-but-newline followed by backspace\n            tmp = txt.replace(/[^\\n]\\x08/gm, ''); // eslint-disable-line no-control-regex\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n    /**\n     * Remove chunks that should be overridden by the effect of\n     * carriage return characters.\n     */\n    function fixCarriageReturn(txt) {\n        txt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n        while (txt.search(/\\r[^$]/g) > -1) {\n            const base = txt.match(/^(.*)\\r+/m)[1];\n            let insert = txt.match(/\\r+(.*)$/m)[1];\n            insert = insert + base.slice(insert.length, base.length);\n            txt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n        }\n        return txt;\n    }\n    /*\n     * Remove characters overridden by backspaces and carriage returns\n     */\n    function removeOverwrittenChars(text) {\n        return fixCarriageReturn(fixBackspace(text));\n    }\n    Private.removeOverwrittenChars = removeOverwrittenChars;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A public signal used to indicate the number of outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: 'display_data' });\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._minHeightTimeout = null;\n        this._displayIdMap = new Map();\n        const model = (this.model = options.model);\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.rendermime = options.rendermime;\n        this.contentFactory =\n            options.contentFactory || OutputArea.defaultContentFactory;\n        this.layout = new PanelLayout();\n        for (let i = 0; i < model.length; i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * A read-only sequence of the chidren widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(this.model.length);\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                this._insertOutput(args.newIndex, args.newValues[0]);\n                this.outputLengthChanged.emit(this.model.length);\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                    this.outputLengthChanged.emit(this.model.length);\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                this.outputLengthChanged.emit(this.model.length);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     * *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender) {\n        for (let i = 0; i < this.model.length; i++) {\n            this._setOutput(i, this.model.get(i));\n        }\n        this.outputLengthChanged.emit(this.model.length);\n    }\n    /**\n     * Clear the widget inputs and outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        const input = factory.createStdin({\n            prompt: stdinPrompt,\n            password,\n            future\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        const layout = this.layout;\n        layout.addWidget(panel);\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Use stdin as the stream so it does not get combined with stdout.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            panel.dispose();\n        });\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        const layout = this.layout;\n        const panel = layout.widgets[index];\n        const renderer = (panel.widgets\n            ? panel.widgets[1]\n            : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (renderer.renderModel &&\n            Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     */\n    _insertOutput(index, model) {\n        let output = this.createOutputItem(model);\n        if (output) {\n            output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n        }\n        else {\n            output = new Widget();\n        }\n        const layout = this.layout;\n        layout.insertWidget(index, output);\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = model.executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            pre.textContent = `Javascript Error: ${error.message}`;\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (output) {\n            output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        }\n        return output;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nexport class Stdin extends Widget {\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this.addClass(STDIN_CLASS);\n        this._input = this.node.getElementsByTagName('input')[0];\n        this._input.focus();\n        this._future = options.future;\n        this._value = options.prompt + ' ';\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.keyCode === 13) {\n                // Enter\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                });\n                if (input.type === 'password') {\n                    this._value += Array(input.value.length + 1).join('·');\n                }\n                else {\n                    this._value += input.value;\n                }\n                this._promise.resolve(void 0);\n            }\n        }\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n}\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model).then(() => {\n                const win = this.node.contentWindow;\n                if (win) {\n                    win.location.reload();\n                }\n            });\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}