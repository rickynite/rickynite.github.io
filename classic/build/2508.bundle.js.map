{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor-extension/lib/commands.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/fileeditor-extension/lib/index.js"],"names":["CommandIDs","createNew","createNewMarkdown","changeFontSize","lineNumbers","lineWrap","changeTabs","matchBrackets","autoClosingBrackets","createConsole","replaceSelection","runCode","runAllCode","markdownPreview","undo","redo","cut","copy","paste","selectAll","FACTORY","config","Object","assign","CodeEditor","Commands","getCreateConsoleFunction","commands","async","widget","args","_a","options","console","execute","activate","name","context","contentsModel","path","preferredLanguage","model","defaultKernelLanguage","ref","id","insertMode","pathChanged","connect","sender","value","session","setPath","setName","updateWidget","transientConfigs","editor","keys","forEach","key","includes","setOption","addChangeFontSizeCommand","settingRegistry","trans","addCommand","delta","Number","isNaN","error","style","window","getComputedStyle","document","documentElement","cssSize","parseInt","getPropertyValue","currentSize","fontSize","set","catch","reason","message","label","addLineNumbersCommand","isEnabled","isToggled","__","addWordWrapCommand","addChangeTabsCommand","tabSize","insertSpaces","size","addMatchBracketsCommand","addAutoClosingBracketsCommand","addReplaceSelectionCommand","tracker","_b","text","currentWidget","content","call","addCreateConsoleCommand","addRunCodeCommand","code","extension","PathExt","selection","getSelection","start","end","selected","column","line","getOffsetAt","substring","MarkdownCodeBlocks","blocks","block","startLine","endLine","getLine","cursor","getCursorPosition","lineCount","setCursorPosition","Promise","resolve","addRunAllCodeCommand","addMarkdownPreviewCommand","mode","isVisible","addUndoCommand","icon","undoIcon","stylesheet","addRedoCommand","redoIcon","addCutCommand","getTextSelection","Clipboard","isSelected","cutIcon","addCopyCommand","copyIcon","addPasteCommand","clipboard","navigator","clipboardData","readText","Boolean","pasteIcon","addSelectAllCommand","execCommand","selectionObj","cwd","ext","type","then","factory","addCreateNewCommand","browserFactory","caption","undefined","textEditorIcon","defaultBrowser","addCreateNewMarkdownCommand","markdownIcon","addCreateNewToLauncher","launcher","add","command","category","rank","addCreateNewMarkdownToLauncher","addChangeTabsCommandsToPalette","palette","paletteCategory","addItem","_n","addCreateNewCommandToPalette","isPalette","addCreateNewMarkdownCommandToPalette","addChangeFontSizeCommandsToPalette","addEditingCommandsToSettingsMenu","menu","tabMenu","Menu","title","settingsMenu","addGroup","submenu","addCreateNewFileToFileMenu","fileMenu","newMenu","addCreateNewMarkdownFileToFileMenu","addUndoRedoToEditMenu","editMenu","undoers","addEditorViewerToViewMenu","viewMenu","editorViewers","toggleLineNumbers","getOption","toggleWordWrap","newValue","toggleMatchBrackets","lineNumbersToggled","wordWrapToggled","matchBracketsToggled","addConsoleCreatorToFileMenu","consoleCreators","createConsoleLabel","n","addCodeRunnersToRunMenu","consoleTracker","sessionDialogs","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","current","find","sessionContext","run","runAll","restartAndRunAll","sessionContextDialogs","restart","restarted","addCreateConsoleToContextMenu","app","contextMenu","selector","addMarkdownPreviewToContextMenu","addUndoCommandToContextMenu","addRedoCommandToContextMenu","addCutCommandToContextMenu","addCopyCommandToContextMenu","addPasteCommandToContextMenu","addSelectAllCommandToContextMenu","updateSettings","settings","get","composite","notifyCommandChanged","updateTracker","addCommands","addLauncherItems","addPaletteItems","addMenuItems","addContextMenuItems","editorServices","translator","restorer","load","FileEditorFactory","factoryOptions","fileTypes","defaultFor","restored","shell","WidgetTracker","namespace","restore","all","changed","widgetCreated","save","docRegistry","addWidgetFactory","widgetAdded","requires","IEditorServices","IFileBrowserFactory","ISettingRegistry","ITranslator","optional","IConsoleTracker","ICommandPalette","ILauncher","IMainMenu","ILayoutRestorer","ISessionContextDialogs","provides","IEditorTracker","autoStart","tabSpaceStatus","IStatusBar","editorTracker","statusBar","item","TabSpaceStatus","registerStatusItem","align","isActive","has"],"mappings":"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","file":"2508.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { sessionContextDialogs, Clipboard } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { MarkdownCodeBlocks, PathExt } from '@jupyterlab/coreutils';\nimport { cutIcon, copyIcon, markdownIcon, pasteIcon, redoIcon, textEditorIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { Menu } from '@lumino/widgets';\n/**\n * The command IDs used by the fileeditor plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'fileeditor:create-new';\n    CommandIDs.createNewMarkdown = 'fileeditor:create-new-markdown-file';\n    CommandIDs.changeFontSize = 'fileeditor:change-font-size';\n    CommandIDs.lineNumbers = 'fileeditor:toggle-line-numbers';\n    CommandIDs.lineWrap = 'fileeditor:toggle-line-wrap';\n    CommandIDs.changeTabs = 'fileeditor:change-tabs';\n    CommandIDs.matchBrackets = 'fileeditor:toggle-match-brackets';\n    CommandIDs.autoClosingBrackets = 'fileeditor:toggle-autoclosing-brackets';\n    CommandIDs.createConsole = 'fileeditor:create-console';\n    CommandIDs.replaceSelection = 'fileeditor:replace-selection';\n    CommandIDs.runCode = 'fileeditor:run-code';\n    CommandIDs.runAllCode = 'fileeditor:run-all';\n    CommandIDs.markdownPreview = 'fileeditor:markdown-preview';\n    CommandIDs.undo = 'fileeditor:undo';\n    CommandIDs.redo = 'fileeditor:redo';\n    CommandIDs.cut = 'fileeditor:cut';\n    CommandIDs.copy = 'fileeditor:copy';\n    CommandIDs.paste = 'fileeditor:paste';\n    CommandIDs.selectAll = 'fileeditor:select-all';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates editor widgets.\n */\nexport const FACTORY = 'Editor';\nlet config = Object.assign({}, CodeEditor.defaultConfig);\n/**\n * A utility class for adding commands and menu items,\n * for use by the File Editor extension or other Editor extensions.\n */\nexport var Commands;\n(function (Commands) {\n    /**\n     * Accessor function that returns the createConsole function for use by Create Console commands\n     */\n    function getCreateConsoleFunction(commands) {\n        return async function createConsole(widget, args) {\n            var _a;\n            const options = args || {};\n            const console = await commands.execute('console:create', {\n                activate: options['activate'],\n                name: (_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name,\n                path: widget.context.path,\n                preferredLanguage: widget.context.model.defaultKernelLanguage,\n                ref: widget.id,\n                insertMode: 'split-bottom'\n            });\n            widget.context.pathChanged.connect((sender, value) => {\n                var _a;\n                console.session.setPath(value);\n                console.session.setName((_a = widget.context.contentsModel) === null || _a === void 0 ? void 0 : _a.name);\n            });\n        };\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateSettings(settings, commands) {\n        config = Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite);\n        // Trigger a refresh of the rendered commands\n        commands.notifyCommandChanged();\n    }\n    Commands.updateSettings = updateSettings;\n    /**\n     * Update the settings of the current tracker instances.\n     */\n    function updateTracker(tracker) {\n        tracker.forEach(widget => {\n            updateWidget(widget.content);\n        });\n    }\n    Commands.updateTracker = updateTracker;\n    /**\n     * Update the settings of a widget.\n     * Skip global settings for transient editor specific configs.\n     */\n    function updateWidget(widget) {\n        const transientConfigs = ['lineNumbers', 'lineWrap', 'matchBrackets'];\n        const editor = widget.editor;\n        Object.keys(config).forEach((key) => {\n            if (!transientConfigs.includes(key)) {\n                editor.setOption(key, config[key]);\n            }\n        });\n    }\n    Commands.updateWidget = updateWidget;\n    /**\n     * Wrapper function for adding the default File Editor commands\n     */\n    function addCommands(commands, settingRegistry, trans, id, isEnabled, tracker, browserFactory) {\n        // Add a command to change font size.\n        addChangeFontSizeCommand(commands, settingRegistry, trans, id);\n        addLineNumbersCommand(commands, settingRegistry, trans, id, isEnabled);\n        addWordWrapCommand(commands, settingRegistry, trans, id, isEnabled);\n        addChangeTabsCommand(commands, settingRegistry, trans, id);\n        addMatchBracketsCommand(commands, settingRegistry, trans, id, isEnabled);\n        addAutoClosingBracketsCommand(commands, settingRegistry, trans, id);\n        addReplaceSelectionCommand(commands, tracker, trans, isEnabled);\n        addCreateConsoleCommand(commands, tracker, trans, isEnabled);\n        addRunCodeCommand(commands, tracker, trans, isEnabled);\n        addRunAllCodeCommand(commands, tracker, trans, isEnabled);\n        addMarkdownPreviewCommand(commands, tracker, trans);\n        // Add a command for creating a new text file.\n        addCreateNewCommand(commands, browserFactory, trans);\n        // Add a command for creating a new Markdown file.\n        addCreateNewMarkdownCommand(commands, browserFactory, trans);\n        addUndoCommand(commands, tracker, trans, isEnabled);\n        addRedoCommand(commands, tracker, trans, isEnabled);\n        addCutCommand(commands, tracker, trans, isEnabled);\n        addCopyCommand(commands, tracker, trans, isEnabled);\n        addPasteCommand(commands, tracker, trans, isEnabled);\n        addSelectAllCommand(commands, tracker, trans, isEnabled);\n    }\n    Commands.addCommands = addCommands;\n    /**\n     * Add a command to change font size for File Editor\n     */\n    function addChangeFontSizeCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.changeFontSize, {\n            execute: args => {\n                const delta = Number(args['delta']);\n                if (Number.isNaN(delta)) {\n                    console.error(`${CommandIDs.changeFontSize}: delta arg must be a number`);\n                    return;\n                }\n                const style = window.getComputedStyle(document.documentElement);\n                const cssSize = parseInt(style.getPropertyValue('--jp-code-font-size'), 10);\n                const currentSize = config.fontSize || cssSize;\n                config.fontSize = currentSize + delta;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: args => args['name']\n        });\n    }\n    Commands.addChangeFontSizeCommand = addChangeFontSizeCommand;\n    /**\n     * Add the Line Numbers command\n     */\n    function addLineNumbersCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.lineNumbers, {\n            execute: () => {\n                config.lineNumbers = !config.lineNumbers;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isEnabled,\n            isToggled: () => config.lineNumbers,\n            label: trans.__('Line Numbers')\n        });\n    }\n    Commands.addLineNumbersCommand = addLineNumbersCommand;\n    /**\n     * Add the Word Wrap command\n     */\n    function addWordWrapCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.lineWrap, {\n            execute: args => {\n                config.lineWrap = args['mode'] || 'off';\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isEnabled,\n            isToggled: args => {\n                const lineWrap = args['mode'] || 'off';\n                return config.lineWrap === lineWrap;\n            },\n            label: trans.__('Word Wrap')\n        });\n    }\n    Commands.addWordWrapCommand = addWordWrapCommand;\n    /**\n     * Add command for changing tabs size or type in File Editor\n     */\n    function addChangeTabsCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.changeTabs, {\n            label: args => args['name'],\n            execute: args => {\n                config.tabSize = args['size'] || 4;\n                config.insertSpaces = !!args['insertSpaces'];\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            isToggled: args => {\n                const insertSpaces = !!args['insertSpaces'];\n                const size = args['size'] || 4;\n                return config.insertSpaces === insertSpaces && config.tabSize === size;\n            }\n        });\n    }\n    Commands.addChangeTabsCommand = addChangeTabsCommand;\n    /**\n     * Add the Match Brackets command\n     */\n    function addMatchBracketsCommand(commands, settingRegistry, trans, id, isEnabled) {\n        commands.addCommand(CommandIDs.matchBrackets, {\n            execute: () => {\n                config.matchBrackets = !config.matchBrackets;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: trans.__('Match Brackets'),\n            isEnabled,\n            isToggled: () => config.matchBrackets\n        });\n    }\n    Commands.addMatchBracketsCommand = addMatchBracketsCommand;\n    /**\n     * Add the Auto Close Brackets for Text Editor command\n     */\n    function addAutoClosingBracketsCommand(commands, settingRegistry, trans, id) {\n        commands.addCommand(CommandIDs.autoClosingBrackets, {\n            execute: () => {\n                config.autoClosingBrackets = !config.autoClosingBrackets;\n                return settingRegistry\n                    .set(id, 'editorConfig', config)\n                    .catch((reason) => {\n                    console.error(`Failed to set ${id}: ${reason.message}`);\n                });\n            },\n            label: trans.__('Auto Close Brackets for Text Editor'),\n            isToggled: () => config.autoClosingBrackets\n        });\n    }\n    Commands.addAutoClosingBracketsCommand = addAutoClosingBracketsCommand;\n    /**\n     * Add the replace selection for text editor command\n     */\n    function addReplaceSelectionCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.replaceSelection, {\n            execute: args => {\n                var _a, _b;\n                const text = args['text'] || '';\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                (_b = (_a = widget.content.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n            },\n            isEnabled,\n            label: trans.__('Replace Selection in Editor')\n        });\n    }\n    Commands.addReplaceSelectionCommand = addReplaceSelectionCommand;\n    /**\n     * Add the Create Console for Editor command\n     */\n    function addCreateConsoleCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.createConsole, {\n            execute: args => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return getCreateConsoleFunction(commands)(widget, args);\n            },\n            isEnabled,\n            label: trans.__('Create Console for Editor')\n        });\n    }\n    Commands.addCreateConsoleCommand = addCreateConsoleCommand;\n    /**\n     * Add the Run Code command\n     */\n    function addRunCodeCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.runCode, {\n            execute: () => {\n                var _a;\n                // Run the appropriate code, taking into account a ```fenced``` code block.\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                let code = '';\n                const editor = widget.editor;\n                const path = widget.context.path;\n                const extension = PathExt.extname(path);\n                const selection = editor.getSelection();\n                const { start, end } = selection;\n                let selected = start.column !== end.column || start.line !== end.line;\n                if (selected) {\n                    // Get the selected code from the editor.\n                    const start = editor.getOffsetAt(selection.start);\n                    const end = editor.getOffsetAt(selection.end);\n                    code = editor.model.value.text.substring(start, end);\n                }\n                else if (MarkdownCodeBlocks.isMarkdown(extension)) {\n                    const { text } = editor.model.value;\n                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);\n                    for (const block of blocks) {\n                        if (block.startLine <= start.line && start.line <= block.endLine) {\n                            code = block.code;\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n                if (!selected) {\n                    // no selection, submit whole line and advance\n                    code = editor.getLine(selection.start.line);\n                    const cursor = editor.getCursorPosition();\n                    if (cursor.line + 1 === editor.lineCount) {\n                        const text = editor.model.value.text;\n                        editor.model.value.text = text + '\\n';\n                    }\n                    editor.setCursorPosition({\n                        line: cursor.line + 1,\n                        column: cursor.column\n                    });\n                }\n                const activate = false;\n                if (code) {\n                    return commands.execute('console:inject', { activate, code, path });\n                }\n                else {\n                    return Promise.resolve(void 0);\n                }\n            },\n            isEnabled,\n            label: trans.__('Run Code')\n        });\n    }\n    Commands.addRunCodeCommand = addRunCodeCommand;\n    /**\n     * Add the Run All Code command\n     */\n    function addRunAllCodeCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.runAllCode, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                let code = '';\n                const editor = widget.editor;\n                const text = editor.model.value.text;\n                const path = widget.context.path;\n                const extension = PathExt.extname(path);\n                if (MarkdownCodeBlocks.isMarkdown(extension)) {\n                    // For Markdown files, run only code blocks.\n                    const blocks = MarkdownCodeBlocks.findMarkdownCodeBlocks(text);\n                    for (const block of blocks) {\n                        code += block.code;\n                    }\n                }\n                else {\n                    code = text;\n                }\n                const activate = false;\n                if (code) {\n                    return commands.execute('console:inject', { activate, code, path });\n                }\n                else {\n                    return Promise.resolve(void 0);\n                }\n            },\n            isEnabled,\n            label: trans.__('Run All Code')\n        });\n    }\n    Commands.addRunAllCodeCommand = addRunAllCodeCommand;\n    /**\n     * Add markdown preview command\n     */\n    function addMarkdownPreviewCommand(commands, tracker, trans) {\n        commands.addCommand(CommandIDs.markdownPreview, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                const path = widget.context.path;\n                return commands.execute('markdownviewer:open', {\n                    path,\n                    options: {\n                        mode: 'split-right'\n                    }\n                });\n            },\n            isVisible: () => {\n                const widget = tracker.currentWidget;\n                return ((widget && PathExt.extname(widget.context.path) === '.md') || false);\n            },\n            label: trans.__('Show Markdown Preview')\n        });\n    }\n    Commands.addMarkdownPreviewCommand = addMarkdownPreviewCommand;\n    /**\n     * Add undo command\n     */\n    function addUndoCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.undo, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                widget.editor.undo();\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Ideally enable it when there are undo events stored\n                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events\n                return true;\n            },\n            icon: undoIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Undo')\n        });\n    }\n    Commands.addUndoCommand = addUndoCommand;\n    /**\n     * Add redo command\n     */\n    function addRedoCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.redo, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                widget.editor.redo();\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Ideally enable it when there are redo events stored\n                // Reference issue #8590: Code mirror editor could expose the history of undo/redo events\n                return true;\n            },\n            icon: redoIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Redo')\n        });\n    }\n    Commands.addRedoCommand = addRedoCommand;\n    /**\n     * Add cut command\n     */\n    function addCutCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.cut, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                const text = getTextSelection(editor);\n                Clipboard.copyToSystem(text);\n                editor.replaceSelection && editor.replaceSelection('');\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Enable command if there is a text selection in the editor\n                return isSelected(widget.editor);\n            },\n            icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Cut')\n        });\n    }\n    Commands.addCutCommand = addCutCommand;\n    /**\n     * Add copy command\n     */\n    function addCopyCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.copy, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                const text = getTextSelection(editor);\n                Clipboard.copyToSystem(text);\n            },\n            isEnabled: () => {\n                var _a;\n                if (!isEnabled()) {\n                    return false;\n                }\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return false;\n                }\n                // Enable command if there is a text selection in the editor\n                return isSelected(widget.editor);\n            },\n            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy')\n        });\n    }\n    Commands.addCopyCommand = addCopyCommand;\n    /**\n     * Add paste command\n     */\n    function addPasteCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.paste, {\n            execute: async () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                // Get data from clipboard\n                const clipboard = window.navigator.clipboard;\n                const clipboardData = await clipboard.readText();\n                if (clipboardData) {\n                    // Paste data to the editor\n                    editor.replaceSelection && editor.replaceSelection(clipboardData);\n                }\n            },\n            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },\n            icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Paste')\n        });\n    }\n    Commands.addPasteCommand = addPasteCommand;\n    /**\n     * Add select all command\n     */\n    function addSelectAllCommand(commands, tracker, trans, isEnabled) {\n        commands.addCommand(CommandIDs.selectAll, {\n            execute: () => {\n                var _a;\n                const widget = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                if (!widget) {\n                    return;\n                }\n                const editor = widget.editor;\n                editor.execCommand('selectAll');\n            },\n            isEnabled: () => { var _a; return Boolean(isEnabled() && ((_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content)); },\n            label: trans.__('Select All')\n        });\n    }\n    Commands.addSelectAllCommand = addSelectAllCommand;\n    /**\n     * Helper function to check if there is a text selection in the editor\n     */\n    function isSelected(editor) {\n        const selectionObj = editor.getSelection();\n        const { start, end } = selectionObj;\n        const selected = start.column !== end.column || start.line !== end.line;\n        return selected;\n    }\n    /**\n     * Helper function to get text selection from the editor\n     */\n    function getTextSelection(editor) {\n        const selectionObj = editor.getSelection();\n        const start = editor.getOffsetAt(selectionObj.start);\n        const end = editor.getOffsetAt(selectionObj.end);\n        const text = editor.model.value.text.substring(start, end);\n        return text;\n    }\n    /**\n     * Function to create a new untitled text file, given the current working directory.\n     */\n    function createNew(commands, cwd, ext = 'txt') {\n        return commands\n            .execute('docmanager:new-untitled', {\n            path: cwd,\n            type: 'file',\n            ext\n        })\n            .then(model => {\n            return commands.execute('docmanager:open', {\n                path: model.path,\n                factory: FACTORY\n            });\n        });\n    }\n    /**\n     * Add the New File command\n     */\n    function addCreateNewCommand(commands, browserFactory, trans) {\n        commands.addCommand(CommandIDs.createNew, {\n            label: args => args['isPalette'] ? trans.__('New Text File') : trans.__('Text File'),\n            caption: trans.__('Create a new text file'),\n            icon: args => (args['isPalette'] ? undefined : textEditorIcon),\n            execute: args => {\n                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;\n                return createNew(commands, cwd);\n            }\n        });\n    }\n    Commands.addCreateNewCommand = addCreateNewCommand;\n    /**\n     * Add the New Markdown File command\n     */\n    function addCreateNewMarkdownCommand(commands, browserFactory, trans) {\n        commands.addCommand(CommandIDs.createNewMarkdown, {\n            label: args => args['isPalette']\n                ? trans.__('New Markdown File')\n                : trans.__('Markdown File'),\n            caption: trans.__('Create a new markdown file'),\n            icon: args => (args['isPalette'] ? undefined : markdownIcon),\n            execute: args => {\n                const cwd = args['cwd'] || browserFactory.defaultBrowser.model.path;\n                return createNew(commands, cwd, 'md');\n            }\n        });\n    }\n    Commands.addCreateNewMarkdownCommand = addCreateNewMarkdownCommand;\n    /**\n     * Wrapper function for adding the default launcher items for File Editor\n     */\n    function addLauncherItems(launcher, trans) {\n        addCreateNewToLauncher(launcher, trans);\n        addCreateNewMarkdownToLauncher(launcher, trans);\n    }\n    Commands.addLauncherItems = addLauncherItems;\n    /**\n     * Add Create New Text File to the Launcher\n     */\n    function addCreateNewToLauncher(launcher, trans) {\n        launcher.add({\n            command: CommandIDs.createNew,\n            category: trans.__('Other'),\n            rank: 1\n        });\n    }\n    Commands.addCreateNewToLauncher = addCreateNewToLauncher;\n    /**\n     * Add Create New Markdown to the Launcher\n     */\n    function addCreateNewMarkdownToLauncher(launcher, trans) {\n        launcher.add({\n            command: CommandIDs.createNewMarkdown,\n            category: trans.__('Other'),\n            rank: 2\n        });\n    }\n    Commands.addCreateNewMarkdownToLauncher = addCreateNewMarkdownToLauncher;\n    /**\n     * Wrapper function for adding the default items to the File Editor palette\n     */\n    function addPaletteItems(palette, trans) {\n        addChangeTabsCommandsToPalette(palette, trans);\n        addCreateNewCommandToPalette(palette, trans);\n        addCreateNewMarkdownCommandToPalette(palette, trans);\n        addChangeFontSizeCommandsToPalette(palette, trans);\n    }\n    Commands.addPaletteItems = addPaletteItems;\n    /**\n     * Add commands to change the tab indentation to the File Editor palette\n     */\n    function addChangeTabsCommandsToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        const command = 'fileeditor:change-tabs';\n        palette.addItem({ command, args, category: paletteCategory });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            palette.addItem({ command, args, category: paletteCategory });\n        }\n    }\n    Commands.addChangeTabsCommandsToPalette = addChangeTabsCommandsToPalette;\n    /**\n     * Add a Create New File command to the File Editor palette\n     */\n    function addCreateNewCommandToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        palette.addItem({\n            command: CommandIDs.createNew,\n            args: { isPalette: true },\n            category: paletteCategory\n        });\n    }\n    Commands.addCreateNewCommandToPalette = addCreateNewCommandToPalette;\n    /**\n     * Add a Create New Markdown command to the File Editor palette\n     */\n    function addCreateNewMarkdownCommandToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        palette.addItem({\n            command: CommandIDs.createNewMarkdown,\n            args: { isPalette: true },\n            category: paletteCategory\n        });\n    }\n    Commands.addCreateNewMarkdownCommandToPalette = addCreateNewMarkdownCommandToPalette;\n    /**\n     * Add commands to change the font size to the File Editor palette\n     */\n    function addChangeFontSizeCommandsToPalette(palette, trans) {\n        const paletteCategory = trans.__('Text Editor');\n        const command = CommandIDs.changeFontSize;\n        let args = { name: trans.__('Increase Font Size'), delta: 1 };\n        palette.addItem({ command, args, category: paletteCategory });\n        args = { name: trans.__('Decrease Font Size'), delta: -1 };\n        palette.addItem({ command, args, category: paletteCategory });\n    }\n    Commands.addChangeFontSizeCommandsToPalette = addChangeFontSizeCommandsToPalette;\n    /**\n     * Wrapper function for adding the default menu items for File Editor\n     */\n    function addMenuItems(menu, commands, tracker, trans, consoleTracker, sessionDialogs) {\n        // Add the editing commands to the settings menu.\n        addEditingCommandsToSettingsMenu(menu, commands, trans);\n        // Add new text file creation to the file menu.\n        addCreateNewFileToFileMenu(menu);\n        // Add new markdown file creation to the file menu.\n        addCreateNewMarkdownFileToFileMenu(menu);\n        // Add undo/redo hooks to the edit menu.\n        addUndoRedoToEditMenu(menu, tracker);\n        // Add editor view options.\n        addEditorViewerToViewMenu(menu, tracker, trans);\n        // Add a console creator the the file menu.\n        addConsoleCreatorToFileMenu(menu, commands, tracker, trans);\n        // Add a code runner to the run menu.\n        if (consoleTracker) {\n            addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, trans, sessionDialogs);\n        }\n    }\n    Commands.addMenuItems = addMenuItems;\n    /**\n     * Add File Editor editing commands to the Settings menu, including:\n     * Indent with Tab, Tab Spaces, Change Font Size, and auto closing brackets\n     */\n    function addEditingCommandsToSettingsMenu(menu, commands, trans) {\n        const tabMenu = new Menu({ commands });\n        tabMenu.title.label = trans.__('Text Editor Indentation');\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        const command = 'fileeditor:change-tabs';\n        tabMenu.addItem({ command, args });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            tabMenu.addItem({ command, args });\n        }\n        menu.settingsMenu.addGroup([\n            {\n                command: CommandIDs.changeFontSize,\n                args: { name: trans.__('Increase Text Editor Font Size'), delta: +1 }\n            },\n            {\n                command: CommandIDs.changeFontSize,\n                args: { name: trans.__('Decrease Text Editor Font Size'), delta: -1 }\n            },\n            { type: 'submenu', submenu: tabMenu },\n            { command: CommandIDs.autoClosingBrackets }\n        ], 30);\n    }\n    Commands.addEditingCommandsToSettingsMenu = addEditingCommandsToSettingsMenu;\n    /**\n     * Add a Create New File command to the File menu\n     */\n    function addCreateNewFileToFileMenu(menu) {\n        menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew }], 30);\n    }\n    Commands.addCreateNewFileToFileMenu = addCreateNewFileToFileMenu;\n    /**\n     * Add a Create New Markdown File command to the File menu\n     */\n    function addCreateNewMarkdownFileToFileMenu(menu) {\n        menu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNewMarkdown }], 30);\n    }\n    Commands.addCreateNewMarkdownFileToFileMenu = addCreateNewMarkdownFileToFileMenu;\n    /**\n     * Add File Editor undo and redo widgets to the Edit menu\n     */\n    function addUndoRedoToEditMenu(menu, tracker) {\n        menu.editMenu.undoers.add({\n            tracker,\n            undo: widget => {\n                widget.content.editor.undo();\n            },\n            redo: widget => {\n                widget.content.editor.redo();\n            }\n        });\n    }\n    Commands.addUndoRedoToEditMenu = addUndoRedoToEditMenu;\n    /**\n     * Add a File Editor editor viewer to the View Menu\n     */\n    function addEditorViewerToViewMenu(menu, tracker, trans) {\n        menu.viewMenu.editorViewers.add({\n            tracker,\n            toggleLineNumbers: widget => {\n                const lineNumbers = !widget.content.editor.getOption('lineNumbers');\n                widget.content.editor.setOption('lineNumbers', lineNumbers);\n            },\n            toggleWordWrap: widget => {\n                const oldValue = widget.content.editor.getOption('lineWrap');\n                const newValue = oldValue === 'off' ? 'on' : 'off';\n                widget.content.editor.setOption('lineWrap', newValue);\n            },\n            toggleMatchBrackets: widget => {\n                const matchBrackets = !widget.content.editor.getOption('matchBrackets');\n                widget.content.editor.setOption('matchBrackets', matchBrackets);\n            },\n            lineNumbersToggled: widget => widget.content.editor.getOption('lineNumbers'),\n            wordWrapToggled: widget => widget.content.editor.getOption('lineWrap') !== 'off',\n            matchBracketsToggled: widget => widget.content.editor.getOption('matchBrackets')\n        });\n    }\n    Commands.addEditorViewerToViewMenu = addEditorViewerToViewMenu;\n    /**\n     * Add a File Editor console creator to the File menu\n     */\n    function addConsoleCreatorToFileMenu(menu, commands, tracker, trans) {\n        const createConsole = getCreateConsoleFunction(commands);\n        menu.fileMenu.consoleCreators.add({\n            tracker,\n            createConsoleLabel: (n) => trans.__('Create Console for Editor'),\n            createConsole\n        });\n    }\n    Commands.addConsoleCreatorToFileMenu = addConsoleCreatorToFileMenu;\n    /**\n     * Add a File Editor code runner to the Run menu\n     */\n    function addCodeRunnersToRunMenu(menu, commands, tracker, consoleTracker, trans, sessionDialogs) {\n        menu.runMenu.codeRunners.add({\n            tracker,\n            runLabel: (n) => trans.__('Run Code'),\n            runAllLabel: (n) => trans.__('Run All Code'),\n            restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Code'),\n            isEnabled: current => !!consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; }),\n            run: () => commands.execute(CommandIDs.runCode),\n            runAll: () => commands.execute(CommandIDs.runAllCode),\n            restartAndRunAll: current => {\n                const widget = consoleTracker.find(widget => { var _a; return ((_a = widget.sessionContext.session) === null || _a === void 0 ? void 0 : _a.path) === current.context.path; });\n                if (widget) {\n                    return (sessionDialogs || sessionContextDialogs)\n                        .restart(widget.sessionContext)\n                        .then(restarted => {\n                        if (restarted) {\n                            void commands.execute(CommandIDs.runAllCode);\n                        }\n                        return restarted;\n                    });\n                }\n            }\n        });\n    }\n    Commands.addCodeRunnersToRunMenu = addCodeRunnersToRunMenu;\n    /**\n     * Wrapper function for adding the default items to the File Editor context menu\n     */\n    function addContextMenuItems(app) {\n        addCreateConsoleToContextMenu(app);\n        addMarkdownPreviewToContextMenu(app);\n        addUndoCommandToContextMenu(app);\n        addRedoCommandToContextMenu(app);\n        addCutCommandToContextMenu(app);\n        addCopyCommandToContextMenu(app);\n        addPasteCommandToContextMenu(app);\n        addSelectAllCommandToContextMenu(app);\n    }\n    Commands.addContextMenuItems = addContextMenuItems;\n    /**\n     * Add a Create Console item to the File Editor context menu\n     */\n    function addCreateConsoleToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.createConsole,\n            selector: '.jp-FileEditor'\n        });\n    }\n    Commands.addCreateConsoleToContextMenu = addCreateConsoleToContextMenu;\n    /**\n     * Add a Markdown Preview item to the File Editor context menu\n     */\n    function addMarkdownPreviewToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.markdownPreview,\n            selector: '.jp-FileEditor'\n        });\n    }\n    Commands.addMarkdownPreviewToContextMenu = addMarkdownPreviewToContextMenu;\n    /**\n     * Add a Undo item to the File Editor context menu\n     */\n    function addUndoCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.undo,\n            selector: '.jp-FileEditor',\n            rank: 1\n        });\n    }\n    Commands.addUndoCommandToContextMenu = addUndoCommandToContextMenu;\n    /**\n     * Add a Redo item to the File Editor context menu\n     */\n    function addRedoCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.redo,\n            selector: '.jp-FileEditor',\n            rank: 2\n        });\n    }\n    Commands.addRedoCommandToContextMenu = addRedoCommandToContextMenu;\n    /**\n     * Add a Cut item to the File Editor context menu\n     */\n    function addCutCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.cut,\n            selector: '.jp-FileEditor',\n            rank: 3\n        });\n    }\n    Commands.addCutCommandToContextMenu = addCutCommandToContextMenu;\n    /**\n     * Add a Copy item to the File Editor context menu\n     */\n    function addCopyCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.copy,\n            selector: '.jp-FileEditor',\n            rank: 4\n        });\n    }\n    Commands.addCopyCommandToContextMenu = addCopyCommandToContextMenu;\n    /**\n     * Add a Paste item to the File Editor context menu\n     */\n    function addPasteCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.paste,\n            selector: '.jp-FileEditor',\n            rank: 5\n        });\n    }\n    Commands.addPasteCommandToContextMenu = addPasteCommandToContextMenu;\n    /**\n     * Add a Select All item to the File Editor context menu\n     */\n    function addSelectAllCommandToContextMenu(app) {\n        app.contextMenu.addItem({\n            command: CommandIDs.selectAll,\n            selector: '.jp-FileEditor',\n            rank: 6\n        });\n    }\n    Commands.addSelectAllCommandToContextMenu = addSelectAllCommandToContextMenu;\n})(Commands || (Commands = {}));\n//# sourceMappingURL=commands.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module fileeditor-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { ICommandPalette, WidgetTracker, ISessionContextDialogs } from '@jupyterlab/apputils';\nimport { CodeEditor, IEditorServices } from '@jupyterlab/codeeditor';\nimport { IConsoleTracker } from '@jupyterlab/console';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { FileEditorFactory, IEditorTracker, TabSpaceStatus } from '@jupyterlab/fileeditor';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { Menu } from '@lumino/widgets';\nimport { Commands, FACTORY } from './commands';\nexport { Commands } from './commands';\n/**\n * The editor tracker extension.\n */\nconst plugin = {\n    activate,\n    id: '@jupyterlab/fileeditor-extension:plugin',\n    requires: [\n        IEditorServices,\n        IFileBrowserFactory,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [\n        IConsoleTracker,\n        ICommandPalette,\n        ILauncher,\n        IMainMenu,\n        ILayoutRestorer,\n        ISessionContextDialogs\n    ],\n    provides: IEditorTracker,\n    autoStart: true\n};\n/**\n * A plugin that provides a status item allowing the user to\n * switch tabs vs spaces and tab widths for text editors.\n */\nexport const tabSpaceStatus = {\n    id: '@jupyterlab/fileeditor-extension:tab-space-status',\n    autoStart: true,\n    requires: [IEditorTracker, ISettingRegistry, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, editorTracker, settingRegistry, translator, statusBar) => {\n        const trans = translator.load('jupyterlab');\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        // Create a menu for switching tabs vs spaces.\n        const menu = new Menu({ commands: app.commands });\n        const command = 'fileeditor:change-tabs';\n        const { shell } = app;\n        const args = {\n            insertSpaces: false,\n            size: 4,\n            name: trans.__('Indent with Tab')\n        };\n        menu.addItem({ command, args });\n        for (const size of [1, 2, 4, 8]) {\n            const args = {\n                insertSpaces: true,\n                size,\n                name: trans._n('Spaces: %1', 'Spaces: %1', size)\n            };\n            menu.addItem({ command, args });\n        }\n        // Create the status item.\n        const item = new TabSpaceStatus({ menu, translator });\n        // Keep a reference to the code editor config from the settings system.\n        const updateSettings = (settings) => {\n            item.model.config = Object.assign(Object.assign({}, CodeEditor.defaultConfig), settings.get('editorConfig').composite);\n        };\n        void Promise.all([\n            settingRegistry.load('@jupyterlab/fileeditor-extension:plugin'),\n            app.restored\n        ]).then(([settings]) => {\n            updateSettings(settings);\n            settings.changed.connect(updateSettings);\n        });\n        // Add the status item.\n        statusBar.registerStatusItem('@jupyterlab/fileeditor-extension:tab-space-status', {\n            item,\n            align: 'right',\n            rank: 1,\n            isActive: () => {\n                return (!!shell.currentWidget && editorTracker.has(shell.currentWidget));\n            }\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [plugin, tabSpaceStatus];\nexport default plugins;\n/**\n * Activate the editor tracker plugin.\n */\nfunction activate(app, editorServices, browserFactory, settingRegistry, translator, consoleTracker, palette, launcher, menu, restorer, sessionDialogs) {\n    const id = plugin.id;\n    const trans = translator.load('jupyterlab');\n    const namespace = 'editor';\n    const factory = new FileEditorFactory({\n        editorServices,\n        factoryOptions: {\n            name: FACTORY,\n            fileTypes: ['markdown', '*'],\n            defaultFor: ['markdown', '*'] // it outranks the defaultRendered viewer.\n        }\n    });\n    const { commands, restored, shell } = app;\n    const tracker = new WidgetTracker({\n        namespace\n    });\n    const isEnabled = () => tracker.currentWidget !== null &&\n        tracker.currentWidget === shell.currentWidget;\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: widget => ({ path: widget.context.path, factory: FACTORY }),\n            name: widget => widget.context.path\n        });\n    }\n    // Add a console creator to the File menu\n    // Fetch the initial state of the settings.\n    Promise.all([settingRegistry.load(id), restored])\n        .then(([settings]) => {\n        Commands.updateSettings(settings, commands);\n        Commands.updateTracker(tracker);\n        settings.changed.connect(() => {\n            Commands.updateSettings(settings, commands);\n            Commands.updateTracker(tracker);\n        });\n    })\n        .catch((reason) => {\n        console.error(reason.message);\n        Commands.updateTracker(tracker);\n    });\n    factory.widgetCreated.connect((sender, widget) => {\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        void tracker.add(widget);\n        Commands.updateWidget(widget.content);\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    // Handle the settings of new widgets.\n    tracker.widgetAdded.connect((sender, widget) => {\n        Commands.updateWidget(widget.content);\n    });\n    Commands.addCommands(commands, settingRegistry, trans, id, isEnabled, tracker, browserFactory);\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        Commands.addLauncherItems(launcher, trans);\n    }\n    if (palette) {\n        Commands.addPaletteItems(palette, trans);\n    }\n    if (menu) {\n        Commands.addMenuItems(menu, commands, tracker, trans, consoleTracker, sessionDialogs);\n    }\n    Commands.addContextMenuItems(app);\n    return tracker;\n}\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}