{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab-classic/tree-extension/lib/index.js"],"names":["CommandIDs","copy","copyDownloadLink","cut","del","download","duplicate","goToPath","openPath","open","openBrowserTab","paste","createNewDirectory","createNewFile","createNewMarkdownFile","rename","share","copyPath","shutdown","toggleNavigateToCurrentDirectory","toggleLastModified","search","newFiles","id","requires","IFileBrowserFactory","autoStart","activate","app","filebrowser","commands","browser","defaultBrowser","newNotebookCommand","addCommand","label","icon","notebookIcon","execute","newNotebook","CommandToolbarButton","newFile","toolbar","insertItem","newTerminal","newTerminalCommand","terminalIcon","factory","docManager","settingRegistry","translator","commandPalette","mainMenu","restorer","treePathUpdater","manager","add","namespace","trans","load","docRegistry","registry","tracker","widget","currentWidget","delete","closeIcon","stylesheet","__","mnemonic","copyIcon","cutIcon","downloadIcon","async","args","path","Private","navigateToPath","type","browserForPath","getBrowserForPath","clearSelectedItems","parts","split","name","length","selectItemByName","reason","console","warn","caption","_a","InputDialog","placeholder","title","okLabel","value","undefined","trailingSlash","endsWith","slice","services","model","item","contents","get","content","Error","dontShowBrowser","response","status","message","showErrorMessage","addItem","command","category","Promise","all","toArray","map","selectedItems","localPath","cd","ft","getFileType","bindprops","folderIcon","addIcon","getDownloadUrl","next","then","url","Clipboard","pasteIcon","newFolderIcon","ext","textEditorIcon","markdownIcon","editIcon","isVisible","fileIcon","shutdownKernels","stopIcon","isToggled","navigateToCurrentDirectory","set","catch","error","header","DOMUtils","document","body","column","classList","contains","remove","i","alert","settingsMenu","addGroup","selectorContent","selectorItem","selectorNotDir","contextMenu","selector","rank","addCommands","tabPanel","TabPanel","tabPlacement","tabsMovable","addClass","addWidget","tabBar","addTab","running","RunningSessions","runningIcon","shell","restored","useFuzzyFilter","settings","changed","connect","composite","pathChanged","sender","newValue","IDocumentManager","ISettingRegistry","ITranslator","optional","ICommandPalette","IMainMenu","ILayoutRestorer","ITreePathUpdater","IRunningSessionManagers","state","router","tree","WidgetTracker","createFileBrowser","options","FilterFileBrowserModel","auto","driveName","refreshInterval","restore","FileBrowser","restoreBrowser","provides","IStateDB","IRouter","JupyterFrontEnd","find","_path","ready","PathExt","restoring","refresh","removeClass","listener","routed","disconnect","paths","file"],"mappings":"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","file":"1906.bundle.js","sourcesContent":["// Vendored from https://github.com/jupyterlab/jupyterlab/blob/b9511a52557d6ae56e597d0f48392993bdc432ae/packages/filebrowser-extension/src/index.ts\n// Because of ILabShell being a required dependency in some of the plugins\n// TODO: remove this package when ILabShell is optional upstream\n// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILayoutRestorer, ITreePathUpdater, IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Clipboard, WidgetTracker, ICommandPalette, InputDialog, showErrorMessage, DOMUtils, CommandToolbarButton } from '@jupyterlab/apputils';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FilterFileBrowserModel, FileBrowser, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IRunningSessionManagers, RunningSessions } from '@jupyterlab/running';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { addIcon, closeIcon, copyIcon, cutIcon, downloadIcon, editIcon, fileIcon, folderIcon, markdownIcon, newFolderIcon, notebookIcon, pasteIcon, runningIcon, stopIcon, terminalIcon, textEditorIcon } from '@jupyterlab/ui-components';\nimport { map, toArray } from '@lumino/algorithm';\nimport { TabPanel } from '@lumino/widgets';\n/**\n * The command IDs used by the file browser plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.copy = 'filebrowser:copy';\n    CommandIDs.copyDownloadLink = 'filebrowser:copy-download-link';\n    CommandIDs.cut = 'filebrowser:cut';\n    CommandIDs.del = 'filebrowser:delete';\n    CommandIDs.download = 'filebrowser:download';\n    CommandIDs.duplicate = 'filebrowser:duplicate';\n    CommandIDs.goToPath = 'filebrowser:go-to-path';\n    CommandIDs.openPath = 'filebrowser:open-path';\n    CommandIDs.open = 'filebrowser:open';\n    CommandIDs.openBrowserTab = 'filebrowser:open-browser-tab';\n    CommandIDs.paste = 'filebrowser:paste';\n    CommandIDs.createNewDirectory = 'filebrowser:create-new-directory';\n    CommandIDs.createNewFile = 'filebrowser:create-new-file';\n    CommandIDs.createNewMarkdownFile = 'filebrowser:create-new-markdown-file';\n    CommandIDs.rename = 'filebrowser:rename';\n    // For main browser only.\n    CommandIDs.share = 'filebrowser:share-main';\n    // For main browser only.\n    CommandIDs.copyPath = 'filebrowser:copy-path';\n    CommandIDs.shutdown = 'filebrowser:shutdown';\n    CommandIDs.toggleNavigateToCurrentDirectory = 'filebrowser:toggle-navigate-to-current-directory';\n    CommandIDs.toggleLastModified = 'filebrowser:toggle-last-modified';\n    CommandIDs.search = 'filebrowser:search';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Plugin to add extra buttons to the file browser to create\n * new notebooks, files and terminals.\n */\nconst newFiles = {\n    id: '@jupyterlab-classic/tree-extension:buttons',\n    requires: [IFileBrowserFactory],\n    autoStart: true,\n    activate: (app, filebrowser) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        // wrapper commands to be able to override the label\n        const newNotebookCommand = 'tree:new-notebook';\n        commands.addCommand(newNotebookCommand, {\n            label: 'New Notebook',\n            icon: notebookIcon,\n            execute: () => {\n                return commands.execute('notebook:create-new');\n            }\n        });\n        const newNotebook = new CommandToolbarButton({\n            commands,\n            id: newNotebookCommand\n        });\n        const newFile = new CommandToolbarButton({\n            commands,\n            id: CommandIDs.createNewFile\n        });\n        browser.toolbar.insertItem(0, 'new-notebook', newNotebook);\n        browser.toolbar.insertItem(1, 'new-file', newFile);\n    }\n};\n/**\n * Plugin to add a \"New Terminal\" button to the file browser toolbar.\n */\nconst newTerminal = {\n    id: '@jupyterlab-classic/tree-extension:new-terminal',\n    requires: [IFileBrowserFactory],\n    autoStart: true,\n    activate: (app, filebrowser) => {\n        const { commands } = app;\n        const browser = filebrowser.defaultBrowser;\n        const newTerminalCommand = 'tree:new-terminal';\n        commands.addCommand(newTerminalCommand, {\n            label: 'New Terminal',\n            icon: terminalIcon,\n            execute: () => {\n                return commands.execute('terminal:create-new');\n            }\n        });\n        const newTerminal = new CommandToolbarButton({\n            commands,\n            id: newTerminalCommand\n        });\n        browser.toolbar.insertItem(2, 'new-terminal', newTerminal);\n    }\n};\n/**\n * The default file browser extension.\n */\nconst browser = {\n    activate: activateBrowser,\n    id: '@jupyterlab-classic/tree-extension:browser',\n    requires: [\n        IFileBrowserFactory,\n        IDocumentManager,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [\n        ICommandPalette,\n        IMainMenu,\n        ILayoutRestorer,\n        ITreePathUpdater,\n        IRunningSessionManagers\n    ],\n    autoStart: true\n};\n/**\n * The default file browser factory provider.\n *\n * TODO: remove and use upstream plugin\n */\nconst factory = {\n    activate: activateFactory,\n    id: '@jupyterlab-classic/tree-extension:factory',\n    provides: IFileBrowserFactory,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IStateDB, IRouter, JupyterFrontEnd.ITreeResolver]\n};\n/**\n * The file browser namespace token.\n */\nconst namespace = 'filebrowser';\n/**\n * Activate the file browser factory provider.\n */\nasync function activateFactory(app, docManager, translator, state, router, tree) {\n    const { commands } = app;\n    const tracker = new WidgetTracker({ namespace });\n    const createFileBrowser = (id, options = {}) => {\n        var _a;\n        const model = new FilterFileBrowserModel({\n            translator: translator,\n            auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n            manager: docManager,\n            driveName: options.driveName || '',\n            refreshInterval: options.refreshInterval,\n            state: options.state === null ? undefined : options.state || state || undefined\n        });\n        const restore = options.restore;\n        const widget = new FileBrowser({ id, model, restore, translator });\n        // Track the newly created file browser.\n        void tracker.add(widget);\n        return widget;\n    };\n    // Manually restore and load the default file browser.\n    const defaultBrowser = createFileBrowser('filebrowser', {\n        auto: false,\n        restore: false\n    });\n    void Private.restoreBrowser(defaultBrowser, commands, router, tree);\n    return { createFileBrowser, defaultBrowser, tracker };\n}\n/**\n * Activate the default file browser in the sidebar.\n */\nfunction activateBrowser(app, factory, docManager, settingRegistry, translator, commandPalette, mainMenu, restorer, treePathUpdater, manager) {\n    const browser = factory.defaultBrowser;\n    // Let the application restorer track the primary file browser (that is\n    // automatically created) for restoration of application state (e.g. setting\n    // the file browser as the current side bar widget).\n    //\n    // All other file browsers created by using the factory function are\n    // responsible for their own restoration behavior, if any.\n    if (restorer) {\n        restorer.add(browser, namespace);\n    }\n    addCommands(app, factory, settingRegistry, translator, commandPalette, mainMenu);\n    browser.title.icon = folderIcon;\n    const tabPanel = new TabPanel({ tabPlacement: 'top', tabsMovable: true });\n    tabPanel.addClass('jp-TreePanel');\n    browser.title.label = 'Files';\n    tabPanel.addWidget(browser);\n    tabPanel.tabBar.addTab(browser.title);\n    if (manager) {\n        const running = new RunningSessions(manager, translator);\n        running.id = 'jp-running-sessions';\n        running.title.label = 'Running';\n        running.title.icon = runningIcon;\n        tabPanel.addWidget(running);\n        tabPanel.tabBar.addTab(running.title);\n    }\n    app.shell.add(tabPanel, 'main', { rank: 100 });\n    void Promise.all([app.restored, browser.model.restored]).then(() => {\n        let navigateToCurrentDirectory = false;\n        let useFuzzyFilter = true;\n        void settingRegistry\n            .load('@jupyterlab/filebrowser-extension:browser')\n            .then(settings => {\n            settings.changed.connect(settings => {\n                navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory').composite;\n                browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n            });\n            navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory')\n                .composite;\n            browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n            settings.changed.connect(settings => {\n                useFuzzyFilter = settings.get('useFuzzyFilter').composite;\n                browser.useFuzzyFilter = useFuzzyFilter;\n            });\n            useFuzzyFilter = settings.get('useFuzzyFilter').composite;\n            browser.useFuzzyFilter = useFuzzyFilter;\n        });\n        if (treePathUpdater) {\n            browser.model.pathChanged.connect((sender, args) => {\n                treePathUpdater(args.newValue);\n            });\n        }\n    });\n}\n/**\n * Add the main file browser commands to the application's command registry.\n */\nfunction addCommands(app, factory, settingRegistry, translator, commandPalette, mainMenu) {\n    const trans = translator.load('jupyterlab');\n    const { docRegistry: registry, commands } = app;\n    const { defaultBrowser: browser, tracker } = factory;\n    commands.addCommand(CommandIDs.del, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.delete();\n            }\n        },\n        icon: closeIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Delete'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copy, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.copy();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.cut, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.cut();\n            }\n        },\n        icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Cut')\n    });\n    commands.addCommand(CommandIDs.download, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.download();\n            }\n        },\n        icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Download')\n    });\n    commands.addCommand(CommandIDs.duplicate, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.duplicate();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Duplicate')\n    });\n    commands.addCommand(CommandIDs.goToPath, {\n        execute: async (args) => {\n            const path = args.path || '';\n            try {\n                const item = await Private.navigateToPath(path, factory, translator);\n                if (item.type !== 'directory') {\n                    const browserForPath = Private.getBrowserForPath(path, factory);\n                    if (browserForPath) {\n                        browserForPath.clearSelectedItems();\n                        const parts = path.split('/');\n                        const name = parts[parts.length - 1];\n                        if (name) {\n                            await browserForPath.selectItemByName(name);\n                        }\n                    }\n                }\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goToPath} failed to go to: ${path}`, reason);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.openPath, {\n        label: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from Path…'),\n        caption: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from path'),\n        execute: async (args) => {\n            var _a;\n            let path;\n            if (args === null || args === void 0 ? void 0 : args.path) {\n                path = args.path;\n            }\n            else {\n                path = (_a = (await InputDialog.getText({\n                    label: trans.__('Path'),\n                    placeholder: '/path/relative/to/jlab/root',\n                    title: trans.__('Open Path'),\n                    okLabel: trans.__('Open')\n                })).value) !== null && _a !== void 0 ? _a : undefined;\n            }\n            if (!path) {\n                return;\n            }\n            try {\n                const trailingSlash = path !== '/' && path.endsWith('/');\n                if (trailingSlash) {\n                    // The normal contents service errors on paths ending in slash\n                    path = path.slice(0, path.length - 1);\n                }\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                const { services } = browserForPath.model.manager;\n                const item = await services.contents.get(path, {\n                    content: false\n                });\n                if (trailingSlash && item.type !== 'directory') {\n                    throw new Error(`Path ${path}/ is not a directory`);\n                }\n                await commands.execute(CommandIDs.goToPath, {\n                    path,\n                    dontShowBrowser: args.dontShowBrowser\n                });\n                if (item.type === 'directory') {\n                    return;\n                }\n                return commands.execute('docmanager:open', { path });\n            }\n            catch (reason) {\n                if (reason.response && reason.response.status === 404) {\n                    reason.message = trans.__('Could not find path: %1', path);\n                }\n                return showErrorMessage(trans.__('Cannot open'), reason);\n            }\n        }\n    });\n    // Add the openPath command to the command palette\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.openPath,\n            category: trans.__('File Operations')\n        });\n    }\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const factory = args['factory'] || void 0;\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const { contents } = widget.model.manager.services;\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                if (item.type === 'directory') {\n                    const localPath = contents.localPath(item.path);\n                    return widget.model.cd(`/${localPath}`);\n                }\n                return commands.execute('docmanager:open', {\n                    factory: factory,\n                    path: item.path\n                });\n            })));\n        },\n        icon: args => {\n            var _a;\n            const factory = args['factory'] || void 0;\n            if (factory) {\n                // if an explicit factory is passed...\n                const ft = registry.getFileType(factory);\n                // ...set an icon if the factory name corresponds to a file type name...\n                // ...or leave the icon blank\n                return (_a = ft === null || ft === void 0 ? void 0 : ft.icon) === null || _a === void 0 ? void 0 : _a.bindprops({ stylesheet: 'menuItem' });\n            }\n            else {\n                return folderIcon.bindprops({ stylesheet: 'menuItem' });\n            }\n        },\n        // FIXME-TRANS: Is this localizable?\n        label: args => (args['label'] || args['factory'] || trans.__('Open')),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.openBrowserTab, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                return commands.execute('docmanager:open-browser-tab', {\n                    path: item.path\n                });\n            })));\n        },\n        icon: addIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Open in New Browser Tab'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyDownloadLink, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            return widget.model.manager.services.contents\n                .getDownloadUrl(widget.selectedItems().next().path)\n                .then(url => {\n                Clipboard.copyToSystem(url);\n            });\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Download Link'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.paste, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.paste();\n            }\n        },\n        icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Paste'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.createNewDirectory, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewDirectory();\n            }\n        },\n        icon: newFolderIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Folder')\n    });\n    commands.addCommand(CommandIDs.createNewFile, {\n        execute: () => {\n            const { model: { path } } = browser;\n            void commands.execute('docmanager:new-untitled', {\n                path,\n                type: 'file',\n                ext: 'txt'\n            });\n        },\n        icon: textEditorIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New File')\n    });\n    commands.addCommand(CommandIDs.createNewMarkdownFile, {\n        execute: () => {\n            const { model: { path } } = browser;\n            void commands.execute('docmanager:new-untitled', {\n                path,\n                type: 'file',\n                ext: 'md'\n            });\n        },\n        icon: markdownIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Markdown File')\n    });\n    commands.addCommand(CommandIDs.rename, {\n        execute: args => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.rename();\n            }\n        },\n        icon: editIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Rename'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyPath, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const item = widget.selectedItems().next();\n            if (!item) {\n                return;\n            }\n            Clipboard.copyToSystem(item.path);\n        },\n        isVisible: () => !!tracker.currentWidget &&\n            tracker.currentWidget.selectedItems().next !== undefined,\n        icon: fileIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Path')\n    });\n    commands.addCommand(CommandIDs.shutdown, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.shutdownKernels();\n            }\n        },\n        icon: stopIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Shut Down Kernel')\n    });\n    commands.addCommand(CommandIDs.toggleNavigateToCurrentDirectory, {\n        label: trans.__('Show Active File in File Browser'),\n        isToggled: () => browser.navigateToCurrentDirectory,\n        execute: () => {\n            const value = !browser.navigateToCurrentDirectory;\n            const key = 'navigateToCurrentDirectory';\n            return settingRegistry\n                .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                .catch((reason) => {\n                console.error('Failed to set navigateToCurrentDirectory setting');\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.toggleLastModified, {\n        label: trans.__('Toggle Last Modified Column'),\n        execute: () => {\n            const header = DOMUtils.findElement(document.body, 'jp-id-modified');\n            const column = DOMUtils.findElements(document.body, 'jp-DirListing-itemModified');\n            if (header.classList.contains('jp-LastModified-hidden')) {\n                header.classList.remove('jp-LastModified-hidden');\n                for (let i = 0; i < column.length; i++) {\n                    column[i].classList.remove('jp-LastModified-hidden');\n                }\n            }\n            else {\n                header.classList.add('jp-LastModified-hidden');\n                for (let i = 0; i < column.length; i++) {\n                    column[i].classList.add('jp-LastModified-hidden');\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.search, {\n        label: trans.__('Search on File Names'),\n        execute: () => alert('search')\n    });\n    if (mainMenu) {\n        mainMenu.settingsMenu.addGroup([{ command: CommandIDs.toggleNavigateToCurrentDirectory }], 5);\n    }\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.toggleNavigateToCurrentDirectory,\n            category: trans.__('File Operations')\n        });\n    }\n    // matches anywhere on filebrowser\n    const selectorContent = '.jp-DirListing-content';\n    // matches all filebrowser items\n    const selectorItem = '.jp-DirListing-item[data-isdir]';\n    // matches only non-directory items\n    const selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\n    // If the user did not click on any file, we still want to show paste and new folder,\n    // so target the content rather than an item.\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewDirectory,\n        selector: selectorContent,\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewFile,\n        selector: selectorContent,\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewMarkdownFile,\n        selector: selectorContent,\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.paste,\n        selector: selectorContent,\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.open,\n        selector: selectorItem,\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.openBrowserTab,\n        selector: selectorNotDir,\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.rename,\n        selector: selectorItem,\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.del,\n        selector: selectorItem,\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.cut,\n        selector: selectorItem,\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copy,\n        selector: selectorNotDir,\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.duplicate,\n        selector: selectorNotDir,\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.download,\n        selector: selectorNotDir,\n        rank: 9\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.shutdown,\n        selector: selectorNotDir,\n        rank: 10\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.share,\n        selector: selectorItem,\n        rank: 11\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyPath,\n        selector: selectorItem,\n        rank: 12\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyDownloadLink,\n        selector: selectorNotDir,\n        rank: 13\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.toggleLastModified,\n        selector: '.jp-DirListing-header',\n        rank: 14\n    });\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get browser object given file path.\n     */\n    function getBrowserForPath(path, factory) {\n        const { defaultBrowser: browser, tracker } = factory;\n        const driveName = browser.model.manager.services.contents.driveName(path);\n        if (driveName) {\n            const browserForPath = tracker.find(_path => _path.model.driveName === driveName);\n            if (!browserForPath) {\n                // warn that no filebrowser could be found for this driveName\n                console.warn(`${CommandIDs.goToPath} failed to find filebrowser for path: ${path}`);\n                return;\n            }\n            return browserForPath;\n        }\n        // if driveName is empty, assume the main filebrowser\n        return browser;\n    }\n    Private.getBrowserForPath = getBrowserForPath;\n    /**\n     * Navigate to a path or the path containing a file.\n     */\n    async function navigateToPath(path, factory, translator) {\n        const trans = translator.load('jupyterlab');\n        const browserForPath = Private.getBrowserForPath(path, factory);\n        if (!browserForPath) {\n            throw new Error(trans.__('No browser for path'));\n        }\n        const { services } = browserForPath.model.manager;\n        const localPath = services.contents.localPath(path);\n        await services.ready;\n        const item = await services.contents.get(path, { content: false });\n        const { model } = browserForPath;\n        await model.restored;\n        if (item.type === 'directory') {\n            await model.cd(`/${localPath}`);\n        }\n        else {\n            await model.cd(`/${PathExt.dirname(localPath)}`);\n        }\n        return item;\n    }\n    Private.navigateToPath = navigateToPath;\n    /**\n     * Restores file browser state and overrides state if tree resolver resolves.\n     */\n    async function restoreBrowser(browser, commands, router, tree) {\n        const restoring = 'jp-mod-restoring';\n        browser.addClass(restoring);\n        if (!router) {\n            await browser.model.restore(browser.id);\n            await browser.model.refresh();\n            browser.removeClass(restoring);\n            return;\n        }\n        const listener = async () => {\n            router.routed.disconnect(listener);\n            const paths = await (tree === null || tree === void 0 ? void 0 : tree.paths);\n            if ((paths === null || paths === void 0 ? void 0 : paths.file) || (paths === null || paths === void 0 ? void 0 : paths.browser)) {\n                // Restore the model without populating it.\n                await browser.model.restore(browser.id, false);\n                if (paths.file) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.file,\n                        dontShowBrowser: true\n                    });\n                }\n                if (paths.browser) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.browser,\n                        dontShowBrowser: true\n                    });\n                }\n            }\n            else {\n                await browser.model.restore(browser.id);\n                await browser.model.refresh();\n            }\n            browser.removeClass(restoring);\n        };\n        router.routed.connect(listener);\n    }\n    Private.restoreBrowser = restoreBrowser;\n})(Private || (Private = {}));\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    browser,\n    factory,\n    newFiles,\n    newTerminal\n];\nexport default plugins;\n"],"sourceRoot":""}