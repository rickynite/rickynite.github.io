{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/connectionlost.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/frontend.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/shell.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/status.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/lab.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/router.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/treepathupdater.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/application/lib/tokens.js"],"names":["ConnectionLost","async","manager","err","translator","trans","nullTranslator","load","title","__","networkMsg","showErrorMessage","message","Private","JupyterFrontEndContextMenu","JupyterFrontEnd","Application","options","super","this","_formatChanged","Signal","contextMenu","ContextMenuSvg","commands","renderer","contextMenuRenderer","restored","Promise","resolve","requestAnimationFrame","commandLinker","CommandLinker","docRegistry","DocumentRegistry","started","then","catch","serviceManager","ServiceManager","_format","format","document","body","dataset","emit","fn","_contextMenuEvent","target","Node","node","HTMLElement","parentNode","event","shiftKey","suppressContextMenu","open","items","menu","length","command","close","preventDefault","stopPropagation","inDocMode","path","paths","docPattern","RegExp","urls","doc","match","IPaths","Token","ITreeResolver","element","closest","SIDEBAR_CLASS","DEFAULT_RANK","ACTIVITY_CLASS","ILabShell","LabShell","Widget","_dockChildHook","handler","msg","type","child","addClass","_tracker","add","removeClass","remove","_activeChanged","_cachedLayout","_currentChanged","_currentPath","_currentPathChanged","_modeChanged","_isRestored","_layoutModified","_layoutDebouncer","Debouncer","undefined","_restored","PromiseDelegate","FocusTracker","_mainOptionsCache","Map","_sideOptionsCache","id","headerPanel","_headerPanel","BoxPanel","menuHandler","_menuHandler","PanelHandler","topHandler","_topHandler","bottomPanel","_bottomPanel","hboxPanel","dockPanel","_dockPanel","DockPanelSvg","MessageLoop","hsplitPanel","SplitPanel","leftHandler","_leftHandler","SideBarHandler","rightHandler","_rightHandler","rootLayout","BoxLayout","panel","sideBar","stackedPanel","spacing","direction","orientation","addWidget","setRelativeSizes","hide","layout","currentChanged","connect","_onCurrentChanged","activeChanged","_onActiveChanged","layoutModified","_onLayoutModified","titleWidget","_titleWidget","appendChild","createElement","rank","mode","insertWidget","sender","args","newValue","oldValue","changed","disconnect","_updateTitlePanelTitle","DocumentWidget","context","pathChanged","_updateCurrentPath","activeWidget","currentWidget","currentTitle","hasClass","value","toggleClass","dock","applicationCurrentWidget","saveLayout","activateWidget","shellMode","show","widgets","toArray","normalizeAreaConfig","main","restoreLayout","forEach","widget","parent","_addToMainArea","Object","assign","get","activate","clear","promise","has","find","current","_currentTabBar","ci","currentIndex","titles","owner","nextBar","_adjacentBar","prevBar","len","area","_addToLeftArea","_addToRightArea","_addToHeaderArea","_addToTopArea","_addToMenuArea","_addToBottomArea","Error","collapse","isDisposed","dispose","expand","isEmpty","mainArea","leftArea","rightArea","activateById","rehydrate","collapseLeft","collapseRight","dehydrate","iter","map","t","children","h1","textContent","label","caption","console","error","set","ref","icon","LabIcon","bindprops","stylesheet","iconClass","classes","_a","isHidden","bars","tabBars","index","indexOf","bar","className","replace","invoke","itemCmp","first","second","filter","_panelChildHook","_items","v","push","ArrayExt","Array","_panel","Panel","item","_sideBar","TabBar","insertBehavior","removeBehavior","allowDeselect","_stackedPanel","StackedPanel","_lastCurrent","tabActivateRequested","_onTabActivateRequested","widgetRemoved","_onWidgetRemoved","previous","_findWidgetByID","_findInsertIndex","insertTab","_refreshVisibility","collapsed","data","i","setHidden","oldWidget","previousTitle","_findWidgetByTitle","newWidget","_findWidgetIndex","removeTab","ILabStatus","LabStatus","app","_busyCount","_dirtyCount","_busySignal","_dirtySignal","oldDirty","isDirty","DisposableDelegate","Math","max","oldBusy","isBusy","JupyterLab","shell","name","PageConfig","namespace","registerPluginErrors","status","version","info","keys","defaultInfo","reduce","acc","val","JSON","parse","stringify","_info","defaultURLs","defaultPaths","defaultDirs","directories","optionURLs","optionDirs","_paths","key","devMode","addModelFactory","Base64ModelFactory","mimeExtensions","plugin","registerPlugin","mod","default","hasOwnProperty","isArray","mods","registerPluginModule","IInfo","toLowerCase","deferred","patterns","matches","disabled","filesCached","base","notFound","static","settings","themes","translations","hubHost","hubPrefix","hubUser","hubServerName","appSettings","schemas","templates","userSettings","serverRoot","workspaces","Router","stop","_routed","_rules","_b","parsed","URLExt","window","location","href","search","hash","pathname","request","history","hard","old","url","reload","pushState","skipRouting","route","pattern","rules","delete","routed","rule","queue","sort","a","b","done","next","pop","execute","debug","reason","warn","ITreePathUpdater","IConnectionLost","IRouter"],"mappings":"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","file":"7045.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { showErrorMessage } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * A default connection lost handler, which brings up an error dialog.\n */\nexport const ConnectionLost = async function (manager, err, translator) {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab');\n    const title = trans.__('Server Connection Error');\n    const networkMsg = trans.__('A connection to the Jupyter server could not be established.\\n' +\n        'JupyterLab will continue trying to reconnect.\\n' +\n        'Check your network connection or Jupyter server configuration.\\n');\n    return showErrorMessage(title, { message: networkMsg });\n};\n//# sourceMappingURL=connectionlost.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { CommandLinker } from '@jupyterlab/apputils';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ServiceManager } from '@jupyterlab/services';\nimport { ContextMenuSvg } from '@jupyterlab/ui-components';\nimport { Application } from '@lumino/application';\nimport { Token } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The base Jupyter front-end application class.\n *\n * @typeparam `T` - The `shell` type. Defaults to `JupyterFrontEnd.IShell`.\n *\n * @typeparam `U` - The type for supported format names. Defaults to `string`.\n *\n * #### Notes\n * This type is useful as a generic application against which front-end plugins\n * can be authored. It inherits from the Lumino `Application`.\n */\nexport class JupyterFrontEnd extends Application {\n    /**\n     * Construct a new JupyterFrontEnd object.\n     */\n    constructor(options) {\n        super(options);\n        this._formatChanged = new Signal(this);\n        // render context menu/submenus with inline svg icon tweaks\n        this.contextMenu = new ContextMenuSvg({\n            commands: this.commands,\n            renderer: options.contextMenuRenderer\n        });\n        // The default restored promise if one does not exist in the options.\n        const restored = new Promise(resolve => {\n            requestAnimationFrame(() => {\n                resolve();\n            });\n        });\n        this.commandLinker =\n            options.commandLinker || new CommandLinker({ commands: this.commands });\n        this.docRegistry = options.docRegistry || new DocumentRegistry();\n        this.restored =\n            options.restored ||\n                this.started.then(() => restored).catch(() => restored);\n        this.serviceManager = options.serviceManager || new ServiceManager();\n    }\n    /**\n     * The application form factor, e.g., `desktop` or `mobile`.\n     */\n    get format() {\n        return this._format;\n    }\n    set format(format) {\n        if (this._format !== format) {\n            this._format = format;\n            document.body.dataset['format'] = format;\n            this._formatChanged.emit(format);\n        }\n    }\n    /**\n     * A signal that emits when the application form factor changes.\n     */\n    get formatChanged() {\n        return this._formatChanged;\n    }\n    /**\n     * Walks up the DOM hierarchy of the target of the active `contextmenu`\n     * event, testing each HTMLElement ancestor for a user-supplied funcion. This can\n     * be used to find an HTMLElement on which to operate, given a context menu click.\n     *\n     * @param fn - a function that takes an `HTMLElement` and returns a\n     *   boolean for whether it is the element the requester is seeking.\n     *\n     * @returns an HTMLElement or undefined, if none is found.\n     */\n    contextMenuHitTest(fn) {\n        if (!this._contextMenuEvent ||\n            !(this._contextMenuEvent.target instanceof Node)) {\n            return undefined;\n        }\n        let node = this._contextMenuEvent.target;\n        do {\n            if (node instanceof HTMLElement && fn(node)) {\n                return node;\n            }\n            node = node.parentNode;\n        } while (node && node.parentNode && node !== node.parentNode);\n        return undefined;\n        // TODO: we should be able to use .composedPath() to simplify this function\n        // down to something like the below, but it seems like composedPath is\n        // sometimes returning an empty list.\n        /*\n        if (this._contextMenuEvent) {\n          this._contextMenuEvent\n            .composedPath()\n            .filter(x => x instanceof HTMLElement)\n            .find(test);\n        }\n        return undefined;\n        */\n    }\n    /**\n     * A method invoked on a document `'contextmenu'` event.\n     */\n    evtContextMenu(event) {\n        this._contextMenuEvent = event;\n        if (event.shiftKey ||\n            Private.suppressContextMenu(event.target)) {\n            return;\n        }\n        const opened = this.contextMenu.open(event);\n        if (opened) {\n            const items = this.contextMenu.menu.items;\n            // If only the context menu information will be shown,\n            // with no real commands, close the context menu and\n            // allow the native one to open.\n            if (items.length === 1 &&\n                items[0].command === JupyterFrontEndContextMenu.contextMenu) {\n                this.contextMenu.menu.close();\n                return;\n            }\n            // Stop propagation and allow the application context menu to show.\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n}\n/**\n * The namespace for `JupyterFrontEnd` class statics.\n */\n(function (JupyterFrontEnd) {\n    /**\n     * Is JupyterLab in document mode?\n     *\n     * @param path - Full URL of JupyterLab\n     * @param paths - The current IPaths object hydrated from PageConfig.\n     */\n    function inDocMode(path, paths) {\n        const docPattern = new RegExp(`^${paths.urls.doc}`);\n        const match = path.match(docPattern);\n        if (match) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    JupyterFrontEnd.inDocMode = inDocMode;\n    /**\n     * The application paths dictionary token.\n     */\n    JupyterFrontEnd.IPaths = new Token('@jupyterlab/application:IPaths');\n    /**\n     * The application tree resolver token.\n     *\n     * #### Notes\n     * Not all Jupyter front-end applications will have a tree resolver\n     * implemented on the client-side. This token should not be required as a\n     * dependency if it is possible to make it an optional dependency.\n     */\n    JupyterFrontEnd.ITreeResolver = new Token('@jupyterlab/application:ITreeResolver');\n})(JupyterFrontEnd || (JupyterFrontEnd = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Returns whether the element is itself, or a child of, an element with the `jp-suppress-context-menu` data attribute.\n     */\n    function suppressContextMenu(element) {\n        return element.closest('[data-jp-suppress-context-menu]') !== null;\n    }\n    Private.suppressContextMenu = suppressContextMenu;\n})(Private || (Private = {}));\n/**\n * A namespace for the context menu override.\n */\nexport var JupyterFrontEndContextMenu;\n(function (JupyterFrontEndContextMenu) {\n    /**\n     * An id for a private context-menu-info ersatz command.\n     */\n    JupyterFrontEndContextMenu.contextMenu = '__internal:context-menu-info';\n})(JupyterFrontEndContextMenu || (JupyterFrontEndContextMenu = {}));\n//# sourceMappingURL=frontend.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { classes, DockPanelSvg, LabIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt, find, iter, toArray } from '@lumino/algorithm';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Debouncer } from '@lumino/polling';\nimport { Signal } from '@lumino/signaling';\nimport { BoxLayout, BoxPanel, FocusTracker, Panel, SplitPanel, StackedPanel, TabBar, Widget } from '@lumino/widgets';\n/**\n * The class name added to AppShell instances.\n */\nconst APPLICATION_SHELL_CLASS = 'jp-LabShell';\n/**\n * The class name added to side bar instances.\n */\nconst SIDEBAR_CLASS = 'jp-SideBar';\n/**\n * The class name added to the current widget's title.\n */\nconst CURRENT_CLASS = 'jp-mod-current';\n/**\n * The class name added to the active widget's title.\n */\nconst ACTIVE_CLASS = 'jp-mod-active';\n/**\n * The default rank of items added to a sidebar.\n */\nconst DEFAULT_RANK = 900;\nconst ACTIVITY_CLASS = 'jp-Activity';\n/**\n * The JupyterLab application shell token.\n */\nexport const ILabShell = new Token('@jupyterlab/application:ILabShell');\n/**\n * The application shell for JupyterLab.\n */\nexport class LabShell extends Widget {\n    /**\n     * Construct a new application shell.\n     */\n    constructor() {\n        super();\n        /**\n         * A message hook for child add/remove messages on the main area dock panel.\n         */\n        this._dockChildHook = (handler, msg) => {\n            switch (msg.type) {\n                case 'child-added':\n                    msg.child.addClass(ACTIVITY_CLASS);\n                    this._tracker.add(msg.child);\n                    break;\n                case 'child-removed':\n                    msg.child.removeClass(ACTIVITY_CLASS);\n                    this._tracker.remove(msg.child);\n                    break;\n                default:\n                    break;\n            }\n            return true;\n        };\n        this._activeChanged = new Signal(this);\n        this._cachedLayout = null;\n        this._currentChanged = new Signal(this);\n        this._currentPath = '';\n        this._currentPathChanged = new Signal(this);\n        this._modeChanged = new Signal(this);\n        this._isRestored = false;\n        this._layoutModified = new Signal(this);\n        this._layoutDebouncer = new Debouncer(() => {\n            this._layoutModified.emit(undefined);\n        }, 0);\n        this._restored = new PromiseDelegate();\n        this._tracker = new FocusTracker();\n        this._mainOptionsCache = new Map();\n        this._sideOptionsCache = new Map();\n        this.addClass(APPLICATION_SHELL_CLASS);\n        this.id = 'main';\n        const headerPanel = (this._headerPanel = new BoxPanel());\n        const menuHandler = (this._menuHandler = new Private.PanelHandler());\n        const topHandler = (this._topHandler = new Private.PanelHandler());\n        const bottomPanel = (this._bottomPanel = new BoxPanel());\n        const hboxPanel = new BoxPanel();\n        const dockPanel = (this._dockPanel = new DockPanelSvg());\n        MessageLoop.installMessageHook(dockPanel, this._dockChildHook);\n        const hsplitPanel = new SplitPanel();\n        const leftHandler = (this._leftHandler = new Private.SideBarHandler());\n        const rightHandler = (this._rightHandler = new Private.SideBarHandler());\n        const rootLayout = new BoxLayout();\n        headerPanel.id = 'jp-header-panel';\n        menuHandler.panel.id = 'jp-menu-panel';\n        topHandler.panel.id = 'jp-top-panel';\n        bottomPanel.id = 'jp-bottom-panel';\n        hboxPanel.id = 'jp-main-content-panel';\n        dockPanel.id = 'jp-main-dock-panel';\n        hsplitPanel.id = 'jp-main-split-panel';\n        leftHandler.sideBar.addClass(SIDEBAR_CLASS);\n        leftHandler.sideBar.addClass('jp-mod-left');\n        leftHandler.stackedPanel.id = 'jp-left-stack';\n        rightHandler.sideBar.addClass(SIDEBAR_CLASS);\n        rightHandler.sideBar.addClass('jp-mod-right');\n        rightHandler.stackedPanel.id = 'jp-right-stack';\n        hboxPanel.spacing = 0;\n        dockPanel.spacing = 5;\n        hsplitPanel.spacing = 1;\n        headerPanel.direction = 'top-to-bottom';\n        hboxPanel.direction = 'left-to-right';\n        hsplitPanel.orientation = 'horizontal';\n        bottomPanel.direction = 'bottom-to-top';\n        SplitPanel.setStretch(leftHandler.stackedPanel, 0);\n        SplitPanel.setStretch(dockPanel, 1);\n        SplitPanel.setStretch(rightHandler.stackedPanel, 0);\n        BoxPanel.setStretch(leftHandler.sideBar, 0);\n        BoxPanel.setStretch(hsplitPanel, 1);\n        BoxPanel.setStretch(rightHandler.sideBar, 0);\n        hsplitPanel.addWidget(leftHandler.stackedPanel);\n        hsplitPanel.addWidget(dockPanel);\n        hsplitPanel.addWidget(rightHandler.stackedPanel);\n        hboxPanel.addWidget(leftHandler.sideBar);\n        hboxPanel.addWidget(hsplitPanel);\n        hboxPanel.addWidget(rightHandler.sideBar);\n        rootLayout.direction = 'top-to-bottom';\n        rootLayout.spacing = 0; // TODO make this configurable?\n        // Use relative sizing to set the width of the side panels.\n        // This will still respect the min-size of children widget in the stacked\n        // panel.\n        hsplitPanel.setRelativeSizes([1, 2.5, 1]);\n        BoxLayout.setStretch(headerPanel, 0);\n        BoxLayout.setStretch(menuHandler.panel, 0);\n        BoxLayout.setStretch(topHandler.panel, 0);\n        BoxLayout.setStretch(hboxPanel, 1);\n        BoxLayout.setStretch(bottomPanel, 0);\n        rootLayout.addWidget(headerPanel);\n        rootLayout.addWidget(topHandler.panel);\n        rootLayout.addWidget(hboxPanel);\n        rootLayout.addWidget(bottomPanel);\n        // initially hiding header and bottom panel when no elements inside,\n        this._headerPanel.hide();\n        this._bottomPanel.hide();\n        this.layout = rootLayout;\n        // Connect change listeners.\n        this._tracker.currentChanged.connect(this._onCurrentChanged, this);\n        this._tracker.activeChanged.connect(this._onActiveChanged, this);\n        // Connect main layout change listener.\n        this._dockPanel.layoutModified.connect(this._onLayoutModified, this);\n        // Catch current changed events on the side handlers.\n        this._leftHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        this._rightHandler.sideBar.currentChanged.connect(this._onLayoutModified, this);\n        // Setup single-document-mode title bar\n        const titleWidget = (this._titleWidget = new Widget());\n        titleWidget.id = 'jp-title-panel-title';\n        titleWidget.node.appendChild(document.createElement('h1'));\n        this.add(titleWidget, 'top', { rank: 100 });\n        if (this._dockPanel.mode === 'multiple-document') {\n            this._topHandler.addWidget(this._menuHandler.panel, 100);\n            titleWidget.hide();\n        }\n        else {\n            rootLayout.insertWidget(2, this._menuHandler.panel);\n        }\n        // Wire up signals to update the title panel of the simple interface mode to\n        // follow the title of this.currentWidget\n        this.currentChanged.connect((sender, args) => {\n            let newValue = args.newValue;\n            let oldValue = args.oldValue;\n            // Stop watching the title of the previously current widget\n            if (oldValue) {\n                oldValue.title.changed.disconnect(this._updateTitlePanelTitle, this);\n            }\n            // Start watching the title of the new current widget\n            if (newValue) {\n                newValue.title.changed.connect(this._updateTitlePanelTitle, this);\n                this._updateTitlePanelTitle();\n            }\n            if (newValue && newValue instanceof DocumentWidget) {\n                newValue.context.pathChanged.connect(this._updateCurrentPath, this);\n            }\n            this._updateCurrentPath();\n        });\n    }\n    /**\n     * A signal emitted when main area's active focus changes.\n     */\n    get activeChanged() {\n        return this._activeChanged;\n    }\n    /**\n     * The active widget in the shell's main area.\n     */\n    get activeWidget() {\n        return this._tracker.activeWidget;\n    }\n    /**\n     * A signal emitted when main area's current focus changes.\n     */\n    get currentChanged() {\n        return this._currentChanged;\n    }\n    /**\n     * A signal emitted when the shell/dock panel change modes (single/mutiple document).\n     */\n    get modeChanged() {\n        return this._modeChanged;\n    }\n    /**\n     * A signal emitted when the path of the current document changes.\n     *\n     * This also fires when the current document itself changes.\n     */\n    get currentPathChanged() {\n        return this._currentPathChanged;\n    }\n    /**\n     * The current widget in the shell's main area.\n     */\n    get currentWidget() {\n        return this._tracker.currentWidget;\n    }\n    /**\n     * A signal emitted when the main area's layout is modified.\n     */\n    get layoutModified() {\n        return this._layoutModified;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get leftCollapsed() {\n        return !this._leftHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether the left area is collapsed.\n     */\n    get rightCollapsed() {\n        return !this._rightHandler.sideBar.currentTitle;\n    }\n    /**\n     * Whether JupyterLab is in presentation mode with the\n     * `jp-mod-presentationMode` CSS class.\n     */\n    get presentationMode() {\n        return this.hasClass('jp-mod-presentationMode');\n    }\n    /**\n     * Enable/disable presentation mode (`jp-mod-presentationMode` CSS class) with\n     * a boolean.\n     */\n    set presentationMode(value) {\n        this.toggleClass('jp-mod-presentationMode', value);\n    }\n    /**\n     * The main dock area's user interface mode.\n     */\n    get mode() {\n        return this._dockPanel.mode;\n    }\n    set mode(mode) {\n        const dock = this._dockPanel;\n        if (mode === dock.mode) {\n            return;\n        }\n        const applicationCurrentWidget = this.currentWidget;\n        if (mode === 'single-document') {\n            this._cachedLayout = dock.saveLayout();\n            dock.mode = mode;\n            // In case the active widget in the dock panel is *not* the active widget\n            // of the application, defer to the application.\n            if (this.currentWidget) {\n                dock.activateWidget(this.currentWidget);\n            }\n            // Set the mode data attribute on the application shell node.\n            this.node.dataset.shellMode = mode;\n            // Adjust menu and title\n            // this.add(this._menuHandler.panel, 'top', {rank: 100});\n            this.layout.insertWidget(2, this._menuHandler.panel);\n            this._titleWidget.show();\n            this._updateTitlePanelTitle();\n            this._modeChanged.emit(mode);\n            return;\n        }\n        // Cache a reference to every widget currently in the dock panel.\n        const widgets = toArray(dock.widgets());\n        // Toggle back to multiple document mode.\n        dock.mode = mode;\n        // Restore the original layout.\n        if (this._cachedLayout) {\n            // Remove any disposed widgets in the cached layout and restore.\n            Private.normalizeAreaConfig(dock, this._cachedLayout.main);\n            dock.restoreLayout(this._cachedLayout);\n            this._cachedLayout = null;\n        }\n        // Add any widgets created during single document mode, which have\n        // subsequently been removed from the dock panel after the multiple document\n        // layout has been restored. If the widget has add options cached for\n        // the widget (i.e., if it has been placed with respect to another widget),\n        // then take that into account.\n        widgets.forEach(widget => {\n            if (!widget.parent) {\n                this._addToMainArea(widget, Object.assign(Object.assign({}, this._mainOptionsCache.get(widget)), { activate: false }));\n            }\n        });\n        this._mainOptionsCache.clear();\n        // In case the active widget in the dock panel is *not* the active widget\n        // of the application, defer to the application.\n        if (applicationCurrentWidget) {\n            dock.activateWidget(applicationCurrentWidget);\n        }\n        // Set the mode data attribute on the applications shell node.\n        this.node.dataset.shellMode = mode;\n        // Adjust menu and title\n        this.add(this._menuHandler.panel, 'top', { rank: 100 });\n        // this._topHandler.addWidget(this._menuHandler.panel, 100)\n        this._titleWidget.hide();\n        // Emit the mode changed signal\n        this._modeChanged.emit(mode);\n    }\n    /**\n     * Promise that resolves when state is first restored, returning layout\n     * description.\n     */\n    get restored() {\n        return this._restored.promise;\n    }\n    /**\n     * Activate a widget in its area.\n     */\n    activateById(id) {\n        if (this._leftHandler.has(id)) {\n            this._leftHandler.activate(id);\n            return;\n        }\n        if (this._rightHandler.has(id)) {\n            this._rightHandler.activate(id);\n            return;\n        }\n        const dock = this._dockPanel;\n        const widget = find(dock.widgets(), value => value.id === id);\n        if (widget) {\n            dock.activateWidget(widget);\n        }\n    }\n    /*\n     * Activate the next Tab in the active TabBar.\n     */\n    activateNextTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci < current.titles.length - 1) {\n            current.currentIndex += 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === current.titles.length - 1) {\n            const nextBar = this._adjacentBar('next');\n            if (nextBar) {\n                nextBar.currentIndex = 0;\n                if (nextBar.currentTitle) {\n                    nextBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the previous Tab in the active TabBar.\n     */\n    activatePreviousTab() {\n        const current = this._currentTabBar();\n        if (!current) {\n            return;\n        }\n        const ci = current.currentIndex;\n        if (ci === -1) {\n            return;\n        }\n        if (ci > 0) {\n            current.currentIndex -= 1;\n            if (current.currentTitle) {\n                current.currentTitle.owner.activate();\n            }\n            return;\n        }\n        if (ci === 0) {\n            const prevBar = this._adjacentBar('previous');\n            if (prevBar) {\n                const len = prevBar.titles.length;\n                prevBar.currentIndex = len - 1;\n                if (prevBar.currentTitle) {\n                    prevBar.currentTitle.owner.activate();\n                }\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activateNextTabBar() {\n        const nextBar = this._adjacentBar('next');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    /*\n     * Activate the next TabBar.\n     */\n    activatePreviousTabBar() {\n        const nextBar = this._adjacentBar('previous');\n        if (nextBar) {\n            if (nextBar.currentTitle) {\n                nextBar.currentTitle.owner.activate();\n            }\n        }\n    }\n    add(widget, area = 'main', options) {\n        switch (area || 'main') {\n            case 'main':\n                return this._addToMainArea(widget, options);\n            case 'left':\n                return this._addToLeftArea(widget, options);\n            case 'right':\n                return this._addToRightArea(widget, options);\n            case 'header':\n                return this._addToHeaderArea(widget, options);\n            case 'top':\n                return this._addToTopArea(widget, options);\n            case 'menu':\n                return this._addToMenuArea(widget, options);\n            case 'bottom':\n                return this._addToBottomArea(widget, options);\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Collapse the left area.\n     */\n    collapseLeft() {\n        this._leftHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Collapse the right area.\n     */\n    collapseRight() {\n        this._rightHandler.collapse();\n        this._onLayoutModified();\n    }\n    /**\n     * Dispose the shell.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._layoutDebouncer.dispose();\n        this._titleWidget.dispose();\n        super.dispose();\n    }\n    /**\n     * Expand the left area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandLeft() {\n        this._leftHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Expand the right area.\n     *\n     * #### Notes\n     * This will open the most recently used tab,\n     * or the first tab if there is no most recently used.\n     */\n    expandRight() {\n        this._rightHandler.expand();\n        this._onLayoutModified();\n    }\n    /**\n     * Close all widgets in the main area.\n     */\n    closeAll() {\n        // Make a copy of all the widget in the dock panel (using `toArray()`)\n        // before removing them because removing them while iterating through them\n        // modifies the underlying data of the iterator.\n        toArray(this._dockPanel.widgets()).forEach(widget => widget.close());\n    }\n    /**\n     * True if the given area is empty.\n     */\n    isEmpty(area) {\n        switch (area) {\n            case 'left':\n                return this._leftHandler.stackedPanel.widgets.length === 0;\n            case 'main':\n                return this._dockPanel.isEmpty;\n            case 'header':\n                return this._headerPanel.widgets.length === 0;\n            case 'top':\n                return this._topHandler.panel.widgets.length === 0;\n            case 'menu':\n                return this._menuHandler.panel.widgets.length === 0;\n            case 'bottom':\n                return this._bottomPanel.widgets.length === 0;\n            case 'right':\n                return this._rightHandler.stackedPanel.widgets.length === 0;\n            default:\n                return true;\n        }\n    }\n    /**\n     * Restore the layout state for the application shell.\n     */\n    restoreLayout(mode, layout) {\n        const { mainArea, leftArea, rightArea } = layout;\n        // Rehydrate the main area.\n        if (mainArea) {\n            const { currentWidget, dock } = mainArea;\n            if (dock) {\n                this._dockPanel.restoreLayout(dock);\n            }\n            if (mode) {\n                this.mode = mode;\n            }\n            if (currentWidget) {\n                this.activateById(currentWidget.id);\n            }\n        }\n        else {\n            // This is needed when loading in an empty workspace in single doc mode\n            if (mode) {\n                this.mode = mode;\n            }\n        }\n        // Rehydrate the left area.\n        if (leftArea) {\n            this._leftHandler.rehydrate(leftArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseLeft();\n            }\n        }\n        // Rehydrate the right area.\n        if (rightArea) {\n            this._rightHandler.rehydrate(rightArea);\n        }\n        else {\n            if (mode === 'single-document') {\n                this.collapseRight();\n            }\n        }\n        if (!this._isRestored) {\n            // Make sure all messages in the queue are finished before notifying\n            // any extensions that are waiting for the promise that guarantees the\n            // application state has been restored.\n            MessageLoop.flush();\n            this._restored.resolve(layout);\n        }\n    }\n    /**\n     * Save the dehydrated state of the application shell.\n     */\n    saveLayout() {\n        // If the application is in single document mode, use the cached layout if\n        // available. Otherwise, default to querying the dock panel for layout.\n        const layout = {\n            mainArea: {\n                currentWidget: this._tracker.currentWidget,\n                dock: this.mode === 'single-document'\n                    ? this._cachedLayout || this._dockPanel.saveLayout()\n                    : this._dockPanel.saveLayout()\n            },\n            leftArea: this._leftHandler.dehydrate(),\n            rightArea: this._rightHandler.dehydrate()\n        };\n        return layout;\n    }\n    /**\n     * Returns the widgets for an application area.\n     */\n    widgets(area) {\n        switch (area !== null && area !== void 0 ? area : 'main') {\n            case 'main':\n                return this._dockPanel.widgets();\n            case 'left':\n                return iter(this._leftHandler.sideBar.titles.map(t => t.owner));\n            case 'right':\n                return iter(this._rightHandler.sideBar.titles.map(t => t.owner));\n            case 'header':\n                return this._headerPanel.children();\n            case 'top':\n                return this._topHandler.panel.children();\n            case 'menu':\n                return this._menuHandler.panel.children();\n            case 'bottom':\n                return this._bottomPanel.children();\n            default:\n                throw new Error(`Invalid area: ${area}`);\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the application shell.\n     */\n    onAfterAttach(msg) {\n        this.node.dataset.shellMode = this.mode;\n    }\n    /**\n     * Update the title panel title based on the title of the current widget.\n     */\n    _updateTitlePanelTitle() {\n        let current = this.currentWidget;\n        const h1 = this._titleWidget.node.children[0];\n        h1.textContent = current ? current.title.label : '';\n        h1.title = current ? current.title.caption : '';\n    }\n    /**\n     * The path of the current widget changed, fire the _currentPathChanged signal.\n     */\n    _updateCurrentPath() {\n        let current = this.currentWidget;\n        let newValue = '';\n        if (current && current instanceof DocumentWidget) {\n            newValue = current.context.path;\n        }\n        this._currentPathChanged.emit({\n            newValue: newValue,\n            oldValue: this._currentPath\n        });\n        this._currentPath = newValue;\n    }\n    /**\n     * Add a widget to the left content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToLeftArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        this._sideOptionsCache.set(widget, options);\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._leftHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the main content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     * All widgets added to the main area should be disposed after removal\n     * (disposal before removal will remove the widget automatically).\n     *\n     * In the options, `ref` defaults to `null`, `mode` defaults to `'tab-after'`,\n     * and `activate` defaults to `true`.\n     */\n    _addToMainArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const dock = this._dockPanel;\n        const mode = options.mode || 'tab-after';\n        let ref = this.currentWidget;\n        if (options.ref) {\n            ref = find(dock.widgets(), value => value.id === options.ref) || null;\n        }\n        const { title } = widget;\n        // Add widget ID to tab so that we can get a handle on the tab's widget\n        // (for context menu support)\n        title.dataset = Object.assign(Object.assign({}, title.dataset), { id: widget.id });\n        if (title.icon instanceof LabIcon) {\n            // bind an appropriate style to the icon\n            title.icon = title.icon.bindprops({\n                stylesheet: 'mainAreaTab'\n            });\n        }\n        else if (typeof title.icon === 'string' || !title.icon) {\n            // add some classes to help with displaying css background imgs\n            title.iconClass = classes(title.iconClass, 'jp-Icon');\n        }\n        dock.addWidget(widget, { mode, ref });\n        // The dock panel doesn't account for placement information while\n        // in single document mode, so upon rehydrating any widgets that were\n        // added will not be in the correct place. Cache the placement information\n        // here so that we can later rehydrate correctly.\n        if (dock.mode === 'single-document') {\n            this._mainOptionsCache.set(widget, options);\n        }\n        if (options.activate !== false) {\n            dock.activateWidget(widget);\n        }\n    }\n    /**\n     * Add a widget to the right content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToRightArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || this._sideOptionsCache.get(widget) || {};\n        const rank = 'rank' in options ? options.rank : DEFAULT_RANK;\n        this._sideOptionsCache.set(widget, options);\n        this._rightHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n    }\n    /**\n     * Add a widget to the top content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToTopArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._topHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._topHandler.panel.isHidden) {\n            this._topHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the title content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToMenuArea(widget, options) {\n        var _a;\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        options = options || {};\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : DEFAULT_RANK;\n        this._menuHandler.addWidget(widget, rank);\n        this._onLayoutModified();\n        if (this._menuHandler.panel.isHidden) {\n            this._menuHandler.panel.show();\n        }\n    }\n    /**\n     * Add a widget to the header content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToHeaderArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._headerPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._headerPanel.isHidden) {\n            this._headerPanel.show();\n        }\n    }\n    /**\n     * Add a widget to the bottom content area.\n     *\n     * #### Notes\n     * Widgets must have a unique `id` property, which will be used as the DOM id.\n     */\n    _addToBottomArea(widget, options) {\n        if (!widget.id) {\n            console.error('Widgets added to app shell must have unique id property.');\n            return;\n        }\n        // Temporary: widgets are added to the panel in order of insertion.\n        this._bottomPanel.addWidget(widget);\n        this._onLayoutModified();\n        if (this._bottomPanel.isHidden) {\n            this._bottomPanel.show();\n        }\n    }\n    /*\n     * Return the tab bar adjacent to the current TabBar or `null`.\n     */\n    _adjacentBar(direction) {\n        const current = this._currentTabBar();\n        if (!current) {\n            return null;\n        }\n        const bars = toArray(this._dockPanel.tabBars());\n        const len = bars.length;\n        const index = bars.indexOf(current);\n        if (direction === 'previous') {\n            return index > 0 ? bars[index - 1] : index === 0 ? bars[len - 1] : null;\n        }\n        // Otherwise, direction is 'next'.\n        return index < len - 1\n            ? bars[index + 1]\n            : index === len - 1\n                ? bars[0]\n                : null;\n    }\n    /*\n     * Return the TabBar that has the currently active Widget or null.\n     */\n    _currentTabBar() {\n        const current = this._tracker.currentWidget;\n        if (!current) {\n            return null;\n        }\n        const title = current.title;\n        const bars = this._dockPanel.tabBars();\n        return find(bars, bar => bar.titles.indexOf(title) > -1) || null;\n    }\n    /**\n     * Handle a change to the dock area active widget.\n     */\n    _onActiveChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${ACTIVE_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(ACTIVE_CLASS, '');\n        }\n        this._activeChanged.emit(args);\n    }\n    /**\n     * Handle a change to the dock area current widget.\n     */\n    _onCurrentChanged(sender, args) {\n        if (args.newValue) {\n            args.newValue.title.className += ` ${CURRENT_CLASS}`;\n        }\n        if (args.oldValue) {\n            args.oldValue.title.className = args.oldValue.title.className.replace(CURRENT_CLASS, '');\n        }\n        this._currentChanged.emit(args);\n        this._onLayoutModified();\n    }\n    /**\n     * Handle a change to the layout.\n     */\n    _onLayoutModified() {\n        void this._layoutDebouncer.invoke();\n    }\n}\nvar Private;\n(function (Private) {\n    /**\n     * A less-than comparison function for side bar rank items.\n     */\n    function itemCmp(first, second) {\n        return first.rank - second.rank;\n    }\n    Private.itemCmp = itemCmp;\n    /**\n     * Removes widgets that have been disposed from an area config, mutates area.\n     */\n    function normalizeAreaConfig(parent, area) {\n        if (!area) {\n            return;\n        }\n        if (area.type === 'tab-area') {\n            area.widgets = area.widgets.filter(widget => !widget.isDisposed && widget.parent === parent);\n            return;\n        }\n        area.children.forEach(child => {\n            normalizeAreaConfig(parent, child);\n        });\n    }\n    Private.normalizeAreaConfig = normalizeAreaConfig;\n    /**\n     * A class which manages a panel and sorts its widgets by rank.\n     */\n    class PanelHandler {\n        constructor() {\n            /**\n             * A message hook for child add/remove messages on the main area dock panel.\n             */\n            this._panelChildHook = (handler, msg) => {\n                switch (msg.type) {\n                    case 'child-added':\n                        {\n                            const widget = msg.child;\n                            // If we already know about this widget, we're done\n                            if (this._items.find(v => v.widget === widget)) {\n                                break;\n                            }\n                            // Otherwise, add to the end by default\n                            const rank = this._items[this._items.length - 1].rank;\n                            this._items.push({ widget, rank });\n                        }\n                        break;\n                    case 'child-removed':\n                        {\n                            const widget = msg.child;\n                            ArrayExt.removeFirstWhere(this._items, v => v.widget === widget);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                return true;\n            };\n            this._items = new Array();\n            this._panel = new Panel();\n            MessageLoop.installMessageHook(this._panel, this._panelChildHook);\n        }\n        /**\n         * Get the panel managed by the handler.\n         */\n        get panel() {\n            return this._panel;\n        }\n        /**\n         * Add a widget to the panel.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            const item = { widget, rank };\n            const index = ArrayExt.upperBound(this._items, item, Private.itemCmp);\n            ArrayExt.insert(this._items, index, item);\n            this._panel.insertWidget(index, widget);\n        }\n    }\n    Private.PanelHandler = PanelHandler;\n    /**\n     * A class which manages a side bar and related stacked panel.\n     */\n    class SideBarHandler {\n        /**\n         * Construct a new side bar handler.\n         */\n        constructor() {\n            this._items = new Array();\n            this._sideBar = new TabBar({\n                insertBehavior: 'none',\n                removeBehavior: 'none',\n                allowDeselect: true\n            });\n            this._stackedPanel = new StackedPanel();\n            this._sideBar.hide();\n            this._stackedPanel.hide();\n            this._lastCurrent = null;\n            this._sideBar.currentChanged.connect(this._onCurrentChanged, this);\n            this._sideBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n            this._stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n        }\n        /**\n         * Get the tab bar managed by the handler.\n         */\n        get sideBar() {\n            return this._sideBar;\n        }\n        /**\n         * Get the stacked panel managed by the handler\n         */\n        get stackedPanel() {\n            return this._stackedPanel;\n        }\n        /**\n         * Expand the sidebar.\n         *\n         * #### Notes\n         * This will open the most recently used tab, or the first tab\n         * if there is no most recently used.\n         */\n        expand() {\n            const previous = this._lastCurrent || (this._items.length > 0 && this._items[0].widget);\n            if (previous) {\n                this.activate(previous.id);\n            }\n        }\n        /**\n         * Activate a widget residing in the side bar by ID.\n         *\n         * @param id - The widget's unique ID.\n         */\n        activate(id) {\n            const widget = this._findWidgetByID(id);\n            if (widget) {\n                this._sideBar.currentTitle = widget.title;\n                widget.activate();\n            }\n        }\n        /**\n         * Test whether the sidebar has the given widget by id.\n         */\n        has(id) {\n            return this._findWidgetByID(id) !== null;\n        }\n        /**\n         * Collapse the sidebar so no items are expanded.\n         */\n        collapse() {\n            this._sideBar.currentTitle = null;\n        }\n        /**\n         * Add a widget and its title to the stacked panel and side bar.\n         *\n         * If the widget is already added, it will be moved.\n         */\n        addWidget(widget, rank) {\n            widget.parent = null;\n            widget.hide();\n            const item = { widget, rank };\n            const index = this._findInsertIndex(item);\n            ArrayExt.insert(this._items, index, item);\n            this._stackedPanel.insertWidget(index, widget);\n            const title = this._sideBar.insertTab(index, widget.title);\n            // Store the parent id in the title dataset\n            // in order to dispatch click events to the right widget.\n            title.dataset = { id: widget.id };\n            if (title.icon instanceof LabIcon) {\n                // bind an appropriate style to the icon\n                title.icon = title.icon.bindprops({\n                    stylesheet: 'sideBar'\n                });\n            }\n            else if (typeof title.icon === 'string' || !title.icon) {\n                // add some classes to help with displaying css background imgs\n                title.iconClass = classes(title.iconClass, 'jp-Icon', 'jp-Icon-20');\n            }\n            this._refreshVisibility();\n        }\n        /**\n         * Dehydrate the side bar data.\n         */\n        dehydrate() {\n            const collapsed = this._sideBar.currentTitle === null;\n            const widgets = toArray(this._stackedPanel.widgets);\n            const currentWidget = widgets[this._sideBar.currentIndex];\n            return { collapsed, currentWidget, widgets };\n        }\n        /**\n         * Rehydrate the side bar.\n         */\n        rehydrate(data) {\n            if (data.currentWidget) {\n                this.activate(data.currentWidget.id);\n            }\n            if (data.collapsed) {\n                this.collapse();\n            }\n        }\n        /**\n         * Find the insertion index for a rank item.\n         */\n        _findInsertIndex(item) {\n            return ArrayExt.upperBound(this._items, item, Private.itemCmp);\n        }\n        /**\n         * Find the index of the item with the given widget, or `-1`.\n         */\n        _findWidgetIndex(widget) {\n            return ArrayExt.findFirstIndex(this._items, i => i.widget === widget);\n        }\n        /**\n         * Find the widget which owns the given title, or `null`.\n         */\n        _findWidgetByTitle(title) {\n            const item = find(this._items, value => value.widget.title === title);\n            return item ? item.widget : null;\n        }\n        /**\n         * Find the widget with the given id, or `null`.\n         */\n        _findWidgetByID(id) {\n            const item = find(this._items, value => value.widget.id === id);\n            return item ? item.widget : null;\n        }\n        /**\n         * Refresh the visibility of the side bar and stacked panel.\n         */\n        _refreshVisibility() {\n            this._sideBar.setHidden(this._sideBar.titles.length === 0);\n            this._stackedPanel.setHidden(this._sideBar.currentTitle === null);\n        }\n        /**\n         * Handle the `currentChanged` signal from the sidebar.\n         */\n        _onCurrentChanged(sender, args) {\n            const oldWidget = args.previousTitle\n                ? this._findWidgetByTitle(args.previousTitle)\n                : null;\n            const newWidget = args.currentTitle\n                ? this._findWidgetByTitle(args.currentTitle)\n                : null;\n            if (oldWidget) {\n                oldWidget.hide();\n            }\n            if (newWidget) {\n                newWidget.show();\n            }\n            this._lastCurrent = newWidget || oldWidget;\n            this._refreshVisibility();\n        }\n        /**\n         * Handle a `tabActivateRequest` signal from the sidebar.\n         */\n        _onTabActivateRequested(sender, args) {\n            args.title.owner.activate();\n        }\n        /*\n         * Handle the `widgetRemoved` signal from the stacked panel.\n         */\n        _onWidgetRemoved(sender, widget) {\n            if (widget === this._lastCurrent) {\n                this._lastCurrent = null;\n            }\n            ArrayExt.removeAt(this._items, this._findWidgetIndex(widget));\n            this._sideBar.removeTab(widget.title);\n            this._refreshVisibility();\n        }\n    }\n    Private.SideBarHandler = SideBarHandler;\n})(Private || (Private = {}));\n//# sourceMappingURL=shell.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/* tslint:disable */\n/**\n * The application status token.\n */\nexport const ILabStatus = new Token('@jupyterlab/application:ILabStatus');\n/**\n * The application status signals and flags class.\n */\nexport class LabStatus {\n    /**\n     * Construct a new  status object.\n     */\n    constructor(app) {\n        this._busyCount = 0;\n        this._dirtyCount = 0;\n        this._busySignal = new Signal(app);\n        this._dirtySignal = new Signal(app);\n    }\n    /**\n     * Returns a signal for when application changes its busy status.\n     */\n    get busySignal() {\n        return this._busySignal;\n    }\n    /**\n     * Returns a signal for when application changes its dirty status.\n     */\n    get dirtySignal() {\n        return this._dirtySignal;\n    }\n    /**\n     * Whether the application is busy.\n     */\n    get isBusy() {\n        return this._busyCount > 0;\n    }\n    /**\n     * Whether the application is dirty.\n     */\n    get isDirty() {\n        return this._dirtyCount > 0;\n    }\n    /**\n     * Set the application state to dirty.\n     *\n     * @returns A disposable used to clear the dirty state for the caller.\n     */\n    setDirty() {\n        const oldDirty = this.isDirty;\n        this._dirtyCount++;\n        if (this.isDirty !== oldDirty) {\n            this._dirtySignal.emit(this.isDirty);\n        }\n        return new DisposableDelegate(() => {\n            const oldDirty = this.isDirty;\n            this._dirtyCount = Math.max(0, this._dirtyCount - 1);\n            if (this.isDirty !== oldDirty) {\n                this._dirtySignal.emit(this.isDirty);\n            }\n        });\n    }\n    /**\n     * Set the application state to busy.\n     *\n     * @returns A disposable used to clear the busy state for the caller.\n     */\n    setBusy() {\n        const oldBusy = this.isBusy;\n        this._busyCount++;\n        if (this.isBusy !== oldBusy) {\n            this._busySignal.emit(this.isBusy);\n        }\n        return new DisposableDelegate(() => {\n            const oldBusy = this.isBusy;\n            this._busyCount--;\n            if (this.isBusy !== oldBusy) {\n                this._busySignal.emit(this.isBusy);\n            }\n        });\n    }\n}\n//# sourceMappingURL=status.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Base64ModelFactory } from '@jupyterlab/docregistry';\nimport { Token } from '@lumino/coreutils';\nimport { JupyterFrontEnd } from './frontend';\nimport { createRendermimePlugins } from './mimerenderers';\nimport { LabShell } from './shell';\nimport { LabStatus } from './status';\n/**\n * JupyterLab is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLab extends JupyterFrontEnd {\n    /**\n     * Construct a new JupyterLab object.\n     */\n    constructor(options = { shell: new LabShell() }) {\n        super(Object.assign(Object.assign({}, options), { shell: options.shell || new LabShell() }));\n        /**\n         * The name of the JupyterLab application.\n         */\n        this.name = PageConfig.getOption('appName') || 'JupyterLab';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = PageConfig.getOption('appNamespace') || this.name;\n        /**\n         * A list of all errors encountered when registering plugins.\n         */\n        this.registerPluginErrors = [];\n        /**\n         * The application busy and dirty status signals and flags.\n         */\n        this.status = new LabStatus(this);\n        /**\n         * The version of the JupyterLab application.\n         */\n        this.version = PageConfig.getOption('appVersion') || 'unknown';\n        this.restored = this.shell.restored\n            .then(() => undefined)\n            .catch(() => undefined);\n        // Create an IInfo dictionary from the options to override the defaults.\n        const info = Object.keys(JupyterLab.defaultInfo).reduce((acc, val) => {\n            if (val in options) {\n                acc[val] = JSON.parse(JSON.stringify(options[val]));\n            }\n            return acc;\n        }, {});\n        // Populate application info.\n        this._info = Object.assign(Object.assign({}, JupyterLab.defaultInfo), info);\n        // Populate application paths override the defaults if necessary.\n        const defaultURLs = JupyterLab.defaultPaths.urls;\n        const defaultDirs = JupyterLab.defaultPaths.directories;\n        const optionURLs = (options.paths && options.paths.urls) || {};\n        const optionDirs = (options.paths && options.paths.directories) || {};\n        this._paths = {\n            urls: Object.keys(defaultURLs).reduce((acc, key) => {\n                if (key in optionURLs) {\n                    const value = optionURLs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultURLs[key];\n                }\n                return acc;\n            }, {}),\n            directories: Object.keys(JupyterLab.defaultPaths.directories).reduce((acc, key) => {\n                if (key in optionDirs) {\n                    const value = optionDirs[key];\n                    acc[key] = value;\n                }\n                else {\n                    acc[key] = defaultDirs[key];\n                }\n                return acc;\n            }, {})\n        };\n        if (this._info.devMode) {\n            this.shell.addClass('jp-mod-devMode');\n        }\n        // Add initial model factory.\n        this.docRegistry.addModelFactory(new Base64ModelFactory());\n        if (options.mimeExtensions) {\n            for (const plugin of createRendermimePlugins(options.mimeExtensions)) {\n                this.registerPlugin(plugin);\n            }\n        }\n    }\n    /**\n     * The JupyterLab application information dictionary.\n     */\n    get info() {\n        return this._info;\n    }\n    /**\n     * The JupyterLab application paths dictionary.\n     */\n    get paths() {\n        return this._paths;\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!mod.hasOwnProperty('__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                this.registerPluginErrors.push(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n}\n/**\n * The namespace for `JupyterLab` class statics.\n */\n(function (JupyterLab) {\n    /**\n     * The layout restorer token.\n     */\n    JupyterLab.IInfo = new Token('@jupyterlab/application:IInfo');\n    /**\n     * The default JupyterLab application info.\n     */\n    JupyterLab.defaultInfo = {\n        devMode: PageConfig.getOption('devMode').toLowerCase() === 'true',\n        deferred: { patterns: [], matches: [] },\n        disabled: { patterns: [], matches: [] },\n        mimeExtensions: [],\n        filesCached: PageConfig.getOption('cacheFiles').toLowerCase() === 'true'\n    };\n    /**\n     * The default JupyterLab application paths.\n     */\n    JupyterLab.defaultPaths = {\n        urls: {\n            base: PageConfig.getOption('baseUrl'),\n            notFound: PageConfig.getOption('notFoundUrl'),\n            app: PageConfig.getOption('appUrl'),\n            doc: PageConfig.getOption('docUrl'),\n            static: PageConfig.getOption('staticUrl'),\n            settings: PageConfig.getOption('settingsUrl'),\n            themes: PageConfig.getOption('themesUrl'),\n            translations: PageConfig.getOption('translationsApiUrl'),\n            hubHost: PageConfig.getOption('hubHost') || undefined,\n            hubPrefix: PageConfig.getOption('hubPrefix') || undefined,\n            hubUser: PageConfig.getOption('hubUser') || undefined,\n            hubServerName: PageConfig.getOption('hubServerName') || undefined\n        },\n        directories: {\n            appSettings: PageConfig.getOption('appSettingsDir'),\n            schemas: PageConfig.getOption('schemasDir'),\n            static: PageConfig.getOption('staticDir'),\n            templates: PageConfig.getOption('templatesDir'),\n            themes: PageConfig.getOption('themesDir'),\n            userSettings: PageConfig.getOption('userSettingsDir'),\n            serverRoot: PageConfig.getOption('serverRoot'),\n            workspaces: PageConfig.getOption('workspacesDir')\n        }\n    };\n})(JupyterLab || (JupyterLab = {}));\n//# sourceMappingURL=lab.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { PromiseDelegate, Token } from '@lumino/coreutils';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\n/**\n * A static class that routes URLs within the application.\n */\nexport class Router {\n    /**\n     * Create a URL router.\n     */\n    constructor(options) {\n        /**\n         * If a matching rule's command resolves with the `stop` token during routing,\n         * no further matches will execute.\n         */\n        this.stop = new Token('@jupyterlab/application:Router#stop');\n        this._routed = new Signal(this);\n        this._rules = new Map();\n        this.base = options.base;\n        this.commands = options.commands;\n    }\n    /**\n     * Returns the parsed current URL of the application.\n     */\n    get current() {\n        var _a, _b;\n        const { base } = this;\n        const parsed = URLExt.parse(window.location.href);\n        const { search, hash } = parsed;\n        const path = (_b = (_a = parsed.pathname) === null || _a === void 0 ? void 0 : _a.replace(base, '/')) !== null && _b !== void 0 ? _b : '';\n        const request = path + search + hash;\n        return { hash, path, request, search };\n    }\n    /**\n     * A signal emitted when the router routes a route.\n     */\n    get routed() {\n        return this._routed;\n    }\n    /**\n     * Navigate to a new path within the application.\n     *\n     * @param path - The new path or empty string if redirecting to root.\n     *\n     * @param options - The navigation options.\n     */\n    navigate(path, options = {}) {\n        const { base } = this;\n        const { history } = window;\n        const { hard } = options;\n        const old = document.location.href;\n        const url = path && path.indexOf(base) === 0 ? path : URLExt.join(base, path);\n        if (url === old) {\n            return hard ? this.reload() : undefined;\n        }\n        history.pushState({}, '', url);\n        if (hard) {\n            return this.reload();\n        }\n        if (!options.skipRouting) {\n            // Because a `route()` call may still be in the stack after having received\n            // a `stop` token, wait for the next stack frame before calling `route()`.\n            requestAnimationFrame(() => {\n                void this.route();\n            });\n        }\n    }\n    /**\n     * Register to route a path pattern to a command.\n     *\n     * @param options - The route registration options.\n     *\n     * @returns A disposable that removes the registered rule from the router.\n     */\n    register(options) {\n        var _a;\n        const { command, pattern } = options;\n        const rank = (_a = options.rank) !== null && _a !== void 0 ? _a : 100;\n        const rules = this._rules;\n        rules.set(pattern, { command, rank });\n        return new DisposableDelegate(() => {\n            rules.delete(pattern);\n        });\n    }\n    /**\n     * Cause a hard reload of the document.\n     */\n    reload() {\n        window.location.reload();\n    }\n    /**\n     * Route a specific path to an action.\n     *\n     * #### Notes\n     * If a pattern is matched, its command will be invoked with arguments that\n     * match the `IRouter.ILocation` interface.\n     */\n    route() {\n        const { commands, current, stop } = this;\n        const { request } = current;\n        const routed = this._routed;\n        const rules = this._rules;\n        const matches = [];\n        // Collect all rules that match the URL.\n        rules.forEach((rule, pattern) => {\n            if (request === null || request === void 0 ? void 0 : request.match(pattern)) {\n                matches.push(rule);\n            }\n        });\n        // Order the matching rules by rank and enqueue them.\n        const queue = matches.sort((a, b) => b.rank - a.rank);\n        const done = new PromiseDelegate();\n        // Process each enqueued command sequentially and short-circuit if a promise\n        // resolves with the `stop` token.\n        const next = async () => {\n            if (!queue.length) {\n                routed.emit(current);\n                done.resolve(undefined);\n                return;\n            }\n            const { command } = queue.pop();\n            try {\n                const request = this.current.request;\n                const result = await commands.execute(command, current);\n                if (result === stop) {\n                    queue.length = 0;\n                    console.debug(`Routing ${request} was short-circuited by ${command}`);\n                }\n            }\n            catch (reason) {\n                console.warn(`Routing ${request} to ${command} failed`, reason);\n            }\n            void next();\n        };\n        void next();\n        return done.promise;\n    }\n}\n//# sourceMappingURL=router.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/**\n * The tree path updater token.\n */\nexport const ITreePathUpdater = new Token('@jupyterlab/application:ITreePathUpdater');\n//# sourceMappingURL=treepathupdater.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/**\n * A token for which a plugin can provide to respond to connection failures\n * to the application server.\n */\nexport const IConnectionLost = new Token('@jupyterlab/apputils:IConnectionLost');\n/**\n * The URL Router token.\n */\nexport const IRouter = new Token('@jupyterlab/application:IRouter');\n//# sourceMappingURL=tokens.js.map"],"sourceRoot":""}