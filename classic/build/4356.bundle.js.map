{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/widget.js"],"names":["DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","each","cell","index","detectTargetArea","target","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","value","text","split","slice","VirtualDOM","h","className","Collapser","ReactWidget","super","this","addClass","onClick","e","handleClick","InputCollapser","_a","parent","inputHidden","update","OutputCollapser","outputHidden","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","defaultContentFactory","prompt","_prompt","createInputPrompt","editorOptions","factory","editorFactory","updateOnShow","editor","_editor","CodeEditorWrapper","layout","PanelLayout","addWidget","widget","_rendered","hide","show","isDisposed","dispose","ContentFactory","defaultEditorFactory","InputPrompt","CodeMirrorEditorFactory","newInlineEditor","_executionCount","textContent","Private","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","modelDB","contentChanged","Signal","stateChanged","id","UUID","changed","connect","onGenericChange","createValue","set","observableMetadata","createMap","trusted","onTrustedChanged","metadata","Array","isArray","source","join","JSONExt","key","get","getValue","newValue","setValue","Object","create","keys","JSON","parse","stringify","cell_type","args","emit","AttachmentsCellModel","attachments","_attachments","createAttachmentsModel","values","toJSON","AttachmentsModel","RawCellModel","MarkdownCellModel","mimeType","CodeCellModel","outputs","execution_count","_onExecutionCountChanged","_outputs","createOutputArea","collapseChanged","has","collapsed","oldValue","jupyter","hasOwnProperty","clear","delete","name","OutputAreaModel","outputs_hidden","newJupyter","s","t","p","prototype","call","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","undefined","CONTENT_CLASS","Placeholder","callback","_callback","InputPlaceholder","ellipsesIcon","elementPosition","height","width","OutputPlaceholder","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_readOnly","_inputHidden","_syncCollapse","_syncEditable","_model","header","createCellHeader","inputWrapper","_inputWrapper","Panel","inputCollapser","input","_input","updateEditorOnShow","_inputPlaceholder","footer","createCellFooter","editorConfig","forEach","_b","setOption","onMetadataChanged","loadCollapseState","loadEditableState","firstElementChild","syncEditable","saveEditableState","current","readOnly","Promise","resolve","setPrompt","syncCollapse","saveCollapseState","handleInputHidden","assign","source_hidden","constructor","msg","focus","refresh","getOption","toggleClass","_editorFactory","OutputPrompt","Stdin","CodeCell","_outputHidden","_syncScrolled","_savingMetadata","rendermime","_rendermime","outputWrapper","_outputWrapper","outputCollapser","output","_output","OutputArea","outputLengthChanged","_outputLengthHandler","insertWidget","_outputPlaceholder","onStateChanged","initializeState","loadScrolledState","removeWidget","isHidden","_outputsScrolled","syncScrolled","saveScrolledState","outputsScrolled","SimplifiedOutputArea","disconnect","sender","force","execute","async","sessionContext","code","trim","session","kernel","clearExecution","cellId","recordTiming","future","msgPromise","outputArea","recordTimingHook","label","msg_type","content","execution_state","date","Date","toISOString","timingInfo","registerMessageHook","started","finished","AttachmentsCell","event","_evtPaste","preventDefault","_evtNativeDrop","_evtDragOver","_evtDrop","onAfterAttach","addEventListener","removeEventListener","some","imageRendererFactory","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","toArray","filter","types","data","withContent","URI","_generateURI","updateCellSourceWithAttachment","then","fullModel","item","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","result","matches","exec","bundle","startsWith","onerror","console","error","readAsDataURL","lastIndex","lastIndexOf","concat","substring","MarkdownCell","_renderer","_prevText","_ready","PromiseDelegate","clone","resolver","AttachmentsResolver","_monitor","ActivityMonitor","signal","timeout","activityStopped","_updateRenderedInput","renderInput","promise","_handleRendered","inputArea","removeClass","showEditor","onUpdateRequest","attachmentName","textToBeAppended","mimeModel","MimeModel","createRenderer","renderModel","RawCell"],"mappings":"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","file":"4356.bundle.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * This module contains some utility functions to operate on cells. This\n * could be shared by widgets that contain cells, like the CodeConsole or\n * Notebook widgets.\n */\nimport { each } from '@lumino/algorithm';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                each(cells, (cell, index) => {\n                    if (cell.node === node) {\n                        cellIndex = index;\n                        return false;\n                    }\n                });\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        let targetArea;\n        if (cell) {\n            if (cell.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (cell.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.value.text.split('\\n')[0].slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const model = (this.model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || InputArea.defaultContentFactory);\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editorOptions = {\n            model,\n            factory: contentFactory.editorFactory,\n            updateOnShow: options.updateOnShow\n        };\n        const editor = (this._editor = new CodeEditorWrapper(editorOptions));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        layout.addWidget(editor);\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options = {}) {\n            this._editor = options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n    /**\n     * A function to create the default CodeMirror editor factory.\n     */\n    function _createDefaultEditorFactory() {\n        const editorServices = new CodeMirrorEditorFactory();\n        return editorServices.newInlineEditor;\n    }\n    /**\n     * The default editor factory singleton based on CodeMirror.\n     */\n    InputArea.defaultEditorFactory = _createDefaultEditorFactory();\n    /**\n     * The default `ContentFactory` instance.\n     */\n    InputArea.defaultContentFactory = new ContentFactory({});\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { UUID } from '@lumino/coreutils';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    /**\n     * Construct a cell model from optional cell content.\n     */\n    constructor(options) {\n        var _a;\n        super({ modelDB: options.modelDB });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        this.id = options.id || ((_a = options.cell) === null || _a === void 0 ? void 0 : _a.id) || UUID.uuid4();\n        this.value.changed.connect(this.onGenericChange, this);\n        const cellType = this.modelDB.createValue('type');\n        cellType.set(this.type);\n        const observableMetadata = this.modelDB.createMap('metadata');\n        observableMetadata.changed.connect(this.onGenericChange, this);\n        const cell = options.cell;\n        const trusted = this.modelDB.createValue('trusted');\n        trusted.changed.connect(this.onTrustedChanged, this);\n        if (!cell) {\n            trusted.set(false);\n            return;\n        }\n        trusted.set(!!cell.metadata['trusted']);\n        delete cell.metadata['trusted'];\n        if (Array.isArray(cell.source)) {\n            this.value.text = cell.source.join('');\n        }\n        else {\n            this.value.text = cell.source;\n        }\n        const metadata = JSONExt.deepCopy(cell.metadata);\n        if (this.type !== 'raw') {\n            delete metadata['format'];\n        }\n        if (this.type !== 'code') {\n            delete metadata['collapsed'];\n            delete metadata['scrolled'];\n        }\n        for (const key in metadata) {\n            observableMetadata.set(key, metadata[key]);\n        }\n    }\n    /**\n     * The type of cell.\n     */\n    get type() {\n        // This getter really should be abstract, but our current constructor\n        // depends on .type working\n        return 'raw';\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the trusted state of the model.\n     */\n    get trusted() {\n        return this.modelDB.getValue('trusted');\n    }\n    /**\n     * Set the trusted state of the model.\n     */\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue === newValue) {\n            return;\n        }\n        this.modelDB.setValue('trusted', newValue);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            const value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n            metadata[key] = value;\n        }\n        if (this.trusted) {\n            metadata['trusted'] = true;\n        }\n        return {\n            cell_type: this.type,\n            source: this.value.text,\n            metadata\n        };\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n        let attachments;\n        const cell = options.cell;\n        if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n            attachments = cell\n                .attachments;\n        }\n        this._attachments = factory.createAttachmentsModel({\n            values: attachments,\n            modelDB: this.modelDB\n        });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        if (this.attachments.length) {\n            cell.attachments = this.attachments.toJSON();\n        }\n        return cell;\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional cell content.\n     */\n    constructor(options) {\n        super(options);\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const cell = options.cell;\n        let outputs = [];\n        const executionCount = this.modelDB.createValue('executionCount');\n        if (!executionCount.get()) {\n            if (cell && cell.cell_type === 'code') {\n                executionCount.set(cell.execution_count || null);\n                outputs = cell.outputs;\n            }\n            else {\n                executionCount.set(null);\n            }\n        }\n        executionCount.changed.connect(this._onExecutionCountChanged, this);\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this._outputs.changed.connect(this.onGenericChange, this);\n        // We keep `collapsed` and `jupyter.outputs_hidden` metadata in sync, since\n        // they are redundant in nbformat 4.4. See\n        // https://github.com/jupyter/nbformat/issues/137\n        this.metadata.changed.connect(Private.collapseChanged, this);\n        // Sync `collapsed` and `jupyter.outputs_hidden` for the first time, giving\n        // preference to `collapsed`.\n        if (this.metadata.has('collapsed')) {\n            const collapsed = this.metadata.get('collapsed');\n            Private.collapseChanged(this.metadata, {\n                type: 'change',\n                key: 'collapsed',\n                oldValue: collapsed,\n                newValue: collapsed\n            });\n        }\n        else if (this.metadata.has('jupyter')) {\n            const jupyter = this.metadata.get('jupyter');\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                Private.collapseChanged(this.metadata, {\n                    type: 'change',\n                    key: 'jupyter',\n                    oldValue: jupyter,\n                    newValue: jupyter\n                });\n            }\n        }\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.modelDB.getValue('executionCount');\n    }\n    set executionCount(newValue) {\n        const oldValue = this.executionCount;\n        if (newValue === oldValue) {\n            return;\n        }\n        this.modelDB.setValue('executionCount', newValue || null);\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this.metadata.delete('execution');\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.execution_count = this.executionCount || null;\n        cell.outputs = this.outputs.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        if (this._outputs) {\n            this._outputs.trusted = args.newValue;\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n    /**\n     * Handle a change to the execution count.\n     */\n    _onExecutionCountChanged(count, args) {\n        this.contentChanged.emit(void 0);\n        this.stateChanged.emit({\n            name: 'executionCount',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\nvar Private;\n(function (Private) {\n    function collapseChanged(metadata, args) {\n        if (args.key === 'collapsed') {\n            const jupyter = (metadata.get('jupyter') || {});\n            const { outputs_hidden } = jupyter, newJupyter = __rest(jupyter, [\"outputs_hidden\"]);\n            if (outputs_hidden !== args.newValue) {\n                if (args.newValue !== undefined) {\n                    newJupyter['outputs_hidden'] = args.newValue;\n                }\n                if (Object.keys(newJupyter).length === 0) {\n                    metadata.delete('jupyter');\n                }\n                else {\n                    metadata.set('jupyter', newJupyter);\n                }\n            }\n        }\n        else if (args.key === 'jupyter') {\n            const jupyter = (args.newValue || {});\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                metadata.set('collapsed', jupyter.outputs_hidden);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n    }\n    Private.collapseChanged = collapseChanged;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An abstract base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends ReactWidget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(callback) {\n        super();\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = callback;\n    }\n    /**\n     * Handle the click event.\n     */\n    handleClick(e) {\n        const callback = this._callback;\n        callback(e);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the input placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: INPUT_PROMPT_CLASS, key: \"input\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the output placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: OUTPUT_PROMPT_CLASS, key: \"output\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n//# sourceMappingURL=placeholder.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, SimplifiedOutputArea, OutputPrompt, Stdin } from '@jupyterlab/outputarea';\nimport { MimeModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { some, filter, toArray } from '@lumino/algorithm';\nimport { PanelLayout, Panel, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellHeader, CellFooter } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        super();\n        this._readOnly = false;\n        this._inputHidden = false;\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || Cell.defaultContentFactory);\n        this.layout = new PanelLayout();\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            updateOnShow: options.updateEditorOnShow\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder(() => {\n            this.inputHidden = !this.inputHidden;\n        });\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n        // Editor settings\n        if (options.editorConfig) {\n            Object.keys(options.editorConfig).forEach((key) => {\n                var _a, _b;\n                this.editor.setOption(key, (_b = (_a = options.editorConfig) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : null);\n            });\n        }\n        model.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._input.editorWidget;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._input.editor;\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { metadata } = this.model;\n        const current = metadata.get('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            this.model.metadata.set('editable', false);\n        }\n        else {\n            this.model.metadata.delete('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly = this.model.metadata.get('editable') === false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        this._input.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        if (this._inputHidden === value) {\n            return;\n        }\n        const layout = this._inputWrapper.layout;\n        if (value) {\n            this._input.parent = null;\n            layout.addWidget(this._inputPlaceholder);\n        }\n        else {\n            this._inputPlaceholder.parent = null;\n            layout.addWidget(this._input);\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = Object.assign({}, this.model.metadata.get('jupyter'));\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.metadata.delete('jupyter');\n        }\n        else {\n            this.model.metadata.set('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        const jupyter = this.model.metadata.get('jupyter') || {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * Handle `fit-request` messages.\n     */\n    onFitRequest(msg) {\n        // need this for for when a theme changes font size\n        this.editor.refresh();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (this.editor.getOption('readOnly') !== this._readOnly) {\n            this.editor.setOption('readOnly', this._readOnly);\n            this.toggleClass(READONLY_CLASS, this._readOnly);\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options = {}) {\n            this._editorFactory =\n                options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n    /**\n     * The default content factory for cells.\n     */\n    Cell.defaultContentFactory = new ContentFactory();\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this._outputHidden = false;\n        this._syncScrolled = false;\n        this._savingMetadata = false;\n        this.addClass(CODE_CELL_CLASS);\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        // Insert the output before the cell footer.\n        const outputWrapper = (this._outputWrapper = new Panel());\n        outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n        const outputCollapser = new OutputCollapser();\n        outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n        const output = (this._output = new OutputArea({\n            model: model.outputs,\n            rendermime,\n            contentFactory: contentFactory\n        }));\n        output.addClass(CELL_OUTPUT_AREA_CLASS);\n        // Set a CSS if there are no outputs, and connect a signal for future\n        // changes to the number of outputs. This is for conditional styling\n        // if there are no outputs.\n        if (model.outputs.length === 0) {\n            this.addClass(NO_OUTPUTS_CLASS);\n        }\n        output.outputLengthChanged.connect(this._outputLengthHandler, this);\n        outputWrapper.addWidget(outputCollapser);\n        outputWrapper.addWidget(output);\n        this.layout.insertWidget(2, outputWrapper);\n        this._outputPlaceholder = new OutputPlaceholder(() => {\n            this.outputHidden = !this.outputHidden;\n        });\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        if (this._outputHidden === value) {\n            return;\n        }\n        const layout = this._outputWrapper.layout;\n        if (value) {\n            layout.removeWidget(this._output);\n            layout.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !this._outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        else {\n            if (this._outputWrapper.isHidden) {\n                this._outputWrapper.show();\n            }\n            layout.removeWidget(this._outputPlaceholder);\n            layout.addWidget(this._output);\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this._savingMetadata = true;\n        try {\n            super.saveCollapseState();\n            const metadata = this.model.metadata;\n            const collapsed = this.model.metadata.get('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                metadata.set('collapsed', true);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n        finally {\n            this._savingMetadata = false;\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.metadata.get('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const { metadata } = this.model;\n        const current = metadata.get('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            metadata.set('scrolled', true);\n        }\n        else {\n            metadata.delete('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        const metadata = this.model.metadata;\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (metadata.get('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!metadata.get('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        if (this._savingMetadata) {\n            // We are in middle of a metadata transaction, so don't react to it.\n            return;\n        }\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'paste':\n                this._evtPaste(event);\n                break;\n            case 'dragenter':\n                event.preventDefault();\n                break;\n            case 'dragover':\n                event.preventDefault();\n                break;\n            case 'drop':\n                this._evtNativeDrop(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        node.addEventListener('dragenter', this);\n        node.addEventListener('dragover', this);\n        node.addEventListener('drop', this);\n        node.addEventListener('paste', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('drop', this);\n        node.removeEventListener('dragover', this);\n        node.removeEventListener('dragenter', this);\n        node.removeEventListener('paste', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = toArray(filter(event.mimeData.types(), mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        }));\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._renderer = null;\n        this._rendered = true;\n        this._prevText = '';\n        this._ready = new PromiseDelegate();\n        this.addClass(MARKDOWN_CELL_CLASS);\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        // Stop codemirror handling paste\n        this.editor.setOption('handlePaste', false);\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(() => {\n            if (this._rendered) {\n                this.update();\n            }\n        }, this);\n        void this._updateRenderedInput().then(() => {\n            this._ready.resolve(void 0);\n        });\n        this.renderInput(this._renderer);\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered();\n        // Refreshing an editor can be really expensive, so we don't call it from\n        // _handleRendered, since _handledRendered is also called on every update\n        // request.\n        if (!this._rendered) {\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        this.inputArea.renderInput(widget);\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        this.inputArea.showEditor();\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            void this._updateRenderedInput();\n            this.renderInput(this._renderer);\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        const model = this.model;\n        const text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            if (!this._renderer) {\n                this._renderer = this._rendermime.createRenderer('text/markdown');\n                this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n            }\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n}\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}