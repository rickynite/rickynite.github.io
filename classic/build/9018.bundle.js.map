{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/server/lib/app.js","webpack://_JUPYTERLAB.CORE_OUTPUT/./build/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/css-loader/dist/packages/application-extension/style/base.css","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/css-loader/dist/packages/classic-application-extension/style/base.css","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/css-loader/dist/packages/iframe-extension/style/base.css","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/style-loader/dist/node_modules/css-loader/dist/packages/application-extension/style/base.css","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/style-loader/dist/node_modules/css-loader/dist/packages/classic-application-extension/style/base.css","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/style-loader/dist/node_modules/css-loader/dist/packages/iframe-extension/style/base.css","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/theme-extension/lib/index.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/theme/lib/manager.js"],"names":["JupyterLiteServer","Application","options","super","this","name","namespace","version","_serviceManager","id","event","mod","data","default","Object","prototype","hasOwnProperty","call","Array","isArray","forEach","item","registerPlugin","error","console","mods","registerPluginModule","serviceManager","serverMods","mimeExtensionsMods","disabled","JSON","parse","PageConfig","async","createModule","scope","module","window","_JUPYTERLAB","get","e","warn","jupyterLiteServer","registerPluginModules","Promise","all","start","mimeExtensions","App","app","includes","concat","federatedExtensionPromises","federatedMimeExtensionPromises","federatedStylePromises","extensions","federatedExtensionNames","Set","extension","add","push","mimeExtension","style","allSettled","p","status","plugin","exports","plugins","split","activePlugins","value","reason","log","restored","main","___CSS_LOADER_EXPORT___","content","__esModule","locals","CommandIDs","ThemeManager","_link","undefined","_themesUrl","url","path","href","URLExt","resolve","reject","link","document","createElement","setAttribute","addEventListener","_unloadCSS","body","appendChild","_a","_b","parentElement","removeChild","changeTheme","themeScrollbars","themes","autoStart","provides","IThemeManager","requires","ISettingRegistry","optional","ISplashScreen","activate","settings","splash","host","shell","commands","key","manager","themeChanged","connect","sender","args","currentTheme","newValue","dataset","jpThemeLight","String","isLight","jpThemeName","jpThemeScrollbars","loadCSSOverrides","notifyCommandChanged","addCommand","label","theme","displayName","getDisplayName","isToggled","execute","setTheme","isToggledThemeScrollbars","toggleThemeScrollbars"],"mappings":"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","file":"9018.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Application } from '@lumino/application';\n/**\n * Server is the main application class. It is instantiated once and shared.\n */\nexport class JupyterLiteServer extends Application {\n    /**\n     * Construct a new JupyterLite object.\n     *\n     * @param options The instantiation options for a JupyterLiteServer application.\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * The name of the application.\n         */\n        this.name = 'JupyterLite Server';\n        /**\n         * A namespace/prefix plugins may use to denote their provenance.\n         */\n        this.namespace = this.name;\n        /**\n         * The version of the application.\n         */\n        this.version = 'unknown';\n        this._serviceManager = null;\n    }\n    /**\n     * Get the underlying lite service manager for this app.\n     */\n    get serviceManager() {\n        return this._serviceManager;\n    }\n    /**\n     * Attach the application shell to the DOM.\n     *\n     * @param id - The id of the host node for the shell, or `''`.\n     *\n     * #### Notes\n     * For this server application there is no shell to attach\n     */\n    attachShell(id) {\n        // no-op\n    }\n    /**\n     * A method invoked on a window `'resize'` event.\n     *\n     * #### Notes\n     * For this server application there is no shell to update\n     */\n    evtResize(event) {\n        // no-op\n    }\n    /**\n     * Register plugins from a plugin module.\n     *\n     * @param mod - The plugin module to register.\n     */\n    registerPluginModule(mod) {\n        let data = mod.default;\n        // Handle commonjs exports.\n        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {\n            data = mod;\n        }\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        data.forEach(item => {\n            try {\n                this.registerPlugin(item);\n            }\n            catch (error) {\n                console.error(error);\n            }\n        });\n    }\n    /**\n     * Register the plugins from multiple plugin modules.\n     *\n     * @param mods - The plugin modules to register.\n     */\n    registerPluginModules(mods) {\n        mods.forEach(mod => {\n            this.registerPluginModule(mod);\n        });\n    }\n    /**\n     * Register the underlying lite service manager for this app.\n     *\n     * @param serviceManager The Service Manager for the app.\n     */\n    registerServiceManager(serviceManager) {\n        this._serviceManager = serviceManager;\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { JupyterLiteServer } from '@jupyterlite/server';\n\n// The webpack public path needs to be set before loading the CSS assets.\nimport { PageConfig } from '@jupyterlab/coreutils';\n\nrequire('./style.js');\n\nconst serverMods = [\n  import('@jupyterlite/javascript-kernel-extension'),\n  import('@jupyterlite/p5-kernel-extension'),\n  import('@jupyterlite/pyolite-kernel-extension'),\n  import('@jupyterlite/server-extension')\n];\n\nconst mimeExtensionsMods = [\n  import('@jupyterlite/iframe-extension'),\n  import('@jupyterlab/json-extension')\n];\n\nconst disabled = JSON.parse(PageConfig.getOption('disabledExtensions') || '[]');\n\nasync function createModule(scope, module) {\n  try {\n    const factory = await window._JUPYTERLAB[scope].get(module);\n    return factory();\n  } catch (e) {\n    console.warn(`Failed to create module: package: ${scope}; module: ${module}`);\n    throw e;\n  }\n}\n\n/**\n * The main entry point for the application.\n */\nasync function main() {\n  // create the in-browser JupyterLite Server\n  const jupyterLiteServer = new JupyterLiteServer({});\n  jupyterLiteServer.registerPluginModules(await Promise.all(serverMods));\n  // start the server\n  await jupyterLiteServer.start();\n\n  // retrieve the custom service manager from the server app\n  const { serviceManager } = jupyterLiteServer;\n\n  const mimeExtensions = await Promise.all(mimeExtensionsMods);\n\n  // create a JupyterLab Classic frontend\n  const { App } = require('@jupyterlab-classic/application');\n  const app = new App({ serviceManager, mimeExtensions });\n\n  let mods = [\n    // @jupyterlite plugins\n    require('@jupyterlite/application-extension'),\n    require('@jupyterlite/classic-application-extension'),\n    require('@jupyterlite/theme-extension'),\n    // @jupyterlab-classic plugins\n    // do not enable the document opener from JupyterLab Classic\n    require('@jupyterlab-classic/application-extension').default.filter(\n      ({ id }) => id !== '@jupyterlab-classic/application-extension:opener'\n    ),\n    require('@jupyterlab-classic/help-extension'),\n    require('@jupyterlab-classic/notebook-extension'),\n\n    // @jupyterlab plugins\n    require('@jupyterlab/apputils-extension').default.filter(({ id }) =>\n      [\n        '@jupyterlab/apputils-extension:palette',\n        '@jupyterlab/apputils-extension:settings',\n        '@jupyterlab/apputils-extension:themes-palette-menu'\n      ].includes(id)\n    ),\n    require('@jupyterlab/codemirror-extension').default.filter(({ id }) =>\n      [\n        '@jupyterlab/codemirror-extension:services',\n        '@jupyterlab/codemirror-extension:codemirror'\n      ].includes(id)\n    ),\n    require('@jupyterlab/completer-extension').default.filter(({ id }) =>\n      ['@jupyterlab/completer-extension:manager'].includes(id)\n    ),\n    require('@jupyterlab/docmanager-extension').default.filter(({ id }) =>\n      ['@jupyterlab/docmanager-extension:plugin'].includes(id)\n    ),\n    require('@jupyterlab/mainmenu-extension'),\n    require('@jupyterlab/mathjax2-extension'),\n    require('@jupyterlab/notebook-extension').default.filter(({ id }) =>\n      [\n        '@jupyterlab/notebook-extension:factory',\n        '@jupyterlab/notebook-extension:tracker',\n        '@jupyterlab/notebook-extension:widget-factory'\n      ].includes(id)\n    ),\n    require('@jupyterlab/rendermime-extension'),\n    require('@jupyterlab/shortcuts-extension'),\n    require('@jupyterlab/theme-light-extension'),\n    require('@jupyterlab/theme-dark-extension')\n  ];\n\n  // The motivation here is to only load a specific set of plugins dependending on\n  // the current page\n  const page = PageConfig.getOption('classicPage');\n  switch (page) {\n    case 'tree': {\n      mods = mods.concat([\n        // do not enable the new terminal button from JupyterLab Classic\n        require('@jupyterlab-classic/tree-extension').default.filter(\n          ({ id }) => id !== '@jupyterlab-classic/tree-extension:new-terminal'\n        )\n      ]);\n      break;\n    }\n    case 'notebooks': {\n      mods = mods.concat([\n        require('@jupyterlab/completer-extension').default.filter(({ id }) =>\n          ['@jupyterlab/completer-extension:notebooks'].includes(id)\n        ),\n        require('@jupyterlab/tooltip-extension').default.filter(({ id }) =>\n          [\n            '@jupyterlab/tooltip-extension:manager',\n            '@jupyterlab/tooltip-extension:notebooks'\n          ].includes(id)\n        )\n      ]);\n      break;\n    }\n    case 'edit': {\n      mods = mods.concat([\n        require('@jupyterlab/completer-extension').default.filter(({ id }) =>\n          ['@jupyterlab/completer-extension:files'].includes(id)\n        ),\n        require('@jupyterlab/fileeditor-extension').default.filter(({ id }) =>\n          ['@jupyterlab/fileeditor-extension:plugin'].includes(id)\n        ),\n        require('@jupyterlab-classic/tree-extension').default.filter(({ id }) =>\n          ['@jupyterlab-classic/tree-extension:factory'].includes(id)\n        )\n      ]);\n      break;\n    }\n  }\n\n  const federatedExtensionPromises = [];\n  const federatedMimeExtensionPromises = [];\n  const federatedStylePromises = [];\n\n  // This is all the data needed to load and activate plugins. This should be\n  // gathered by the server and put onto the initial page template.\n  const extensions = JSON.parse(\n    PageConfig.getOption('federated_extensions')\n  );\n\n  // The set of federated extension names.\n  const federatedExtensionNames = new Set();\n\n  extensions.forEach(data => {\n    if (data.extension) {\n      federatedExtensionNames.add(data.name);\n      federatedExtensionPromises.push(createModule(data.name, data.extension));\n    }\n    if (data.mimeExtension) {\n      federatedExtensionNames.add(data.name);\n      federatedMimeExtensionPromises.push(createModule(data.name, data.mimeExtension));\n    }\n    if (data.style) {\n      federatedStylePromises.push(createModule(data.name, data.style));\n    }\n  });\n\n  /**\n   * Iterate over active plugins in an extension.\n   */\n  function* activePlugins(extension) {\n    // Handle commonjs or es2015 modules\n    let exports;\n    if (extension.hasOwnProperty('__esModule')) {\n      exports = extension.default;\n    } else {\n      // CommonJS exports.\n      exports = extension;\n    }\n\n    let plugins = Array.isArray(exports) ? exports : [exports];\n    for (let plugin of plugins) {\n      // skip the plugin (or extension) if disabled\n      if (\n        disabled.includes(plugin.id) ||\n        disabled.includes(plugin.id.split(':')[0])\n      ) {\n        continue;\n      }\n      yield plugin;\n    }\n  }\n\n  // Add the federated extensions.\n  const federatedExtensions = await Promise.allSettled(federatedExtensionPromises);\n  federatedExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        mods.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  app.registerPluginModules(mods);\n\n  console.log('Starting app');\n  await app.start();\n  console.log('JupyterLite Classic started, waiting for restore');\n  await app.restored;\n  console.log('JupyterLite Classic restored');\n}\n\nmain();\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./../../packages/application-extension/style/base.css\"],\"names\":[],\"mappings\":\"AAAA;;;8EAG8E\",\"sourcesContent\":[\"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./../../packages/classic-application-extension/style/base.css\"],\"names\":[],\"mappings\":\"AAAA;;;8EAG8E\",\"sourcesContent\":[\"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\\n.jp-IFrameContainer iframe,\\n.jp-IFrameContainer body {\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  border: none;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./../../packages/iframe-extension/style/base.css\"],\"names\":[],\"mappings\":\"AAAA;;;8EAG8E;;AAE9E;;EAEE,SAAS;EACT,UAAU;EACV,gBAAgB;EAChB,YAAY;AACd\",\"sourcesContent\":[\"/*-----------------------------------------------------------------------------\\n| Copyright (c) Jupyter Development Team.\\n| Distributed under the terms of the Modified BSD License.\\n|----------------------------------------------------------------------------*/\\n\\n.jp-IFrameContainer iframe,\\n.jp-IFrameContainer body {\\n  margin: 0;\\n  padding: 0;\\n  overflow: hidden;\\n  border: none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./base.css\");\ncontent = content.__esModule ? content.default : content;\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./base.css\");\ncontent = content.__esModule ? content.default : content;\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","var content = require(\"!!../../../node_modules/css-loader/dist/cjs.js!./base.css\");\ncontent = content.__esModule ? content.default : content;\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","import { ISplashScreen, IThemeManager } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ThemeManager } from '@jupyterlite/theme';\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeTheme = 'apputils:change-theme';\n    CommandIDs.themeScrollbars = 'apputils:theme-scrollbars';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The themes plugin.\n */\nconst themes = {\n    id: '@jupyterlite/apputils-extension:themes',\n    autoStart: true,\n    provides: IThemeManager,\n    requires: [ISettingRegistry],\n    optional: [ISplashScreen],\n    activate: (app, settings, splash) => {\n        const host = app.shell;\n        const commands = app.commands;\n        const key = themes.id;\n        const url = PageConfig.getOption('themesUrl');\n        const manager = new ThemeManager({\n            key,\n            host,\n            settings,\n            splash: splash !== null && splash !== void 0 ? splash : undefined,\n            url\n        });\n        let currentTheme;\n        manager.themeChanged.connect((sender, args) => {\n            const currentTheme = args.newValue;\n            document.body.dataset.jpThemeLight = String(manager.isLight(currentTheme));\n            document.body.dataset.jpThemeName = currentTheme;\n            if (document.body.dataset.jpThemeScrollbars !==\n                String(manager.themeScrollbars(currentTheme))) {\n                document.body.dataset.jpThemeScrollbars = String(manager.themeScrollbars(currentTheme));\n            }\n            // Set any CSS overrides\n            manager.loadCSSOverrides();\n            commands.notifyCommandChanged(CommandIDs.changeTheme);\n        });\n        commands.addCommand(CommandIDs.changeTheme, {\n            label: args => {\n                const theme = args['theme'];\n                const displayName = manager.getDisplayName(theme);\n                return args['isPalette'] ? `Use Theme: ${displayName}` : displayName;\n            },\n            isToggled: args => args['theme'] === currentTheme,\n            execute: args => {\n                const theme = args['theme'];\n                if (theme === manager.theme) {\n                    return;\n                }\n                return manager.setTheme(theme);\n            }\n        });\n        commands.addCommand(CommandIDs.themeScrollbars, {\n            label: 'Theme Scrollbars',\n            isToggled: () => manager.isToggledThemeScrollbars(),\n            execute: () => manager.toggleThemeScrollbars()\n        });\n        return manager;\n    }\n};\nconst plugins = [themes];\nexport default plugins;\n","import { ThemeManager as LabThemeManager } from '@jupyterlab/apputils';\nimport { URLExt } from '@jupyterlab/coreutils';\n/**\n * A class that provides theme management.\n *\n * Note: Custom Theme Manager than core JupyterLab to be\n * able to override the `loadCSS` method for now.\n *\n */\nexport class ThemeManager extends LabThemeManager {\n    constructor(options) {\n        super(options);\n        this._link = undefined;\n        this._themesUrl = '';\n        this._themesUrl = options.url;\n    }\n    /**\n     * Load a theme CSS file by theme name.\n     *\n     * @param path The path to the theme style.\n     */\n    loadCSS(path) {\n        const href = URLExt.join(this._themesUrl, path);\n        return new Promise((resolve, reject) => {\n            const link = document.createElement('link');\n            link.setAttribute('rel', 'stylesheet');\n            link.setAttribute('type', 'text/css');\n            link.setAttribute('href', href);\n            link.addEventListener('load', () => {\n                resolve(undefined);\n            });\n            link.addEventListener('error', () => {\n                reject(`Stylesheet failed to load: ${href}`);\n            });\n            this._link = link;\n            this._unloadCSS();\n            document.body.appendChild(link);\n        });\n    }\n    /**\n     * Unload the previous theme.\n     */\n    _unloadCSS() {\n        var _a, _b;\n        (_b = (_a = this._link) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(this._link);\n    }\n}\n"],"sourceRoot":""}