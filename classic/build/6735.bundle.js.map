{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab-classic/application-extension/lib/index.js"],"names":["TREE_PATTERN","RegExp","CommandIDs","toggleTop","toggleZen","openLab","openTree","logo","id","autoStart","activate","app","baseUrl","PageConfig","node","document","createElement","href","target","rel","Widget","jupyterIcon","container","elementPosition","padding","height","width","shell","add","rank","opener","requires","IRouter","IDocumentManager","router","docManager","commands","command","addCommand","execute","args","_a","matches","path","match","file","decodeURIComponent","ext","PathExt","restored","then","open","undefined","ref","register","pattern","noTabsMenu","IMainMenu","menu","tabsMenu","dispose","pages","optional","ICommandPalette","palette","label","window","forEach","addItem","category","viewMenu","addGroup","paths","provides","JupyterFrontEnd","App","Error","base","urls","Router","started","route","addEventListener","sessionDialogs","ISessionContextDialogs","sessionContextDialogs","ClassicShell","IClassicShell","spacer","top","DOMUtils","addClass","tabTitle","setTabTitle","current","currentWidget","DocumentWidget","update","basename","context","title","pathChanged","connect","currentChanged","widget","addTitle","async","children","length","h","textContent","appendChild","style","marginLeft","onclick","result","renameDialog","encoded","encodeURIComponent","navigate","skipRouting","topVisibility","classicShell","setHidden","isVisible","isToggled","onChanged","format","expandTop","collapseTop","formatChanged","translator","TranslationManager","ITranslator","zen","elem","documentElement","toggleOff","zenModeEnabled","exitFullscreen","requestFullscreen","fullscreenElement"],"mappings":"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","file":"6735.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter, JupyterFrontEnd, Router } from '@jupyterlab/application';\nimport { sessionContextDialogs, ISessionContextDialogs, DOMUtils, ICommandPalette } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager, renameDialog } from '@jupyterlab/docmanager';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ITranslator, TranslationManager } from '@jupyterlab/translation';\nimport { App, ClassicShell, IClassicShell } from '@jupyterlab-classic/application';\nimport { jupyterIcon } from '@jupyterlab-classic/ui-components';\nimport { Widget } from '@lumino/widgets';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)/(.*)');\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Toggle Top Bar visibility\n     */\n    CommandIDs.toggleTop = 'application:toggle-top';\n    /**\n     * Toggle the Zen mode\n     */\n    CommandIDs.toggleZen = 'application:toggle-zen';\n    /**\n     * Open JupyterLab\n     */\n    CommandIDs.openLab = 'application:open-lab';\n    /**\n     * Open the tree page.\n     */\n    CommandIDs.openTree = 'application:open-tree';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The logo plugin.\n */\nconst logo = {\n    id: '@jupyterlab-classic/application-extension:logo',\n    autoStart: true,\n    activate: (app) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const node = document.createElement('a');\n        node.href = `${baseUrl}classic/tree`;\n        node.target = '_blank';\n        node.rel = 'noopener noreferrer';\n        const logo = new Widget({ node });\n        jupyterIcon.element({\n            container: node,\n            elementPosition: 'center',\n            padding: '2px 2px 2px 8px',\n            height: '28px',\n            width: 'auto'\n        });\n        logo.id = 'jp-ClassicLogo';\n        app.shell.add(logo, 'top', { rank: 0 });\n    }\n};\n/**\n * A plugin to open documents in the main area.\n */\nconst opener = {\n    id: '@jupyterlab-classic/application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                const matches = (_a = parsed.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, , path] = matches;\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                const ext = PathExt.extname(file);\n                app.restored.then(() => {\n                    // TODO: get factory from file type instead?\n                    if (ext === '.ipynb') {\n                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                    else {\n                        docManager.open(file, EDITOR_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    }\n};\n/**\n * A plugin to dispose the Tabs menu\n */\nconst noTabsMenu = {\n    id: '@jupyterlab-classic/application-extension:no-tabs-menu',\n    requires: [IMainMenu],\n    autoStart: true,\n    activate: (app, menu) => {\n        menu.tabsMenu.dispose();\n    }\n};\n/**\n * Add commands to open the tree and running pages.\n */\nconst pages = {\n    id: '@jupyterlab-classic/application-extension:pages',\n    autoStart: true,\n    optional: [ICommandPalette, IMainMenu],\n    activate: (app, palette, menu) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        app.commands.addCommand(CommandIDs.openLab, {\n            label: 'Open JupyterLab',\n            execute: () => {\n                window.open(`${baseUrl}lab`);\n            }\n        });\n        app.commands.addCommand(CommandIDs.openTree, {\n            label: 'Open Files',\n            execute: () => {\n                window.open(`${baseUrl}classic/tree`);\n            }\n        });\n        if (palette) {\n            [CommandIDs.openLab, CommandIDs.openTree].forEach(command => {\n                palette.addItem({ command, category: 'View' });\n            });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.openLab }, { command: CommandIDs.openTree }], 0);\n        }\n    }\n};\n/**\n * The default paths for a JupyterLab Classic app.\n */\nconst paths = {\n    id: '@jupyterlab-classic/application-extension:paths',\n    autoStart: true,\n    provides: JupyterFrontEnd.IPaths,\n    activate: (app) => {\n        if (!(app instanceof App)) {\n            throw new Error(`${paths.id} must be activated in JupyterLab Classic.`);\n        }\n        return app.paths;\n    }\n};\n/**\n * The default URL router provider.\n */\nconst router = {\n    id: '@jupyterlab-classic/application-extension:router',\n    autoStart: true,\n    provides: IRouter,\n    requires: [JupyterFrontEnd.IPaths],\n    activate: (app, paths) => {\n        const { commands } = app;\n        const base = paths.urls.base;\n        const router = new Router({ base, commands });\n        void app.started.then(() => {\n            // Route the very first request on load.\n            void router.route();\n            // Route all pop state events.\n            window.addEventListener('popstate', () => {\n                void router.route();\n            });\n        });\n        return router;\n    }\n};\n/**\n * The default session dialogs plugin\n */\nconst sessionDialogs = {\n    id: '@jupyterlab-classic/application-extension:session-dialogs',\n    provides: ISessionContextDialogs,\n    autoStart: true,\n    activate: () => sessionContextDialogs\n};\n/**\n * The default JupyterLab Classic application shell.\n */\nconst shell = {\n    id: '@jupyterlab-classic/application-extension:shell',\n    activate: (app) => {\n        if (!(app.shell instanceof ClassicShell)) {\n            throw new Error(`${shell.id} did not find a ClassicShell instance.`);\n        }\n        return app.shell;\n    },\n    autoStart: true,\n    provides: IClassicShell\n};\n/**\n * A plugin to provide a spacer at rank 10000 for flex panels\n */\nconst spacer = {\n    id: '@jupyterlab-classic/application-extension:spacer',\n    autoStart: true,\n    activate: (app) => {\n        const top = new Widget();\n        top.id = DOMUtils.createDomID();\n        top.addClass('jp-ClassicSpacer');\n        app.shell.add(top, 'top', { rank: 10000 });\n        const menu = new Widget();\n        menu.id = DOMUtils.createDomID();\n        menu.addClass('jp-ClassicSpacer');\n        app.shell.add(menu, 'menu', { rank: 10000 });\n    }\n};\n/**\n * A plugin to display the document title in the browser tab title\n */\nconst tabTitle = {\n    id: '@jupyterlab-classic/application-extension:tab-title',\n    autoStart: true,\n    requires: [IClassicShell],\n    activate: (app, shell) => {\n        const setTabTitle = () => {\n            const current = shell.currentWidget;\n            if (!(current instanceof DocumentWidget)) {\n                return;\n            }\n            const update = () => {\n                const basename = PathExt.basename(current.context.path);\n                document.title = basename;\n            };\n            current.context.pathChanged.connect(update);\n            update();\n        };\n        shell.currentChanged.connect(setTabTitle);\n        setTabTitle();\n    }\n};\n/**\n * A plugin to display and rename the title of a file\n */\nconst title = {\n    id: '@jupyterlab-classic/application-extension:title',\n    autoStart: true,\n    requires: [IClassicShell],\n    optional: [IDocumentManager, IRouter],\n    activate: (app, shell, docManager, router) => {\n        const widget = new Widget();\n        widget.id = 'jp-title';\n        app.shell.add(widget, 'top', { rank: 10 });\n        const addTitle = async () => {\n            const current = shell.currentWidget;\n            if (!current || !(current instanceof DocumentWidget)) {\n                return;\n            }\n            if (widget.node.children.length > 0) {\n                return;\n            }\n            const h = document.createElement('h1');\n            h.textContent = current.title.label;\n            widget.node.appendChild(h);\n            widget.node.style.marginLeft = '10px';\n            if (!docManager) {\n                return;\n            }\n            widget.node.onclick = async () => {\n                var _a;\n                const result = await renameDialog(docManager, current.context.path);\n                // activate the current widget to bring the focus\n                if (current) {\n                    current.activate();\n                }\n                if (!result) {\n                    return;\n                }\n                const basename = PathExt.basename(result.path);\n                h.textContent = basename;\n                if (!router) {\n                    return;\n                }\n                const matches = (_a = router.current.path.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, route, path] = matches;\n                if (!route || !path) {\n                    return;\n                }\n                const encoded = encodeURIComponent(result.path);\n                router.navigate(`/classic/${route}/${encoded}`, {\n                    skipRouting: true\n                });\n            };\n        };\n        shell.currentChanged.connect(addTitle);\n        addTitle();\n    }\n};\n/**\n * Plugin to toggle the top header visibility.\n */\nconst topVisibility = {\n    id: '@jupyterlab-classic/application-extension:top',\n    requires: [IClassicShell],\n    optional: [IMainMenu],\n    activate: (app, classicShell, menu) => {\n        const top = classicShell.top;\n        app.commands.addCommand(CommandIDs.toggleTop, {\n            label: 'Show Header',\n            execute: () => {\n                top.setHidden(top.isVisible);\n            },\n            isToggled: () => top.isVisible\n        });\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleTop }], 2);\n        }\n        const onChanged = () => {\n            if (app.format === 'desktop') {\n                classicShell.expandTop();\n            }\n            else {\n                classicShell.collapseTop();\n            }\n        };\n        // listen on format change (mobile and desktop) to make the view more compact\n        app.formatChanged.connect(onChanged);\n        onChanged();\n    },\n    autoStart: true\n};\n/**\n * A simplified Translator\n */\nconst translator = {\n    id: '@jupyterlab-classic/application-extension:translator',\n    activate: (app) => {\n        const translationManager = new TranslationManager();\n        return translationManager;\n    },\n    autoStart: true,\n    provides: ITranslator\n};\n/**\n * Zen mode plugin\n */\nconst zen = {\n    id: '@jupyterlab-classic/application-extension:zen',\n    autoStart: true,\n    optional: [ICommandPalette, IClassicShell, IMainMenu],\n    activate: (app, palette, classicShell, menu) => {\n        const { commands } = app;\n        const elem = document.documentElement;\n        const toggleOn = () => {\n            classicShell === null || classicShell === void 0 ? void 0 : classicShell.collapseTop();\n            classicShell === null || classicShell === void 0 ? void 0 : classicShell.menu.setHidden(true);\n            zenModeEnabled = true;\n        };\n        const toggleOff = () => {\n            classicShell === null || classicShell === void 0 ? void 0 : classicShell.expandTop();\n            classicShell === null || classicShell === void 0 ? void 0 : classicShell.menu.setHidden(false);\n            zenModeEnabled = false;\n        };\n        let zenModeEnabled = false;\n        commands.addCommand(CommandIDs.toggleZen, {\n            label: 'Toggle Zen Mode',\n            execute: () => {\n                if (!zenModeEnabled) {\n                    elem.requestFullscreen();\n                    toggleOn();\n                }\n                else {\n                    document.exitFullscreen();\n                    toggleOff();\n                }\n            }\n        });\n        document.addEventListener('fullscreenchange', () => {\n            if (!document.fullscreenElement) {\n                toggleOff();\n            }\n        });\n        if (palette) {\n            palette.addItem({ command: CommandIDs.toggleZen, category: 'Mode' });\n        }\n        if (menu) {\n            menu.viewMenu.addGroup([{ command: CommandIDs.toggleZen }], 3);\n        }\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    logo,\n    noTabsMenu,\n    opener,\n    pages,\n    paths,\n    router,\n    sessionDialogs,\n    shell,\n    spacer,\n    tabTitle,\n    title,\n    topVisibility,\n    translator,\n    zen\n];\nexport default plugins;\n"],"sourceRoot":""}