{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/index.js"],"names":["logNotebookOutput","activate","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","logger","getLogger","context","path","rendermime","content","data","Object","assign","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","id","requires","INotebookTracker","optional","ILoggerRegistry","autoStart","CommandIDs","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","createConsole","createOutputView","clearAllOutputs","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","split","commandMode","toggleAllLines","undoCellAction","redoCellAction","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","FACTORY","FORMAT_EXCLUDE","trackerPlugin","provides","INotebookWidgetFactory","IDocumentManager","ITranslator","ICommandPalette","IFileBrowserFactory","ILauncher","ILayoutRestorer","IMainMenu","ISettingRegistry","ISessionContextDialogs","factory","docManager","translator","palette","browserFactory","launcher","restorer","mainMenu","settingRegistry","sessionDialogs","trans","load","services","serviceManager","commands","tracker","NotebookTracker","namespace","clonedOutputs","WidgetTracker","restore","command","args","panel","when","ready","widget","index","restored","docRegistry","addModelFactory","NotebookModelFactory","shell","getCurrent","currentWidget","activateById","isEnabled","isEnabledAndSingleSelected","activeCellIndex","i","widgets","length","isSelected","sessionContextDialogs","addCommand","label","__","execute","current","NotebookActions","async","_a","_b","cell","activeCell","metadata","model","toJSON","code","editor","selection","getSelection","start","end","column","line","getOffsetAt","value","text","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","fromFirst","firstLine","lastLine","slice","join","reply","session","kernel","requestIsComplete","status","setCursorPosition","insertMode","fileName","title","showDialog","body","buttons","Dialog","then","result","button","accept","shutdown","dispose","save","formatLabel","url","PageConfig","format","download","child","window","open","opener","dirty","readOnly","location","Promise","resolve","undefined","restarted","executed","mode","selectKernel","reconnect","findWidget","Private","ClonedOutputArea","notebook","MainAreaWidget","addSibling","ref","updateCloned","pathChanged","cells","changed","add","disposed","disconnect","addCommands","category","addItem","isPalette","populatePalette","ft","getFileType","updateTracker","options","setConfig","updateConfig","settings","StaticNotebook","get","composite","markdown","raw","editorConfig","notebookConfig","scrollPastEnd","defaultCell","recordTiming","shutdownOnClose","kernelShutdown","widgetCreated","sender","icon","iconClass","iconLabel","fetchSettings","reject","Error","catch","reason","console","warn","message","editMenu","undoers","undo","redo","clearers","clearCurrentLabel","n","clearAllLabel","clearCurrent","clearAll","fileMenu","newMenu","addGroup","closeAndCleaners","closeAndCleanupLabel","closeAndCleanup","exportTo","Menu","nbconvert","getExportFormats","response","formatLabels","getFormatLabels","keys","key","capCaseKey","toUpperCase","substr","labelStr","indexOf","fileGroup","submenu","kernelMenu","kernelUsers","interruptKernel","restartKernelAndClearLabel","restartKernel","restartKernelAndClear","shutdownKernel","consoleCreators","createConsoleLabel","collapseGroup","map","viewMenu","expandGroup","editorViewers","toggleLineNumbers","lineNumbersToggled","config","lineNumbers","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","restartAndRunAll","runExtras","runAboveBelowGroup","undoCellActionGroup","copyGroup","selectGroup","splitMergeGroup","moveCellsGroup","helpMenu","getKernel","populateMenus","_c","kernelName","kernelspecs","specs","display_name","caption","notebookIcon","cwd","defaultBrowser","disposables","onSpecsChanged","DisposableSet","baseUrl","rank","default","Infinity","spec","kernelIconUrl","resources","URLExt","isLauncher","JSONExt","specsChanged","contextMenu","selector","NotebookPanel","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","tools","state","inspectorProvider","notebookTools","NotebookTools","activeCellTool","slideShow","cellMetadataEditor","collapsed","notebookMetadataEditor","rawFormatExclude","optionValueArray","formatList","altOption","option","mimeTypeValue","output_mimetype","push","nbConvert","tool","section","buildIcon","MessageLoop","remove","register","render","INotebookTools","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","currentChanged","registerStatusItem","align","isActive","notebookTrustItem","tranlator","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","contentFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","mimeTypeService","addWidgetFactory","preferredLanguage","defaultKernelLanguage","Panel","super","this","_cell","nullTranslator","_notebook","_index","UUID","addClass","clone","cloneOutputArea","addWidget","ArrayExt","c","html","latex","pdf","rst","script","slides"],"mappings":"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","file":"8389.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = Object.assign(Object.assign({}, msg.content), { output_type: msg.header.msg_type });\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, ISessionContextDialogs, MainAreaWidget, showDialog, WidgetTracker, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookTools, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookModelFactory, NotebookPanel, NotebookTracker, NotebookWidgetFactory, StaticNotebook, CommandEditStatus, NotebookTrustStatus } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { nullTranslator, ITranslator } from '@jupyterlab/translation';\nimport { buildIcon, notebookIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel, Menu } from '@lumino/widgets';\nimport { logNotebookOutput } from './nboutput';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The exluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    provides: INotebookTracker,\n    requires: [INotebookWidgetFactory, IDocumentManager, ITranslator],\n    optional: [\n        ICommandPalette,\n        IFileBrowserFactory,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        ISessionContextDialogs\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IStateDB, ITranslator],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, tranlator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(tranlator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISessionContextDialogs,\n        ITranslator\n    ],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    trackerPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    const activeCellTool = new NotebookTools.ActiveCellTool();\n    const slideShow = NotebookTools.createSlideShowSelector(translator);\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    const cellMetadataEditor = new NotebookTools.CellMetadataEditorTool({\n        editorFactory,\n        collapsed: false,\n        translator\n    });\n    const notebookMetadataEditor = new NotebookTools.NotebookMetadataEditorTool({\n        editorFactory,\n        translator\n    });\n    const services = app.serviceManager;\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    const optionsMap = {};\n    optionsMap.None = null;\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            /**\n             * The excluded Cell Inspector Raw NbConvert Formats\n             * (returned from nbconvert's export list)\n             */\n            const rawFormatExclude = [\n                'pdf',\n                'slides',\n                'script',\n                'notebook',\n                'custom'\n            ];\n            let optionValueArray = [\n                [trans.__('PDF'), 'pdf'],\n                [trans.__('Slides'), 'slides'],\n                [trans.__('Script'), 'script'],\n                [trans.__('Notebook'), 'notebook'],\n                [trans.__('Custom'), 'custom']\n            ];\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                if (rawFormatExclude.indexOf(key) === -1) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    optionValueArray.push([option, mimeTypeValue]);\n                }\n            });\n            const nbConvert = NotebookTools.createNBConvertSelector(optionValueArray, translator);\n            notebookTools.addItem({ tool: nbConvert, section: 'common', rank: 3 });\n        }\n    });\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    notebookTools.addItem({ tool: activeCellTool, section: 'common', rank: 1 });\n    notebookTools.addItem({ tool: slideShow, section: 'common', rank: 2 });\n    notebookTools.addItem({\n        tool: cellMetadataEditor,\n        section: 'advanced',\n        rank: 1\n    });\n    notebookTools.addItem({\n        tool: notebookMetadataEditor,\n        section: 'advanced',\n        rank: 2\n    });\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, sessionContextDialogs, translator) {\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: true,\n        canStartKernel: true,\n        rendermime: rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        sessionDialogs: sessionContextDialogs,\n        translator: translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, docManager, translator, palette, browserFactory, launcher, restorer, mainMenu, settingRegistry, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: tracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const registry = app.docRegistry;\n    registry.addModelFactory(new NotebookModelFactory({}));\n    addCommands(app, docManager, services, tracker, clonedOutputs, translator, sessionDialogs);\n    if (palette) {\n        populatePalette(palette, services, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.code), settings.get('codeCellConfig').composite);\n        const markdown = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.markdown), settings.get('markdownCellConfig').composite);\n        const raw = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.raw), settings.get('rawCellConfig').composite);\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite\n        };\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    }\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    app.restored\n        .then(() => fetchSettings)\n        .then(settings => {\n        updateConfig(settings);\n        settings.changed.connect(() => {\n            updateConfig(settings);\n        });\n    })\n        .catch((reason) => {\n        console.warn(reason.message);\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    });\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(app, mainMenu, tracker, services, translator, palette, sessionDialogs);\n    }\n    // Utility function to create a new notebook.\n    const createNew = (cwd, kernelName) => {\n        return commands\n            .execute('docmanager:new-untitled', { path: cwd, type: 'notebook' })\n            .then(model => {\n            return commands.execute('docmanager:open', {\n                path: model.path,\n                factory: FACTORY,\n                kernel: { name: kernelName }\n            });\n        });\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            const cwd = args['cwd'] ||\n                (browserFactory ? browserFactory.defaultBrowser.model.path : '');\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                const baseUrl = PageConfig.getBaseUrl();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    if (kernelIconUrl) {\n                        const index = kernelIconUrl.indexOf('kernelspecs');\n                        kernelIconUrl = URLExt.join(baseUrl, kernelIconUrl.slice(index));\n                    }\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    // Cell context menu groups\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 0\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.cut,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copy,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.pasteBelow,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.deleteCell,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.split,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.merge,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 9\n    });\n    // CodeCell context menu groups\n    app.contextMenu.addItem({\n        command: CommandIDs.createOutputView,\n        selector: '.jp-Notebook .jp-CodeCell',\n        rank: 10\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-CodeCell',\n        rank: 11\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.clearOutputs,\n        selector: '.jp-Notebook .jp-CodeCell',\n        rank: 12\n    });\n    // Notebook context menu groups\n    app.contextMenu.addItem({\n        command: CommandIDs.clearAllOutputs,\n        selector: '.jp-Notebook',\n        rank: 0\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook',\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.enableOutputScrolling,\n        selector: '.jp-Notebook',\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.disableOutputScrolling,\n        selector: '.jp-Notebook',\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook',\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.undoCellAction,\n        selector: '.jp-Notebook',\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.redoCellAction,\n        selector: '.jp-Notebook',\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.restart,\n        selector: '.jp-Notebook',\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook',\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createConsole,\n        selector: '.jp-Notebook',\n        rank: 9\n    });\n    return tracker;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, docManager, services, tracker, clonedOutputs, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    // Get the current widget and activate unless the args specify otherwise.\n    function getCurrent(args) {\n        const widget = tracker.currentWidget;\n        const activate = args['activate'] !== false;\n        if (activate && widget) {\n            shell.activateById(widget.id);\n        }\n        return widget;\n    }\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled() {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected() {\n        if (!isEnabled()) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: trans.__('Run Selected Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: trans.__(\"Run Selected Cells and Don't Advance\"),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: trans.__('Run Selected Cells and Insert Below'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = getCurrent(Object.assign({ activate: false }, args));\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata.toJSON();\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.value.text.substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.value.text.split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.renderAllMarkdown(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.exportToFormat, {\n        label: args => {\n            const formatLabel = args['label'];\n            return args['isPalette']\n                ? trans.__('Export Notebook: %1', formatLabel)\n                : formatLabel;\n        },\n        execute: args => {\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const url = PageConfig.getNBConvertURL({\n                format: args['format'],\n                download: true,\n                path: current.context.path\n            });\n            const child = window.open('', '_blank');\n            const { context } = current;\n            if (child) {\n                child.opener = null;\n            }\n            if (context.model.dirty && !context.model.readOnly) {\n                return context.save().then(() => {\n                    child === null || child === void 0 ? void 0 : child.location.assign(url);\n                });\n            }\n            return new Promise(resolve => {\n                child === null || child === void 0 ? void 0 : child.location.assign(url);\n                resolve(undefined);\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear All Outputs…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { content, sessionContext } = current;\n                return sessionDialogs.restart(sessionContext, translator).then(() => {\n                    NotebookActions.clearAllOutputs(content);\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content } = current;\n                return sessionDialogs\n                    .restart(current.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAllAbove(content, context.sessionContext).then(executed => {\n                            if (executed || content.activeCellIndex === 0) {\n                                void NotebookActions.run(content, context.sessionContext);\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        isEnabled: () => {\n            // Can't run if there are multiple cells selected\n            return isEnabledAndSingleSelected();\n        }\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                const { context, content, sessionContext } = current;\n                return sessionDialogs\n                    .restart(sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(content, context.sessionContext);\n                    }\n                    return restarted;\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear All Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: trans.__('Cut Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: trans.__('Copy Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: trans.__('Paste Cells Below'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: trans.__('Paste Cells Above'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: trans.__('Paste Cells and Replace'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: trans.__('Delete Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: trans.__('Move Cells Up'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.moveUp(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: trans.__('Move Cells Down'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.moveDown(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Toggle All Line Numbers'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect To Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = getCurrent(Object.assign(Object.assign({}, args), { activate: false }));\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = getCurrent(Object.assign(Object.assign({}, args), { activate: false }));\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, services, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(app, mainMenu, tracker, services, translator, palette, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    sessionDialogs = sessionDialogs || sessionContextDialogs;\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.add({\n        tracker,\n        undo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.undo();\n        },\n        redo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.redo();\n        }\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.add({\n        tracker,\n        clearCurrentLabel: (n) => trans.__('Clear Output'),\n        clearAllLabel: (n) => {\n            return trans.__('Clear All Outputs');\n        },\n        clearCurrent: (current) => {\n            return NotebookActions.clearOutputs(current.content);\n        },\n        clearAll: (current) => {\n            return NotebookActions.clearAllOutputs(current.content);\n        }\n    });\n    // Add new notebook creation to the file menu.\n    mainMenu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew }], 10);\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        tracker,\n        closeAndCleanupLabel: (n) => trans.__('Close and Shutdown Notebook'),\n        closeAndCleanup: (current) => {\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the Notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        }\n    });\n    // Add a notebook group to the File menu.\n    const exportTo = new Menu({ commands });\n    exportTo.title.label = trans.__('Export Notebook As…');\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            const formatLabels = Private.getFormatLabels(translator);\n            // Convert export list to palette and menu items.\n            const formatList = Object.keys(response);\n            formatList.forEach(function (key) {\n                const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                let args = {\n                    format: key,\n                    label: labelStr,\n                    isPalette: false\n                };\n                if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                    exportTo.addItem({\n                        command: CommandIDs.exportToFormat,\n                        args: args\n                    });\n                    if (palette) {\n                        args = {\n                            format: key,\n                            label: labelStr,\n                            isPalette: true\n                        };\n                        const category = trans.__('Notebook Operations');\n                        palette.addItem({\n                            command: CommandIDs.exportToFormat,\n                            category,\n                            args\n                        });\n                    }\n                }\n            });\n            const fileGroup = [\n                { type: 'submenu', submenu: exportTo }\n            ];\n            mainMenu.fileMenu.addGroup(fileGroup, 10);\n        }\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n            return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n            return Promise.resolve(void 0);\n        },\n        restartKernelAndClearLabel: (n) => trans.__('Restart Kernel and Clear All Outputs…'),\n        restartKernel: current => sessionDialogs.restart(current.sessionContext, translator),\n        restartKernelAndClear: current => {\n            return sessionDialogs\n                .restart(current.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    NotebookActions.clearAllOutputs(current.content);\n                }\n                return restarted;\n            });\n        },\n        changeKernel: current => sessionDialogs.selectKernel(current.sessionContext, translator),\n        shutdownKernel: current => current.sessionContext.shutdown()\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        tracker,\n        createConsoleLabel: (n) => trans.__('New Console for Notebook'),\n        createConsole: current => Private.createConsole(commands, current, true)\n    });\n    // Add some commands to the application view menu.\n    const collapseGroup = [\n        CommandIDs.hideCode,\n        CommandIDs.hideOutput,\n        CommandIDs.hideAllCode,\n        CommandIDs.hideAllOutputs\n    ].map(command => {\n        return { command };\n    });\n    mainMenu.viewMenu.addGroup(collapseGroup, 10);\n    const expandGroup = [\n        CommandIDs.showCode,\n        CommandIDs.showOutput,\n        CommandIDs.showAllCode,\n        CommandIDs.showAllOutputs\n    ].map(command => {\n        return { command };\n    });\n    mainMenu.viewMenu.addGroup(expandGroup, 11);\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.add({\n        tracker,\n        toggleLineNumbers: widget => {\n            NotebookActions.toggleAllLineNumbers(widget.content);\n        },\n        lineNumbersToggled: widget => {\n            const config = widget.content.editorConfig;\n            return !!(config.code.lineNumbers &&\n                config.markdown.lineNumbers &&\n                config.raw.lineNumbers);\n        }\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.add({\n        tracker,\n        runLabel: (n) => trans.__('Run Selected Cells'),\n        runAllLabel: (n) => trans.__('Run All Cells'),\n        restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Cells…'),\n        run: current => {\n            const { context, content } = current;\n            return NotebookActions.runAndAdvance(content, context.sessionContext).then(() => void 0);\n        },\n        runAll: current => {\n            const { context, content } = current;\n            return NotebookActions.runAll(content, context.sessionContext).then(() => void 0);\n        },\n        restartAndRunAll: current => {\n            const { context, content } = current;\n            return sessionDialogs\n                .restart(context.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    void NotebookActions.runAll(content, context.sessionContext);\n                }\n                return restarted;\n            });\n        }\n    });\n    // Add a renderAllMarkdown group to the run menu.\n    const renderAllMarkdown = [CommandIDs.renderAllMarkdown].map(command => {\n        return { command };\n    });\n    // Add a run+insert and run+don't advance group to the run menu.\n    const runExtras = [\n        CommandIDs.runAndInsert,\n        CommandIDs.run,\n        CommandIDs.runInConsole\n    ].map(command => {\n        return { command };\n    });\n    // Add a run all above/below group to the run menu.\n    const runAboveBelowGroup = [\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow\n    ].map(command => {\n        return { command };\n    });\n    // Add commands to the application edit menu.\n    const undoCellActionGroup = [\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction\n    ].map(command => {\n        return { command };\n    });\n    const copyGroup = [\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace\n    ].map(command => {\n        return { command };\n    });\n    const selectGroup = [CommandIDs.selectAll, CommandIDs.deselectAll].map(command => {\n        return { command };\n    });\n    const splitMergeGroup = [CommandIDs.split, CommandIDs.merge].map(command => {\n        return { command };\n    });\n    const moveCellsGroup = [CommandIDs.moveUp, CommandIDs.moveDown].map(command => {\n        return { command };\n    });\n    mainMenu.editMenu.addGroup(undoCellActionGroup, 4);\n    mainMenu.editMenu.addGroup(copyGroup, 5);\n    mainMenu.editMenu.addGroup([{ command: CommandIDs.deleteCell }], 6);\n    mainMenu.editMenu.addGroup(selectGroup, 7);\n    mainMenu.editMenu.addGroup(moveCellsGroup, 8);\n    mainMenu.editMenu.addGroup(splitMergeGroup, 9);\n    mainMenu.runMenu.addGroup(runExtras, 10);\n    mainMenu.runMenu.addGroup(runAboveBelowGroup, 11);\n    mainMenu.runMenu.addGroup(renderAllMarkdown, 12);\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.kernelUsers.add({\n        tracker,\n        getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n})(Private || (Private = {}));\n/**\n * A namespace for private data.\n */\n(function (Private) {\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}