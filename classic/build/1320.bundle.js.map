{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/docmanager-extension/lib/index.js"],"names":["CommandIDs","clone","deleteFile","newUntitled","open","openBrowserTab","reload","rename","del","restoreCheckpoint","save","saveAll","saveAs","download","toggleAutosave","showInFileBrowser","pluginId","docManagerPlugin","id","provides","IDocumentManager","requires","ISettingRegistry","ITranslator","optional","ILabStatus","ICommandPalette","ILabShell","IMainMenu","ISessionContextDialogs","activate","app","settingRegistry","translator","status","palette","labShell","mainMenu","sessionDialogs","_a","trans","load","manager","serviceManager","contexts","WeakSet","opener","widget","options","Private","title","dataset","Object","assign","type","isAttached","shell","add","activateById","context","docManager","contextForWidget","has","disposable","onStateChanged","sender","args","name","newValue","setDirty","dispose","ready","then","model","stateChanged","connect","dirty","disposed","handleContext","registry","docRegistry","when","restored","DocumentManager","setBusy","undefined","commands","category","__","isEnabled","currentWidget","contextMenuWidget","pathRe","node","contextMenuHitTest","match","pathMatch","findWidget","addCommand","label","fileType","execute","mode","child","cloneWidget","renameDialog","path","async","showDialog","body","buttons","Dialog","button","accept","contextMenu","addItem","command","selector","rank","addLabCommands","Error","errorTitle","ext","services","contents","catch","error","showErrorMessage","factory","kernel","get","content","openOrReveal","icon","mnemonic","getDownloadUrl","url","opened","window","location","href","caption","result","isDisposed","revert","listCheckpoints","checkpoints","length","lastCheckpoint","RevertConfirmWidget","readOnly","contentsModel","writable","createCheckpoint","err","message","some","map","widgets","w","c","_b","promises","paths","Set","each","push","Promise","all","isToggled","autosave","value","key","set","reason","console","forEach","settingsMenu","addGroup","fileMenu","addCommands","onSettingsUpdated","settings","composite","notifyCommandChanged","autosaveInterval","defaultViewers","overrides","keys","ft","getFileType","getWidgetFactory","warn","fileTypes","setDefaultWidgetFactory","changed","transform","fetch","plugin","toArray","join","factories","widgetFactories","f","description","schema","JSONExt","properties","savingStatusPlugin","autoStart","IStatusBar","_","statusBar","saving","SavingStatus","currentChanged","registerStatusItem","item","align","isActive","activeStateChanged","pathStatusPlugin","PathStatus","Widget","checkpoint","super","createRevertConfirmNode","fts","getFileTypesForPath","displayName","document","createElement","confirmMessage","confirmText","createTextNode","cannotUndoText","textContent","appendChild","lastCheckpointMessage","lastCheckpointText","lastCheckpointDate","date","Date","last_modified","style","textAlign","Time"],"mappings":"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","file":"1320.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module docmanager-extension\n */\nimport { ILabShell, ILabStatus } from '@jupyterlab/application';\nimport { showDialog, showErrorMessage, Dialog, ICommandPalette, ISessionContextDialogs } from '@jupyterlab/apputils';\nimport { Time } from '@jupyterlab/coreutils';\nimport { renameDialog, DocumentManager, IDocumentManager, PathStatus, SavingStatus } from '@jupyterlab/docmanager';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { each, map, some, toArray } from '@lumino/algorithm';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\n/**\n * The command IDs used by the document manager plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.clone = 'docmanager:clone';\n    CommandIDs.deleteFile = 'docmanager:delete-file';\n    CommandIDs.newUntitled = 'docmanager:new-untitled';\n    CommandIDs.open = 'docmanager:open';\n    CommandIDs.openBrowserTab = 'docmanager:open-browser-tab';\n    CommandIDs.reload = 'docmanager:reload';\n    CommandIDs.rename = 'docmanager:rename';\n    CommandIDs.del = 'docmanager:delete';\n    CommandIDs.restoreCheckpoint = 'docmanager:restore-checkpoint';\n    CommandIDs.save = 'docmanager:save';\n    CommandIDs.saveAll = 'docmanager:save-all';\n    CommandIDs.saveAs = 'docmanager:save-as';\n    CommandIDs.download = 'docmanager:download';\n    CommandIDs.toggleAutosave = 'docmanager:toggle-autosave';\n    CommandIDs.showInFileBrowser = 'docmanager:show-in-file-browser';\n})(CommandIDs || (CommandIDs = {}));\nconst pluginId = '@jupyterlab/docmanager-extension:plugin';\n/**\n * The default document manager provider.\n */\nconst docManagerPlugin = {\n    id: pluginId,\n    provides: IDocumentManager,\n    requires: [ISettingRegistry, ITranslator],\n    optional: [\n        ILabStatus,\n        ICommandPalette,\n        ILabShell,\n        IMainMenu,\n        ISessionContextDialogs\n    ],\n    activate: (app, settingRegistry, translator, status, palette, labShell, mainMenu, sessionDialogs) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const manager = app.serviceManager;\n        const contexts = new WeakSet();\n        const opener = {\n            open: (widget, options) => {\n                if (!widget.id) {\n                    widget.id = `document-manager-${++Private.id}`;\n                }\n                widget.title.dataset = Object.assign({ type: 'document-title' }, widget.title.dataset);\n                if (!widget.isAttached) {\n                    app.shell.add(widget, 'main', options || {});\n                }\n                app.shell.activateById(widget.id);\n                // Handle dirty state for open documents.\n                const context = docManager.contextForWidget(widget);\n                if (context && !contexts.has(context)) {\n                    if (status) {\n                        handleContext(status, context);\n                    }\n                    contexts.add(context);\n                }\n            }\n        };\n        const registry = app.docRegistry;\n        const when = app.restored.then(() => void 0);\n        const docManager = new DocumentManager({\n            registry,\n            manager,\n            opener,\n            when,\n            setBusy: (_a = (status && (() => status.setBusy()))) !== null && _a !== void 0 ? _a : undefined,\n            sessionDialogs: sessionDialogs || undefined,\n            translator\n        });\n        // Register the file operations commands.\n        addCommands(app, docManager, opener, settingRegistry, translator, labShell, palette, mainMenu);\n        // Keep up to date with the settings registry.\n        const onSettingsUpdated = (settings) => {\n            // Handle whether to autosave\n            const autosave = settings.get('autosave').composite;\n            docManager.autosave =\n                autosave === true || autosave === false ? autosave : true;\n            app.commands.notifyCommandChanged(CommandIDs.toggleAutosave);\n            // Handle autosave interval\n            const autosaveInterval = settings.get('autosaveInterval').composite;\n            docManager.autosaveInterval = autosaveInterval || 120;\n            // Handle default widget factory overrides.\n            const defaultViewers = settings.get('defaultViewers').composite;\n            const overrides = {};\n            // Filter the defaultViewers and file types for existing ones.\n            Object.keys(defaultViewers).forEach(ft => {\n                if (!registry.getFileType(ft)) {\n                    console.warn(`File Type ${ft} not found`);\n                    return;\n                }\n                if (!registry.getWidgetFactory(defaultViewers[ft])) {\n                    console.warn(`Document viewer ${defaultViewers[ft]} not found`);\n                }\n                overrides[ft] = defaultViewers[ft];\n            });\n            // Set the default factory overrides. If not provided, this has the\n            // effect of unsetting any previous overrides.\n            each(registry.fileTypes(), ft => {\n                try {\n                    registry.setDefaultWidgetFactory(ft.name, overrides[ft.name]);\n                }\n                catch (_a) {\n                    console.warn(`Failed to set default viewer ${overrides[ft.name]} for file type ${ft.name}`);\n                }\n            });\n        };\n        // Fetch the initial state of the settings.\n        Promise.all([settingRegistry.load(pluginId), app.restored])\n            .then(([settings]) => {\n            settings.changed.connect(onSettingsUpdated);\n            onSettingsUpdated(settings);\n        })\n            .catch((reason) => {\n            console.error(reason.message);\n        });\n        // Register a fetch transformer for the settings registry,\n        // allowing us to dynamically populate a help string with the\n        // available document viewers and file types for the default\n        // viewer overrides.\n        settingRegistry.transform(pluginId, {\n            fetch: plugin => {\n                // Get the available file types.\n                const fileTypes = toArray(registry.fileTypes())\n                    .map(ft => ft.name)\n                    .join('    \\n');\n                // Get the available widget factories.\n                const factories = toArray(registry.widgetFactories())\n                    .map(f => f.name)\n                    .join('    \\n');\n                // Generate the help string.\n                const description = trans.__(`Overrides for the default viewers for file types.\nSpecify a mapping from file type name to document viewer name, for example:\n\ndefaultViewers: {\n  markdown: \"Markdown Preview\"\n}\n\nIf you specify non-existent file types or viewers, or if a viewer cannot\nopen a given file type, the override will not function.\n\nAvailable viewers:\n%1\n\nAvailable file types:\n%2`, factories, fileTypes);\n                const schema = JSONExt.deepCopy(plugin.schema);\n                schema.properties.defaultViewers.description = description;\n                return Object.assign(Object.assign({}, plugin), { schema });\n            }\n        });\n        // If the document registry gains or loses a factory or file type,\n        // regenerate the settings description with the available options.\n        registry.changed.connect(() => settingRegistry.reload(pluginId));\n        return docManager;\n    }\n};\n/**\n * A plugin for adding a saving status item to the status bar.\n */\nexport const savingStatusPlugin = {\n    id: '@jupyterlab/docmanager-extension:saving-status',\n    autoStart: true,\n    requires: [IDocumentManager, ILabShell, ITranslator],\n    optional: [IStatusBar],\n    activate: (_, docManager, labShell, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const saving = new SavingStatus({ docManager, translator });\n        // Keep the currently active widget synchronized.\n        saving.model.widget = labShell.currentWidget;\n        labShell.currentChanged.connect(() => {\n            saving.model.widget = labShell.currentWidget;\n        });\n        statusBar.registerStatusItem(savingStatusPlugin.id, {\n            item: saving,\n            align: 'middle',\n            isActive: () => true,\n            activeStateChanged: saving.model.stateChanged\n        });\n    }\n};\n/**\n * A plugin providing a file path widget to the status bar.\n */\nexport const pathStatusPlugin = {\n    id: '@jupyterlab/docmanager-extension:path-status',\n    autoStart: true,\n    requires: [IDocumentManager, ILabShell],\n    optional: [IStatusBar],\n    activate: (_, docManager, labShell, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const path = new PathStatus({ docManager });\n        // Keep the file path widget up-to-date with the application active widget.\n        path.model.widget = labShell.currentWidget;\n        labShell.currentChanged.connect(() => {\n            path.model.widget = labShell.currentWidget;\n        });\n        statusBar.registerStatusItem(pathStatusPlugin.id, {\n            item: path,\n            align: 'right',\n            rank: 0,\n            isActive: () => true\n        });\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    docManagerPlugin,\n    pathStatusPlugin,\n    savingStatusPlugin\n];\nexport default plugins;\n/* Widget to display the revert to checkpoint confirmation. */\nclass RevertConfirmWidget extends Widget {\n    /**\n     * Construct a new revert confirmation widget.\n     */\n    constructor(checkpoint, trans, fileType = 'notebook') {\n        super({\n            node: Private.createRevertConfirmNode(checkpoint, fileType, trans)\n        });\n    }\n}\n// Returns the file type for a widget.\nfunction fileType(widget, docManager) {\n    if (!widget) {\n        return 'File';\n    }\n    const context = docManager.contextForWidget(widget);\n    if (!context) {\n        return '';\n    }\n    const fts = docManager.registry.getFileTypesForPath(context.path);\n    return fts.length && fts[0].displayName ? fts[0].displayName : 'File';\n}\n/**\n * Add the file operations commands to the application's command registry.\n */\nfunction addCommands(app, docManager, opener, settingRegistry, translator, labShell, palette, mainMenu) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const category = trans.__('File Operations');\n    const isEnabled = () => {\n        const { currentWidget } = shell;\n        return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n    const isWritable = () => {\n        const { currentWidget } = shell;\n        if (!currentWidget) {\n            return false;\n        }\n        const context = docManager.contextForWidget(currentWidget);\n        return !!(context &&\n            context.contentsModel &&\n            context.contentsModel.writable);\n    };\n    // If inside a rich application like JupyterLab, add additional functionality.\n    if (labShell) {\n        addLabCommands(app, docManager, labShell, opener, translator, palette);\n    }\n    commands.addCommand(CommandIDs.deleteFile, {\n        label: () => `Delete ${fileType(shell.currentWidget, docManager)}`,\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            if (!path) {\n                const command = CommandIDs.deleteFile;\n                throw new Error(`A non-empty path is required for ${command}.`);\n            }\n            return docManager.deleteFile(path);\n        }\n    });\n    commands.addCommand(CommandIDs.newUntitled, {\n        execute: args => {\n            // FIXME-TRANS: Localizing args['error']?\n            const errorTitle = args['error'] || trans.__('Error');\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            const options = {\n                type: args['type'],\n                path\n            };\n            if (args['type'] === 'file') {\n                options.ext = args['ext'] || '.txt';\n            }\n            return docManager.services.contents\n                .newUntitled(options)\n                .catch(error => showErrorMessage(errorTitle, error));\n        },\n        label: args => args['label'] || `New ${args['type']}`\n    });\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            const factory = args['factory'] || void 0;\n            const kernel = args === null || args === void 0 ? void 0 : args.kernel;\n            const options = args['options'] || void 0;\n            return docManager.services.contents\n                .get(path, { content: false })\n                .then(() => docManager.openOrReveal(path, factory, kernel, options));\n        },\n        icon: args => args['icon'] || '',\n        label: args => (args['label'] || args['factory']),\n        mnemonic: args => args['mnemonic'] || -1\n    });\n    commands.addCommand(CommandIDs.openBrowserTab, {\n        execute: args => {\n            const path = typeof args['path'] === 'undefined' ? '' : args['path'];\n            if (!path) {\n                return;\n            }\n            return docManager.services.contents.getDownloadUrl(path).then(url => {\n                const opened = window.open();\n                if (opened) {\n                    opened.opener = null;\n                    opened.location.href = url;\n                }\n                else {\n                    throw new Error('Failed to open new browser tab.');\n                }\n            });\n        },\n        icon: args => args['icon'] || '',\n        label: () => trans.__('Open in New Browser Tab')\n    });\n    commands.addCommand(CommandIDs.reload, {\n        label: () => trans.__('Reload %1 from Disk', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Reload contents from disk'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (!isEnabled()) {\n                return;\n            }\n            const context = docManager.contextForWidget(shell.currentWidget);\n            const type = fileType(shell.currentWidget, docManager);\n            if (!context) {\n                return showDialog({\n                    title: trans.__('Cannot Reload'),\n                    body: trans.__('No context found for current widget!'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            if (context.model.dirty) {\n                return showDialog({\n                    title: trans.__('Reload %1 from Disk', type),\n                    body: trans.__('Are you sure you want to reload the %1 from the disk?', type),\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Reload') })\n                    ]\n                }).then(result => {\n                    if (result.button.accept && !context.isDisposed) {\n                        return context.revert();\n                    }\n                });\n            }\n            else {\n                if (!context.isDisposed) {\n                    return context.revert();\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.restoreCheckpoint, {\n        label: () => trans.__('Revert %1 to Checkpoint', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Revert contents to previous checkpoint'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (!isEnabled()) {\n                return;\n            }\n            const context = docManager.contextForWidget(shell.currentWidget);\n            if (!context) {\n                return showDialog({\n                    title: trans.__('Cannot Revert'),\n                    body: trans.__('No context found for current widget!'),\n                    buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                });\n            }\n            return context.listCheckpoints().then(checkpoints => {\n                if (checkpoints.length < 1) {\n                    return;\n                }\n                const lastCheckpoint = checkpoints[checkpoints.length - 1];\n                if (!lastCheckpoint) {\n                    return;\n                }\n                const type = fileType(shell.currentWidget, docManager);\n                return showDialog({\n                    title: trans.__('Revert %1 to checkpoint', type),\n                    body: new RevertConfirmWidget(lastCheckpoint, trans, type),\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Revert') })\n                    ]\n                }).then(result => {\n                    if (context.isDisposed) {\n                        return;\n                    }\n                    if (result.button.accept) {\n                        if (context.model.readOnly) {\n                            return context.revert();\n                        }\n                        return context.restoreCheckpoint().then(() => context.revert());\n                    }\n                });\n            });\n        }\n    });\n    commands.addCommand(CommandIDs.save, {\n        label: () => trans.__('Save %1', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Save and create checkpoint'),\n        isEnabled: isWritable,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(shell.currentWidget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                    });\n                }\n                if (context.model.readOnly) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('Document is read-only'),\n                        buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                    });\n                }\n                return context\n                    .save()\n                    .then(() => context.createCheckpoint())\n                    .catch(err => {\n                    // If the save was canceled by user-action, do nothing.\n                    // FIXME-TRANS: Is this using the text on the button or?\n                    if (err.message === 'Cancel') {\n                        return;\n                    }\n                    throw err;\n                });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.saveAll, {\n        label: () => trans.__('Save All'),\n        caption: trans.__('Save all open documents'),\n        isEnabled: () => {\n            return some(map(shell.widgets('main'), w => docManager.contextForWidget(w)), c => { var _a, _b; return (_b = (_a = c === null || c === void 0 ? void 0 : c.contentsModel) === null || _a === void 0 ? void 0 : _a.writable) !== null && _b !== void 0 ? _b : false; });\n        },\n        execute: () => {\n            const promises = [];\n            const paths = new Set(); // Cache so we don't double save files.\n            each(shell.widgets('main'), widget => {\n                const context = docManager.contextForWidget(widget);\n                if (context && !context.model.readOnly && !paths.has(context.path)) {\n                    paths.add(context.path);\n                    promises.push(context.save());\n                }\n            });\n            return Promise.all(promises);\n        }\n    });\n    commands.addCommand(CommandIDs.saveAs, {\n        label: () => trans.__('Save %1 As…', fileType(shell.currentWidget, docManager)),\n        caption: trans.__('Save with new path'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(shell.currentWidget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Save'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('Ok') })]\n                    });\n                }\n                return context.saveAs();\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.download, {\n        label: trans.__('Download'),\n        caption: trans.__('Download the file to your computer'),\n        isEnabled,\n        execute: () => {\n            // Checks that shell.currentWidget is valid:\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(shell.currentWidget);\n                if (!context) {\n                    return showDialog({\n                        title: trans.__('Cannot Download'),\n                        body: trans.__('No context found for current widget!'),\n                        buttons: [Dialog.okButton({ label: trans.__('OK') })]\n                    });\n                }\n                return context.download();\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.toggleAutosave, {\n        label: trans.__('Autosave Documents'),\n        isToggled: () => docManager.autosave,\n        execute: () => {\n            const value = !docManager.autosave;\n            const key = 'autosave';\n            return settingRegistry\n                .set(pluginId, key, value)\n                .catch((reason) => {\n                console.error(`Failed to set ${pluginId}:${key} - ${reason.message}`);\n            });\n        }\n    });\n    // .jp-mod-current added so that the console-creation command is only shown\n    // on the current document.\n    // Otherwise it will delegate to the wrong widget.\n    app.contextMenu.addItem({\n        command: 'filemenu:create-console',\n        selector: '[data-type=\"document-title\"].jp-mod-current',\n        rank: 6\n    });\n    if (palette) {\n        [\n            CommandIDs.reload,\n            CommandIDs.restoreCheckpoint,\n            CommandIDs.save,\n            CommandIDs.saveAs,\n            CommandIDs.download,\n            CommandIDs.toggleAutosave\n        ].forEach(command => {\n            palette.addItem({ command, category });\n        });\n    }\n    if (mainMenu) {\n        mainMenu.settingsMenu.addGroup([{ command: CommandIDs.toggleAutosave }], 5);\n        mainMenu.fileMenu.addGroup([{ command: CommandIDs.download }], 6);\n    }\n}\nfunction addLabCommands(app, docManager, labShell, opener, translator, palette) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    // Returns the doc widget associated with the most recent contextmenu event.\n    const contextMenuWidget = () => {\n        var _a;\n        const pathRe = /[Pp]ath:\\s?(.*)\\n?/;\n        const test = (node) => { var _a; return !!((_a = node['title']) === null || _a === void 0 ? void 0 : _a.match(pathRe)); };\n        const node = app.contextMenuHitTest(test);\n        const pathMatch = node === null || node === void 0 ? void 0 : node['title'].match(pathRe);\n        return ((_a = (pathMatch && docManager.findWidget(pathMatch[1], null))) !== null && _a !== void 0 ? _a : \n        // Fall back to active doc widget if path cannot be obtained from event.\n        labShell.currentWidget);\n    };\n    // Returns `true` if the current widget has a document context.\n    const isEnabled = () => {\n        const { currentWidget } = labShell;\n        return !!(currentWidget && docManager.contextForWidget(currentWidget));\n    };\n    commands.addCommand(CommandIDs.clone, {\n        label: () => trans.__('New View for %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: args => {\n            const widget = contextMenuWidget();\n            const options = args['options'] || {\n                mode: 'split-right'\n            };\n            if (!widget) {\n                return;\n            }\n            // Clone the widget.\n            const child = docManager.cloneWidget(widget);\n            if (child) {\n                opener.open(child, options);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.rename, {\n        label: () => trans.__('Rename %1…', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                return renameDialog(docManager, context.path);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.del, {\n        label: () => trans.__('Delete %1', fileType(contextMenuWidget(), docManager)),\n        isEnabled,\n        execute: async () => {\n            // Implies contextMenuWidget() !== null\n            if (isEnabled()) {\n                const context = docManager.contextForWidget(contextMenuWidget());\n                if (!context) {\n                    return;\n                }\n                const result = await showDialog({\n                    title: trans.__('Delete'),\n                    body: trans.__('Are you sure you want to delete %1', context.path),\n                    buttons: [\n                        Dialog.cancelButton({ label: trans.__('Cancel') }),\n                        Dialog.warnButton({ label: trans.__('Delete') })\n                    ]\n                });\n                if (result.button.accept) {\n                    await app.commands.execute('docmanager:delete-file', {\n                        path: context.path\n                    });\n                }\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.showInFileBrowser, {\n        label: () => trans.__('Show in File Browser'),\n        isEnabled,\n        execute: async () => {\n            const widget = contextMenuWidget();\n            const context = widget && docManager.contextForWidget(widget);\n            if (!context) {\n                return;\n            }\n            // 'activate' is needed if this command is selected in the \"open tabs\" sidebar\n            await commands.execute('filebrowser:activate', { path: context.path });\n            await commands.execute('filebrowser:go-to-path', { path: context.path });\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.rename,\n        selector: '[data-type=\"document-title\"]',\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.del,\n        selector: '[data-type=\"document-title\"]',\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.clone,\n        selector: '[data-type=\"document-title\"]',\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.showInFileBrowser,\n        selector: '[data-type=\"document-title\"]',\n        rank: 4\n    });\n}\n/**\n * Handle dirty state for a context.\n */\nfunction handleContext(status, context) {\n    let disposable = null;\n    const onStateChanged = (sender, args) => {\n        if (args.name === 'dirty') {\n            if (args.newValue === true) {\n                if (!disposable) {\n                    disposable = status.setDirty();\n                }\n            }\n            else if (disposable) {\n                disposable.dispose();\n                disposable = null;\n            }\n        }\n    };\n    void context.ready.then(() => {\n        context.model.stateChanged.connect(onStateChanged);\n        if (context.model.dirty) {\n            disposable = status.setDirty();\n        }\n    });\n    context.disposed.connect(() => {\n        if (disposable) {\n            disposable.dispose();\n        }\n    });\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A counter for unique IDs.\n     */\n    Private.id = 0;\n    function createRevertConfirmNode(checkpoint, fileType, trans) {\n        const body = document.createElement('div');\n        const confirmMessage = document.createElement('p');\n        const confirmText = document.createTextNode(trans.__('Are you sure you want to revert the %1 to the latest checkpoint? ', fileType));\n        const cannotUndoText = document.createElement('strong');\n        cannotUndoText.textContent = trans.__('This cannot be undone.');\n        confirmMessage.appendChild(confirmText);\n        confirmMessage.appendChild(cannotUndoText);\n        const lastCheckpointMessage = document.createElement('p');\n        const lastCheckpointText = document.createTextNode(trans.__('The checkpoint was last updated at: '));\n        const lastCheckpointDate = document.createElement('p');\n        const date = new Date(checkpoint.last_modified);\n        lastCheckpointDate.style.textAlign = 'center';\n        lastCheckpointDate.textContent =\n            Time.format(date, 'dddd, MMMM Do YYYY, h:mm:ss a') +\n                ' (' +\n                Time.formatHuman(date) +\n                ')';\n        lastCheckpointMessage.appendChild(lastCheckpointText);\n        lastCheckpointMessage.appendChild(lastCheckpointDate);\n        body.appendChild(confirmMessage);\n        body.appendChild(lastCheckpointMessage);\n        return body;\n    }\n    Private.createRevertConfirmNode = createRevertConfirmNode;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}